<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:48:40 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxsurl class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">URL Parser Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#Enumerations">Enumerations</A><BR>
<A HREF="#Structs">Data Structures</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The gxsURL class is used to parse uniform resource locators. URL information is extracted in the following format:</P>
<FONT FACE="Courier New" SIZE=2><P>protocol://username:password@hostname:port/path/filename</P>
</FONT><P><HR></P>
<B><FONT SIZE=4><P><A NAME="Enumerations">Enumerations</P>
</B></FONT><PRE></A>// This following list of URL protocols is a combination
// standard and non-standard URI schemes taken from:
// <A HREF="http://www.w3.org/pub/WWW/Addressing/schemes.html">http://www.w3.org/pub/WWW/Addressing/schemes.html</A>
<A NAME="ProtocolEnumeration">enum { // Recognized URL protocols</A>
  gxsURL::<B>gxs_Unknown_URL_protocol</B> = 0, // Protocol is not known
  gxsURL::<B>gxs_about</B>,       // Client-Side JavaScript Reference
  gxsURL::<B>gxs_acap</B>,        // ACAP -- Application Configuration Access
  gxsURL::<B>gxs_afp</B>,         // URLs for use with Service Location
  gxsURL::<B>gxs_afs</B>,         // Reserved, per Internet Standard 
  gxsURL::<B>gxs_callto</B>,      // NetMeeting Hyperlink on a Web Page
  gxsURL::<B>gxs_chttp</B>,       // RealPlayer Caching Protocol 
  gxsURL::<B>gxs_cid</B>,         // Content-ID and Message-ID  
  gxsURL::<B>gxs_clsid</B>,       // Identifies OLE/COM classes 
  gxsURL::<B>gxs_data</B>,        // Data: URL scheme
  gxsURL::<B>gxs_file</B>,        // Host-specific file names URL RFC  
  gxsURL::<B>gxs_finger</B>,      // Finger protocol URL
  gxsURL::<B>gxs_ftp</B>,         // File Transfer protocol URL
  gxsURL::<B>gxs_gopher</B>,      // Gopher protocol URL
  gxsURL::<B>gxs_hdl</B>,         // CNRI handle system 
  gxsURL::<B>gxs_http</B>,        // Hypertext Transfer Protocol URL 
  gxsURL::<B>gxs_https</B>,       // HTTP over SSL (Secure Socket Layer)
  gxsURL::<B>gxs_iioploc</B>,     // Interoperable Naming Joint Revised Sub
  gxsURL::<B>gxs_ilu</B>,         // ILU types, string binding handles 
  gxsURL::<B>gxs_imap</B>,        // IMAP URL scheme 
  gxsURL::<B>gxs_ior</B>,         // CORBA interoperable object reference 
  gxsURL::<B>gxs_java</B>,        // Identifies Java classes 
  gxsURL::<B>gxs_javascript</B>,  // Client-Side JavaScript Reference
  gxsURL::<B>gxs_jdbc</B>,        // Used in Java SQL API 
  gxsURL::<B>gxs_ldap</B>,        // An LDAP URL Format
  gxsURL::<B>gxs_lifn</B>,        // BFD -- Bulk File distribution
  gxsURL::<B>gxs_mailto</B>,      // Electronic mail address
  gxsURL::<B>gxs_mid</B>,         // Content-ID and Message-ID 
  gxsURL::<B>gxs_news</B>,        // USENET news
  gxsURL::<B>gxs_nfs</B>,         // NFS URL Scheme
  gxsURL::<B>gxs_nntp</B>,        // USENET news using NNTP access URL
  gxsURL::<B>gxs_path</B>,        // Path spec 
  gxsURL::<B>gxs_pop</B>,         // POP URL Scheme
  gxsURL::<B>gxs_pop3</B>,        // A POP3 URL Interface
  gxsURL::<B>gxs_printer</B>,     // Definition of printer
  gxsURL::<B>gxs_prospero</B>,    // Prospero Directory Service URL
  gxsURL::<B>gxs_res</B>,         // Res Protocol
  gxsURL::<B>gxs_rtsp</B>,        // Real Time Streaming Protocol (RTSP)
  gxsURL::<B>gxs_rvp</B>,         // Rendezvous Protocol
  gxsURL::<B>gxs_rlogin</B>,      // Remote login
  gxsURL::<B>gxs_rwhois</B>,      // The RWhois Uniform Resource Locator
  gxsURL::<B>gxs_rx</B>,          // Remote Execution
  gxsURL::<B>gxs_sdp</B>,         // SDP URL Scheme
  gxsURL::<B>gxs_service</B>,     // Service Templates and service
  gxsURL::<B>gxs_sip</B>,         // SIP URL Scheme
  gxsURL::<B>gxs_shttp</B>,       // Secure http
  gxsURL::<B>gxs_snews</B>,       // NNTP over SSL
  gxsURL::<B>gxs_stanf</B>,       // Stable Network Filenames 
  gxsURL::<B>gxs_telnet</B>,      // Reference to interactive sessions URL RFC 
  gxsURL::<B>gxs_tip</B>,         // Transaction Internet Protocol Version 3.0
  gxsURL::<B>gxs_tn3270</B>,      // Reserved, per Internet Standard 
  gxsURL::<B>gxs_tv</B>,          // Television Broadcasts
  gxsURL::<B>gxs_uuid</B>,        // The UUID addressing scheme
  gxsURL::<B>gxs_wais</B>,        // Wide Area Information Servers URL 
  gxsURL::<B>gxs_whois</B>,       // Distributed directory service
  gxsURL::<B>gxs_whodp</B>        // WhoDP: Widely Hosted Object Data Protocol
};</PRE>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="Structs">Data Structures</A></P>
</B></FONT><FONT COLOR="#008080"><PRE>
// Structure containing info on a URL. 
struct gxsURLInfo
{
  // URL information
  gxString url;&#9;            // Unchanged URL 
  gxString proto;&#9;    // URL protocol 
  gxString host;            // Extracted hostname 
  gxString path, dir, file; // Path, as well as directory and file 
  gxString user, passwd;    // Username and password 
  gxsURLInfo *proxy;        // The exact string to pass to proxy server 
  gxString local;           // The local filename of the URL document
  gxString referer;&#9;    // Source that requested URI was obtained
  int port;                 // Port number
  int proto_type;           // Enumerated value representing a protocol  
  char ftp_type;            // FTP type

  // Members used by HTTP clients
  gxString parent_directory; // This resource's parent directory
  gxString local_file;       // This resource's parent directory
};</PRE>
</FONT><P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxsURL">gxsURL::gxsURL()</A><BR>
<A HREF="#BM_gxsURL">gxsURL::~gxsURL()</A><BR>
<A HREF="#CleanUserName">gxsURL::CleanUserName()</A><BR>
<A HREF="#GetPortNumber">gxsURL::GetPortNumber()</A><BR>
<A HREF="#GetProtocolString">gxsURL::GetProtocolString()</A><BR>
<A HREF="#GetProtocolType">gxsURL::GetProtocolType()</A><BR>
<A HREF="#HasFile">gxsURL::HasFile()</A><BR>
<A HREF="#HasProtocol">gxsURL::HasProtocol()</A><BR>
<A HREF="#ParseDirectory">gxsURL::ParseDirectory()</A><BR>
<A HREF="#ParseHostName">gxsURL::ParseHostName()</A><BR>
<A HREF="#ParsePortNumber">gxsURL::ParsePortNumber()</A><BR>
<A HREF="#ParseProtocol">gxsURL::ParseProtocol()</A><BR>
<A HREF="#ParseURL">gxsURL::ParseURL()</A><BR>
<A HREF="#ParseUserName">gxsURL::ParseUserName()</A><BR>
<A HREF="#ProcessFTPType">gxsURL::ProcessFTPType()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="gxsURL">gxsURL::gxsURL()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="BM_gxsURL">gxsURL::~gxsURL()</A></B></FONT>&nbsp;-&nbsp;Class destructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="CleanUserName">int gxsURL::CleanUserName(const gxString &amp;url, gxString &amp;clean_url)</A></B></FONT>&nbsp;-&nbsp;Public member function used to remove the username and password string from a URL and pass back a clean URL in the "clean_url" variable. Returns false if the URL does not contain a username or password.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetPortNumber">int gxsURL::GetPortNumber(const gxString &amp;url, int &amp;port)</A></B></FONT>&nbsp;-&nbsp;Public member function used to obtain a port number according to the protocol specified in the URL. If the port number cannot be determined or is not known this function will return false and set the port number to port 80.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetProtocolString">char *gxsURL::GetProtocolString(int protocol)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a null terminated string corresponding to the specified protocol. The "protocol" variable must equal one of the integer constants defined in the URL <A HREF="#ProtocolEnumeration">protocol enumeration</A>.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetProtocolType">int gxsURL::GetProtocolType(const gxString &amp;protocol)</A></B></FONT>&nbsp;-&nbsp;Public member function used to identify the specified protocol string and tag it with one of the integer constant defined in the URL <A HREF="#ProtocolEnumeration">protocol enumeration</A>.</P>
<B><FONT COLOR="#000080"><P><A NAME="HasFile">int gxsURL::HasFile(const gxString &amp;path, gxString &amp;dir, gxString &amp;file)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if the path has a file associated with it. The directory and file name will be passed back in the "dir" and "file" variables.</P>
<B><FONT COLOR="#000080"><P><A NAME="HasFile_overload_1">int gxsURL::HasFile(const gxString &amp;path)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if the path has a file associated with it.</P>
<B><FONT COLOR="#000080"><P><A NAME="HasProtocol">int gxsURL::HasProtocol(const gxString &amp;url)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a protocol type defined in the URL <A HREF="#ProtocolEnumeration">protocol enumeration</A> if the URL begins with a protocol.</P>
<B><FONT COLOR="#000080"><P><A NAME="ParseDirectory">int gxsURL::ParseDirectory(gxsURLInfo &amp;u)</A></B></FONT>&nbsp;-&nbsp;Public member function used to build the directory and filename components of the path specified in the gxsURLInfo object. Returns true if the path has a file associated with it.</P>
<B><FONT COLOR="#000080"><P><A NAME="ParseDirectory_overload_1">int gxsURL::ParseDirectory(const gxString &amp;url, gxString &amp;path, gxString &amp;dir,gxString &amp;file)</A></B></FONT>&nbsp;-&nbsp;Public member function Public member function used to build the directory and filename components of the path specified in the gxsURLInfo object. Returns true if the path has a file associated with it. The path, directory, and file name will be passed back in the "path", "dir", and "file" variables.</P>
<B><FONT COLOR="#000080"><P><A NAME="ParseHostName">int gxsURL::ParseHostName(const gxString &amp;url, gxString &amp;host,int remove_port_number = 1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to parse the hostname from a URL. If the "remove_port_number variable is true the port number will be removed from the host name if a port number was specified. Returns true if a valid hostname was found in the string containing the URL.</P>
<B><FONT COLOR="#000080"><P><A NAME="ParsePortNumber">int gxsURL::ParsePortNumber(const gxString &amp;url, int &amp;port)</A></B></FONT>&nbsp;-&nbsp;Public member function used to parse a port number from a URL and pass back the value in the "port" variable. Returns true if a port number was found.</P>
<B><FONT COLOR="#000080"><P><A NAME="ParseProtocol">int gxsURL::ParseProtocol(const gxString &amp;url, gxString &amp;proto_name, int &amp;proto_type)</A></B></FONT>&nbsp;-&nbsp;Public member function used to parse the protocol string in the specified URL. Passes back the protocol name in the "proto_name" variable and a protocol type defined in the URL <A HREF="#ProtocolEnumeration">protocol enumeration</A>. Returns false if no protocol is found in the URL.</P>
<B><FONT COLOR="#000080"><P><A NAME="ParseURL">int gxsURL::ParseURL(const gxString &amp;url, gxsURLInfo &amp;u, int strict = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to extract the specified URL in the following format: </P>
<FONT FACE="Courier New" SIZE=2><P>URL protocol://username:password@hostname:port/path/filename</P>
</FONT><P>Extracts the hostname terminated with a forward slash or colon. Extracts the port number terminated with forward slash, or selects the protocol if no port number is specified. The directory name equals everything after the hostname. The URL information will be passed back in the "u" variable. Returns false if any errors occur during the parsing operation. If the "strict" variable is true this function will return false if an unknown protocol is specified in the URL.</P>
<B><FONT COLOR="#000080"><P><A NAME="ParseURL_overload_1">int gxsURL::ParseURL(const char *url, gxsURLInfo &amp;u, int strict = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to parse the specified URL.</P>
<B><FONT COLOR="#000080"><P><A NAME="ParseUserName">int gxsURL::ParseUserName(const gxString &amp;url, gxString &amp;user, gxString &amp;passwd,gxString &amp;clean_url)</A></B></FONT>&nbsp;-Public member function used to find the optional username and password within the URL, as per RFC1738. Returns false if the URL does not contain a username or password. Passes back a URL without the username and password information in the "clean_url" variable.</P>
<B><FONT COLOR="#000080"><P><A NAME="ProcessFTPType">void gxsURL::ProcessFTPType(const gxString &amp;url, char &amp;ftp_type)</A></B></FONT>&nbsp;-&nbsp;Public member function used to determine the FTP type. </P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
