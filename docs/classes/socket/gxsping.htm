<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:48:56 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxsping class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Embedded Ping Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="gxsocket.htm#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="gxsutils.htm#Constants">Constants</A><BR>
<A HREF="gxsocket.htm#TypeDefinitions">Type Definitions</A><BR>
<A HREF="gxsocket.htm#Enumerations">Enumerations</A><BR>
<A HREF="gxsutils.htm#Structs">Data Structures</A><BR>
<A HREF="#DataMemebers">Data Members</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The embedded ping class is a cross platform ping implementation use to test connectivity between Internet host using ICMP (Internet Control Message Protocol) and raw sockets.</P>
<P><HR></P>
<P><A NAME="DataMemebers"><!-- New Section --><B><FONT SIZE=4>Public Data Members</B></FONT> </A></P>
<B><FONT COLOR="#000080"><P>gxSocket * gxsPing::raw_socket</B></FONT> - Public data member that points the previously opened socket.</P>
<B><FONT COLOR="#000080"><P>gxsEchoRequest gxsPing::echo_request</B></FONT> - Echo request header.</P>
<B><FONT COLOR="#000080"><P>gxsEchoReply gxsPing::echo_reply</B></FONT> - Echo reply header.</P>
<B><FONT COLOR="#000080"><P>int gxsPing::time_sent</B></FONT> - Public data member the records the time the packet was sent.</P>
<B><FONT COLOR="#000080"><P>int gxsPing::elapsed_time</B></FONT> - Public data member the records the time in millisecond for the packet to return.</P>
<B><FONT COLOR="#000080"><P>int gxsPing::time_to_live</B></FONT> - Public data member the records the time to live. </P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxsPing">gxsPing::gxsPing()</A><BR>
<A HREF="#gxsPingDestructor">gxsPing::~gxsPing()</A><BR>
<A HREF="#Ping">gxsPing::Ping()</A><BR>
<A HREF="#RecvEchoReply">gxsPing::RecvEchoReply()</A><BR>
<A HREF="#SendEchoRequest">gxsPing::SendEchoRequest()</A><BR>
<A HREF="#WaitForEchoReply">gxsPing::WaitForEchoReply()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="gxsPing">gxsPing::gxsPing(gxSocket *s)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct a ping object. The socket variable must point to a previously opened and initialized socket, for example:</P>
<PRE>gxSocket raw_socket(AF_INET, SOCK_RAW, IPPROTO_ICMP, 0, hostname);</PRE>
<B><P><A NAME="gxsPingDestructor">NOTE</B>: Under all UNIX platforms you must have root privileges to use raw sockets. Windows 95/98/ME/NT only works with the IPPROTO_ICMP protocol when using raw sockets and does not support the IPPROTO_RAW protocol.</P>
<B><FONT COLOR="#000080"><P>gxsPing::~gxsPing()</A></B></FONT>&nbsp;-&nbsp;Class destructor.</P>
<B><FONT COLOR="#000080"><P><A NAME="Ping">gxSocketError gxsPing::Ping(int time_out_sec = 1, int time_out_usec = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to ping an Internet host with a specified time out value. Return zero if successful or a non-zero value corresponding to one of the integer constants defined in the <A HREF="gxsocket.htm#ErrorCodes">error code</A> enumeration if any failures occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="RecvEchoReply">gxSocketError gxsPing::RecvEchoReply()</A></B></FONT>&nbsp;-&nbsp;Public member function used to receive the echo reply. Return zero if successful or a non-zero value corresponding to one of the integer constants defined in the <A HREF="gxsocket.htm#ErrorCodes">error code</A> enumeration if any failures occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="SendEchoRequest">gxSocketError gxsPing::SendEchoRequest()</A></B></FONT>&nbsp;-&nbsp;Public member function used to send the echo request. Return zero if successful or a non-zero value corresponding to one of the integer constants defined in the <A HREF="gxsocket.htm#ErrorCodes">error code</A> enumeration if any failures occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="WaitForEchoReply">int gxsPing::WaitForEchoReply(int time_out_sec = 1, int time_out_usec = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to wait for the echo reply using the select function to signal when data is waiting to be read. Returns false if the request times out when the specified timeout value is reached.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
