<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:48:18 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxip32 class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">IP32 Data Type</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#Constants">Constants</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The gxIP32 class is used by database applications to represent 32-bit Internet protocol addresses independently of the operating system or hardware platform used.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Constants"><B><FONT SIZE=4>Constants</A></B></FONT> </P>
<PRE>const int <B>ip32MaxStrLen</B> = 255; // Maximum IP32 string length</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxIP32">gxIP32::gxIP32()</A><BR>
<A HREF="#GetByte1">gxIP32::GetByte1()</A><BR>
<A HREF="#GetByte2">gxIP32::GetByte2()</A><BR>
<A HREF="#GetByte3">gxIP32::GetByte3()</A><BR>
<A HREF="#GetByte4">gxIP32::GetByte4()</A><BR>
<A HREF="#SetByte1">gxIP32::SetByte1()</A><BR>
<A HREF="#SetByte2">gxIP32::SetByte2()</A><BR>
<A HREF="#SetByte3">gxIP32::SetByte3()</A><BR>
<A HREF="#SetByte4">gxIP32::SetByte4()</A><BR>
<A HREF="#SetIPAddress">gxIP32::SetIPAddress()</A><BR>
<A HREF="#SizeOf">gxIP32::SizeOf()</A><BR>
<A HREF="#c_str">gxIP32::c_str()</A><BR>
<A NAME="gxIP32"></P>
<B><FONT COLOR="#000080"><P>gxIP32::gxIP32(unsigned char b1 = 0, unsigned char b2 = 0, unsigned char b3 = 0, unsigned char b4 = 0)</A></B></FONT>&nbsp;- Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxIP32_overload_1">gxIP32::gxIP32(char *ip)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct an object and assign its IP address based on the null terminated "ip" string.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxIP32_overload_2">gxIP32::gxIP32(const char *ip)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct an object and assign its IP address based on the null terminated "ip" string. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxIP32_overload_3">gxIP32::gxIP32(const gxIP32&amp; ob)</A></B></FONT>&nbsp;-&nbsp;Class copy constructor.</P>
<B><FONT COLOR="#000080"><P>gxIP32&amp; gxIP32::operator=(const gxIP32&amp; ob)</B></FONT>&nbsp;-&nbsp;Assignment operator.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetByte1">unsigned char gxIP32::GetByte1()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns IP address byte 1.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetByte2">unsigned char gxIP32::GetByte2()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns IP address byte 2.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetByte3">unsigned char gxIP32::GetByte3()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns IP address byte 3.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetByte4">unsigned char gxIP32::GetByte4()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns IP address byte 4.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetByte1">void gxIP32::SetByte1(unsigned char b = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set IP address byte 1.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetByte2">void gxIP32::SetByte2(unsigned char b = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set IP address byte 1.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetByte3">void gxIP32::SetByte3(unsigned char b = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set IP address byte 1.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetByte4">void gxIP32::SetByte4(unsigned char b = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set IP address byte 1.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetIPAddress">int gxIP32::SetIPAddress(char *ip)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the IP address using a null terminated character string. Return false if the string is not formatted correctly using the 32-bit dotted notation: 127.0.0.1</P>
<B><FONT COLOR="#000080"><P><A NAME="SetIPAddress_overload_1">int gxIP32::SetIPAddress(const char *ip)</A></B></FONT>&nbsp;-&nbsp; Public member function used to set the IP address using a null terminated character string. Return false if the string is not formatted correctly using the 32-bit dotted notation: 127.0.0.1</P>
<B><FONT COLOR="#000080"><P><A NAME="SetIPAddress_overload_2">void gxIP32::SetIPAddress(unsigned char b1 = 0, unsigned char b2 = 0, unsigned char b3 = 0, unsigned char b4 = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the IP address using individual byte values.</P>
<B><FONT COLOR="#000080"><P><A NAME="SizeOf">unsigned gxIP32::SizeOf()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the size of a gxIP32 object.</P>
<B><FONT COLOR="#000080"><P><A NAME="c_str">char *gxIP32::c_str(char *sbuf)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back a null terminated IP32 string in the "sbuf" variable and redundantly return the string. <B>NOTE</B>: The calling function must allocate a memory buffer large enough to hold a single IP32 string in dotted notation: 127.0.0.1</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
