<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:49:07 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxsmtp class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Embedded SMTP Client</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#DataMembers">Data Members</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The embedded SMTP (Simple Mail Transfer Protocol) client is a cross platform SMTP implementation used with applications that require SMTP client/server functions. The gxsSMTPClient class is derived from the <A HREF="gxsocket.htm">gxSocket</A> class and conforms to RFC 821: <A HREF="http://www.faqs.org/rfcs/rfc821.html">http://www.faqs.org/rfcs/rfc821.html</A></P>
<P><HR></P>
<P><A NAME="DataMembers"><!-- New Section --><B><FONT SIZE=4>Public Data Members</B></FONT> </A></P>
<B><FONT COLOR="#000080"><P>char gxsSMTPClient:: reply_buf[gxsBUF_SIZE]</B></FONT> - Buffer used to hold the last reply.</P>
<B><FONT COLOR="#000080"><P>char gxsSMTPClient:: command_buf[gxsBUF_SIZE]</B></FONT> - Buffer used to hold the last command.</P>
<B><FONT COLOR="#000080"><P>int gxsSMTPClient:: time_out_sec</B></FONT> - Number of seconds before a blocking timeout.</P>
<B><FONT COLOR="#000080"><P>int gxsSMTPClient:: time_out_usec</B></FONT> - Number of microseconds before a blocking timeout.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxsSMTPClient">gxsSMTPClient::gxsSMTPClient()</A><BR>
<A HREF="#gxsSMTPClientDestructor">gxsSMTPClient::~gxsSMTPClient()</A><BR>
<A HREF="#ConnectClient">gxsSMTPClient::ConnectClient()</A><BR>
<A HREF="#GetSMTPTimeStamp">gxsSMTPClient::GetSMTPTimeStamp()</A><BR>
<A HREF="#RecvResponse">gxsSMTPClient::RecvResponse()</A><BR>
<A HREF="#SMTPData">gxsSMTPClient::SMTPData()</A><BR>
<A HREF="#SMTPLogin">gxsSMTPClient::SMTPLogin()</A><BR>
<A HREF="#SMTPLogout">gxsSMTPClient::SMTPLogout()</A><BR>
<A HREF="#SMTPMailFrom">gxsSMTPClient::SMTPMailFrom()</A><BR>
<A HREF="#SMTPRSet">gxsSMTPClient::SMTPRSet()</A><BR>
<A HREF="#SMTPRcptTo">gxsSMTPClient::SMTPRcptTo()</A><BR>
<A HREF="#SMTPSendMessage">gxsSMTPClient::SMTPSendMessage()</A><BR>
<A HREF="#SendCommand">gxsSMTPClient::SendCommand()</A><BR>
<A HREF="#SetTimeOut">gxsSMTPClient::SetTimeOut()</A><BR>
<A HREF="#WaitForReply">gxsSMTPClient::WaitForReply()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="gxsSMTPClient">gxsSMTPClient::gxsSMTPClient()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxsSMTPClientDestructor">gxsSMTPClient::~gxsSMTPClient()</A></B></FONT>&nbsp;-&nbsp;Class destructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="ConnectClient">gxSocketError gxsSMTPClient::ConnectClient(const char *host, int port = gxSOCKET_SMTP_PORT)</A></B></FONT>&nbsp;-Public member function used to connect a SMTP client to a server. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetSMTPTimeStamp">void gxsSMTPClient::GetSMTPTimeStamp(char *sbuf)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back an SMTP time string in the following format:</P>
<PRE>Weekday, Day Month Year HH:MM:SS - Timezone</PRE>
<B><P><A NAME="RecvResponse">NOTE</B>: The calling function should allocate memory for the "sbuf" variable. If "sbuf" variable is null this function will allocate memory for the time stamp string, which must be freed by the caller.</P>
<B><FONT COLOR="#000080"><P>int gxsSMTPClient::RecvResponse(char *buf, int bytes, const char *response)</A></B></FONT>&nbsp;-&nbsp;Public Blocking receive function used to read a reply from an SMTP server following a command. If the specified response is not received within the timeout period this function will return false to indicate an error. Returns true if successful. </P>
<B><FONT COLOR="#000080"><P><A NAME="SMTPData">gxSocketError gxsSMTPClient::SMTPData(const char *body_text, int body_len)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a text body. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="SMTPLogin">gxSocketError gxsSMTPClient::SMTPLogin(const char *local_host_name)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send the SMTP "Hello" command. The "local_host_name" variable must be a null terminated string set to either your domain name or fully qualified host name. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="SMTPLogout">gxSocketError gxsSMTPClient::SMTPLogout()</A></B></FONT>&nbsp;-&nbsp;Public member function used to send the SMTP "QUIT" command. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="SMTPMailFrom">gxSocketError gxsSMTPClient::SMTPMailFrom(const char *from_email_address)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send the SMTP "MAIL FROM" command. The "from_email_address" variable must be a null terminated string set to your return email address. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="SMTPRSet">gxSocketError gxsSMTPClient::SMTPRSet()</A></B></FONT>&nbsp;-&nbsp;Public member function used to send the SMTP "Reset" command. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="SMTPRcptTo">gxSocketError gxsSMTPClient::SMTPRcptTo(const char *to_email_address)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send the SMTP "RCPT TO" command. The "to_email_address" variable must be a null terminated string set to a valid email recipient. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="SMTPSendMessage">gxSocketError gxsSMTPClient::SMTPSendMessage(const char *to, const char *from, const char *subject, const char *body)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a formatted email message. The "to", "from", "subject", and "body" variable must be null terminated strings set to a valid email recipient, your return email address, a subject, and a message body. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="SendCommand">gxSocketError gxsSMTPClient::SendCommand(const char *command, const char *response, const char *args = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a command to an SMTP server and read the server's response. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetTimeOut">void gxsSMTPClient::SetTimeOut(int seconds, int useconds)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the SMTP timeout value.</P>
<B><FONT COLOR="#000080"><P><A NAME="WaitForReply">int gxsSMTPClient::WaitForReply()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns false if a reply time is longer then the timeout values.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
