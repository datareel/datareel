<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:49:02 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxsocket class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">gxSocket Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="#Constants">Constants</A><BR>
<A HREF="#TypeDefinitions">Type Definitions</A><BR>
<A HREF="#Enumerations">Enumerations</A> <BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The gxSocket class is an object-oriented Winsock/BSD wrapper used to create TCP/IP sockets on WIN32 and UNIX platforms. The gxSocket class supports stream sockets and datagram sockets and includes several low-level functions needed by derived classes to establish communication end-points and transfer data. Raw sockets are supported under UNIX and Windows 2000 with limited raw socket support for Windows 95/98/ME/NT.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="ConditionalDirectives">Conditional Directives</A></P>
</FONT><P>__WIN32__</B> - Conditional directive required for all WIN32 platforms</P>
<B><P>__UNIX__</B> - Conditional directive required for all UNIX variants.</P>
<B><P>__HPUX__ </B>- Conditional directive required for all HPUX platforms.</P>
<B><P>__LINUX__ - </B>Conditional directive required for all Linux platforms.</P>
<B><P>__SOLARIS__ - </B>Conditional directive required for all Solaris platforms.</P>
<B><P>__BSD_UNIX__ </B>- Conditional directive used only if BSD include files are required. This directive is not required by any of the UNIX platforms supported by gxSocket version 4.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="Constants">Constants</A></P>
</B></FONT><PRE>const unsigned <B>gxsBUF_SIZE</B>     =  1024; // Fixed string buffer length
const unsigned <B>gxsMAX_NAME_LEN</B> =  256;  // Maximum string name length
const unsigned <B>gxsRX_BUF_SIZE</B>  =  4096; // Default receive buffer size
const unsigned <B>gxsTX_BUF_SIZE</B>  =  4096; // Default transmit buffer size
  
// IANA assigned port number for database block sockets
const int <B>gxsDATA_PORT</B> = 2073;</PRE>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="TypeDefinitions">Type Definitions</A></P>
</FONT><P>gxsAddressFamily</B> - Type definition used to represent the address family to which a socket belongs.</P>
<B><P>gxsProtocolFamily</B> - Type definition used to represent the protocol family to which a socket belongs.</P>
<B><P>gxsSocket_t</B> - Type used to ID sockets.</P>
<B><P>gxsPort_t</B> - Type used for port numbers.</P>
<B><P>gxsSocketAddress</B> - Type used to for a socket Internet address structures.</P>
<B><P>gxsServent</B> - Type definition used for service name and protocol information structures. </P>
<B><P>gxsHostNameInfo</B> - Type definition used for host name information structures.</P>
<B><P>gxsInternetAddress -</B> Type definition used for Internet address structures.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="Enumerations">Enumerations</A></P>
</B></FONT><PRE><A NAME="ErrorCodes">enum gxsSocketError</A> {    // gxSocket exception codes
  <B>gxSOCKET_NO_ERROR</B> = 0,       // No socket errors reported
  <B>gxSOCKET_INVALID_ERROR_CODE</B>, // Invalid socket error code

  // Socket error codes
  <B>gxSOCKET_ACCEPT_ERROR</B>,         // Error accepting remote socket
  <B>gxSOCKET_BIND_ERROR</B>,           // Could not bind socket
  <B>gxSOCKET_BUFOVER_ERROR</B>,        // Buffer overflow
  <B>gxSOCKET_CONNECT_ERROR</B>,        // Could not connect socket
  <B>gxSOCKET_FILESYSTEM_ERROR</B>,     // A file system error occurred
  <B>gxSOCKET_GETOPTION_ERROR</B>,      // Error getting socket option
  <B>gxSOCKET_HOSTNAME_ERROR</B>,       // Could not resolve hostname
  <B>gxSOCKET_INIT_ERROR</B>,           // Initialization error
  <B>gxSOCKET_LISTEN_ERROR</B>,         // Listen error
  <B>gxSOCKET_PEERNAME_ERROR</B>,       // Get peer name error
  <B>gxSOCKET_PROTOCOL_ERROR</B>,       // Unknown protocol requested
  <B>gxSOCKET_RECEIVE_ERROR</B>,        // Receive error
  <B>gxSOCKET_REQUEST_TIMEOUT</B>,      // Request timed out
  <B>gxSOCKET_SERVICE_ERROR</B>,        // Unknown service requested
  <B>gxSOCKET_SETOPTION_ERROR</B>,      // Error setting socket option
  <B>gxSOCKET_SOCKNAME_ERROR</B>,       // Get socket name error
  <B>gxSOCKET_SOCKETTYPE_ERROR</B>,     // Unknown socket type requested
  <B>gxSOCKET_TRANSMIT_ERROR</B>,       // Transmit error

  // WIN32 WinSock Error Codes (Transparent to UNIX applications)
  <B>gxSOCKET_WINSOCKCLEANUP_ERROR</B>, // WSACleanup operation failed
<B>  gxSOCKET_WINSOCKEINVAL_ERROR</B>,  // Version not supported by DLL
  <B>gxSOCKET_WINSOCKINIT_ERROR</B>,    // Could not initialize Winsock
  <B>gxSOCKET_WINSOCKNETWORK_ERROR</B>, // Network subsystem is not ready
  <B>gxSOCKET_WINSOCKVERSION_ERROR</B>, // Requested version not supported
  
  // Exception codes added to handle variable block errors
  <B>gxSOCKET_BLOCKACK_ERROR</B>,    // Database block acknowledgment error
  <B>gxSOCKET_BLOCKHEADER_ERROR</B>, // Bad variable block header
  <B>gxSOCKET_BLOCKSIZE_ERROR</B>,   // Bad variable block size
  <B>gxSOCKET_BLOCKSYNC_ERROR</B>    // Variable block synchronization error
};

<A NAME="LibraryCodes">enum gxsSocketLibraryVersion </A>{
  // Platform specific library version constants

  // WIN32 supported WSA versions. NOTE: The WSA constants have no
  // meaning in UNIX implementations but will work transparently in
  // all UNIX applications.
  <B>gxSOCKET_WSAVER_ONEZERO</B>, // Testing purposes only
  <B>gxSOCKET_WSAVER_ONEONE</B>,  // Windows 95A/B/C, 98, 98SE, NT4.0 
  <B>gxSOCKET_WSAVER_TWOZERO</B>, // Windows 98, 98SE, 2000 compatible
  <B>gxSOCKET_WSAVER_TWOTWO</B>   // Windows 98SE, 2000 compatible
};

<A NAME="ServicesCodes">enum gxsServices {</A>
// Enumeration for common port numbers found in the /etc/services file
// on UNIX platforms or the \windows\services file on WIN32 platforms.
// A complete list of all assigned port numbers is maintained by IANA:
// <A HREF="http://www.iana.org/">http://www.iana.org</A>
// <A HREF="http://www.iana.org/assignments/port-numbers">http://www.iana.org/assignments/port-numbers</A>

  // Common port assignments
  <B>gxSOCKET_ECHO_PORT</B>       = 7,   // Echo port
  <B>gxSOCKET_FTPDATA_PORT</B>    = 20,  // FTP data port
  <B>gxSOCKET_FTP_PORT</B>        = 21,  // tcp ftp port
  <B>gxSOCKET_TELNET_PORT</B>     = 23,  // tcp telnet port
  <B>gxSOCKET_SMTP_PORT</B>       = 25,  // tcp simple mail transfer protocol
  <B>gxSOCKET_TIME_PORT</B>       = 37,  // tcp time server
  <B>gxSOCKET_NAME_PORT</B>       = 42,  // tcp name server
  <B>gxSOCKET_NAMESERVER_PORT</B> = 53,  // tcp domain name server
  <B>gxSOCKET_FINGER_PORT</B>     = 79,  // tcp finger port
  <B>gxSOCKET_HTTP_PORT</B>       = 80,  // tcp http port
  <B>gxSOCKET_POP_PORT</B>        = 109, // tcp postoffice protocol
  <B>gxSOCKET_POP2_PORT</B>       = 109, // tcp postoffice protocol
  <B>gxSOCKET_POP3_PORT</B>       = 110, // tcp postoffice protocol
  <B>gxSOCKET_NNTP_PORT</B>       = 119, // tcp network news transfer protocol

  // 03/19/2001: IANA assigned port number for database block sockets 
  <B>gxSOCKET_DBS_PORT</B>     = 2073, // gx-dbs-port
  <B>gxSOCKET_DEFAULT_PORT</B> = 2073  // Default port assignment if no port is specified
};

<A NAME="ServerCodes">enum gxsServerTypes {
</A>  <B>gxSOCKET_STREAM_SERVER</B>,
  <B>gxSOCKET_DATAGRAM_SERVER</B>,
  <B>gxSOCKET_SERIAL_PORT_SERVER</B>,
  <B>gxSOCKET_HTTP_SERVER</B>,
  <B>gxSOCKET_LOCAL_FILE_SYSTEM
</B>};

<A NAME="ClientCodes">enum gxClientTypes {
</A>  <B>gxSOCKET_STREAM_CLIENT</B>,
  <B>gxSOCKET_DATAGRAM_CLIENT</B>,
  <B>gxSOCKET_HTTP_CLIENT</B>,
  <B>gxSOCKET_SERIAL_PORT_CLIENT
</B>};</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxSocket">gxSocket::gxSocket()</A><BR>
<A HREF="#gxSocketDestructor">gxSocket::~gxSocket()</A><BR>
<A HREF="#Accept">gxSocket::Accept()</A><BR>
<A HREF="#Bind">gxSocket::Bind()</A><BR>
<A HREF="#BytesMoved">gxSocket::BytesMoved()</A><BR>
<A HREF="#BytesRead">gxSocket::BytesRead()</A><BR>
<A HREF="#Close">gxSocket::Close()</A><BR>
<A HREF="#CloseRemoteSocket">gxSocket::CloseRemoteSocket()</A><BR>
<A HREF="#CloseSocket">gxSocket::CloseSocket()</A><BR>
<A HREF="#Connect">gxSocket::Connect()</A><BR>
<A HREF="#GetAddressFamily">gxSocket::GetAddressFamily()</A><BR>
<A HREF="#GetBoundIPAddress">gxSocket::GetBoundIPAddress()</A><BR>
<A HREF="#GetBoundSocket">gxSocket::GetBoundSocket()</A><BR>
<A HREF="#GetBytesMoved">gxSocket::GetBytesMoved()</A><BR>
<A HREF="#GetBytesRead">gxSocket::GetBytesRead()</A><BR>
<A HREF="#GetClientInfo">gxSocket::GetClientInfo()</A><BR>
<A HREF="#GetDomainName">gxSocket::GetDomainName()</A><BR>
<A HREF="#GetHostInformation">gxSocket::GetHostInformation()</A><BR>
<A HREF="#GetHostName">gxSocket::GetHostName()</A><BR>
<A HREF="#GetIPAddress">gxSocket::GetIPAddress()</A><BR>
<A HREF="#GetPeerName">gxSocket::GetPeerName()</A><BR>
<A HREF="#GetPortNumber">gxSocket::GetPortNumber()</A><BR>
<A HREF="#GetProtocolFamily">gxSocket::GetProtocolFamily()</A><BR>
<A HREF="#GetRemoteAddressFamily">gxSocket::GetRemoteAddressFamily()</A><BR>
<A HREF="#GetRemoteHostName">gxSocket::GetRemoteHostName()</A><BR>
<A HREF="#GetRemotePortNumber">gxSocket::GetRemotePortNumber()</A><BR>
<A HREF="#GetRemoteSocket">gxSocket::GetRemoteSocket()</A><BR>
<A HREF="#GetServByName">gxSocket::GetServByName()</A><BR>
<A HREF="#GetServByPort">gxSocket::GetServByPort()</A><BR>
<A HREF="#GetServiceInformation">gxSocket::GetServiceInformation()</A><BR>
<A HREF="#GetSockName">gxSocket::GetSockName()</A><BR>
<A HREF="#GetSockOpt">gxSocket::GetSockOpt()</A><BR>
<A HREF="#GetSocket">gxSocket::GetSocket()</A><BR>
<A HREF="#GetSocketError">gxSocket::GetSocketError()</A><BR>
<A HREF="#GetSocketType">gxSocket::GetSocketType()</A><BR>
<A HREF="#InitSocket">gxSocket::InitSocket()</A><BR>
<A HREF="#InitSocketLibrary">gxSocket::InitSocketLibrary()</A><BR>
<A HREF="#IsBound">gxSocket::IsBound()</A><BR>
<A HREF="#IsConnected">gxSocket::IsConnected()</A><BR>
<A HREF="#Listen">gxSocket::Listen()</A><BR>
<A HREF="#RawRead">gxSocket::RawRead()</A><BR>
<A HREF="#RawReadFrom">gxSocket::RawReadFrom()</A><BR>
<A HREF="#RawRemoteRead">gxSocket::RawRemoteRead()</A><BR>
<A HREF="#RawRemoteWrite">gxSocket::RawRemoteWrite()</A><BR>
<A HREF="#RawWrite">gxSocket::RawWrite()</A><BR>
<A HREF="#RawWriteTo">gxSocket::RawWriteTo()</A><BR>
<A HREF="#ReadSelect">gxSocket::ReadSelect()</A><BR>
<A HREF="#Recv">gxSocket::Recv()</A><BR>
<A HREF="#RecvFrom">gxSocket::RecvFrom()</A><BR>
<A HREF="#ReleaseRemoteSocket">gxSocket::ReleaseRemoteSocket()</A><BR>
<A HREF="#ReleaseSocket">gxSocket::ReleaseSocket()</A><BR>
<A HREF="#ReleaseSocketLibrary">gxSocket::ReleaseSocketLibrary()</A><BR>
<A HREF="#RemoteRecv">gxSocket::RemoteRecv()</A><BR>
<A HREF="#RemoteSend">gxSocket::RemoteSend()</A><BR>
<A HREF="#ResetError">gxSocket::ResetError()</A><BR>
<A HREF="#ResetRead">gxSocket::ResetRead()</A><BR>
<A HREF="#ResetSocketError">gxSocket::ResetSocketError()</A><BR>
<A HREF="#ResetWrite">gxSocket::ResetWrite()</A><BR>
<A HREF="#Send">gxSocket::Send()</A><BR>
<A HREF="#SendTo">gxSocket::SendTo()</A><BR>
<A HREF="#SetAddressFamily">gxSocket::SetAddressFamily()</A><BR>
<A HREF="#SetBytesMoved">gxSocket::SetBytesMoved()</A><BR>
<A HREF="#SetBytesRead">gxSocket::SetBytesRead()</A><BR>
<A HREF="#SetPortNumber">gxSocket::SetPortNumber()</A><BR>
<A HREF="#SetProtocolFamily">gxSocket::SetProtocolFamily()</A><BR>
<A HREF="#SetRemoteSocket">gxSocket::SetRemoteSocket()</A><BR>
<A HREF="#SetSockOpt">gxSocket::SetSockOpt()</A><BR>
<A HREF="#SetSocket">gxSocket::SetSocket()</A><BR>
<A HREF="#SetSocketError">gxSocket::SetSocketError()</A><BR>
<A HREF="#SetSocketType">gxSocket::SetSocketType()</A><BR>
<A HREF="#ShutDown">gxSocket::ShutDown()</A><BR>
<A HREF="#ShutDownRemoteSocket">gxSocket::ShutDownRemoteSocket()</A><BR>
<A HREF="#ShutDownSocket">gxSocket::ShutDownSocket()</A><BR>
<A HREF="#Socket">gxSocket::Socket()</A><BR>
<A HREF="#SocketExceptionMessage">gxSocket::SocketExceptionMessage()</A><BR>
<A NAME="gxSocket"></P>
<B><FONT COLOR="#000080"><P>gxSocket::gxSocket()</A></B></FONT>&nbsp;-&nbsp;Socket constructor that performs no initialization other then setting default values for the socket data members. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxSocket_overload_1">gxSocket::gxSocket(gxsSocket_t st, gxsPort_t port, char *hostname = 0)</A></B></FONT>&nbsp;-&nbsp;Socket constructor used to initialize the socket according to the socket type: <B>SOCK_STREAM</B> or <B>SOCK_DGRAM</B>. All ports below 1024 are reserved. A hostname name should only be specified for client sockets. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxSocket_overload_2">gxSocket::gxSocket(gxsAddressFamily af, gxsSocket_t st, gxsProtocolFamily pf, int port, char *hostname = 0)</A></B></FONT>&nbsp;-&nbsp;Socket constructor used to initialize the socket according to the address family, socket type, and protocol family. All ports below 1024 are reserved. A hostname name should only be specified for client sockets.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxSocket_overload_3">gxSocket::gxSocket(const gxSocket &amp;ob)</A></B></FONT>&nbsp;-&nbsp;Private copy constructor used to disallow copying. </P>
<B><FONT COLOR="#000080"><P><A NAME="operator_">void gxSocket::operator=(const gxSocket &amp;ob)</A></B></FONT>&nbsp;-&nbsp;Private assignment operator used to disallow assignment.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxSocketDestructor">virtual gxSocket::~gxSocket()</A></B></FONT>&nbsp;-&nbsp;Class destructor used to automatically close an open socket when a gxSocket object is deleted.</P>
<B><FONT COLOR="#000080"><P><A NAME="Accept">gxsSocket_t gxSocket::Accept()</A></B></FONT>&nbsp;-&nbsp;Public member function used to accept a connect from a remote socket. An Accept() call blocks the server until the a client requests service. Returns a valid socket descriptor or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="Bind">int gxSocket::Bind()</A></B></FONT>&nbsp;-&nbsp;Public member function used to bind the socket to a name so that other processes can reference it and allow this socket to receive messages. Returns -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="BytesMoved">int gxSocket::BytesMoved()</A></B></FONT>&nbsp;-&nbsp;Public member function that return the total number of bytes moved following a write operation.</P>
<B><FONT COLOR="#000080"><P><A NAME="BytesRead">int gxSocket::BytesRead()</A></B></FONT>&nbsp;-&nbsp;Public member function that return the total number of bytes read following a read operation.</P>
<B><FONT COLOR="#000080"><P><A NAME="Close">void gxSocket::Close()</A></B></FONT>&nbsp;-&nbsp;Public member function used to close any and un-initialize any bound sockets.</P>
<B><FONT COLOR="#000080"><P><A NAME="Close_overload_1">void gxSocket::Close(gxsSocket_t &amp;s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to close the specified socket. </P>
<B><FONT COLOR="#000080"><P><A NAME="CloseRemoteSocket">void gxSocket::CloseRemoteSocket()</A></B></FONT>&nbsp;-&nbsp;Public member function used to close the client socket. </P>
<B><FONT COLOR="#000080"><P><A NAME="CloseSocket">void gxSocket::CloseSocket()</A></B></FONT>&nbsp;-&nbsp;Public member function used to close the server side socket.</P>
<B><FONT COLOR="#000080"><P><A NAME="Connect">int gxSocket::Connect()</A></B></FONT>&nbsp;-&nbsp;Public member function used to connect the socket to a client or server. On the client side a connect call is used to initiate a connection. Returns -1 if an error occurs. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetAddressFamily">gxsAddressFamily gxSocket::GetAddressFamily()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the current address family.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetBoundIPAddress">int gxSocket::GetBoundIPAddress(char *sbuf)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the local or server IP address in the "sbuf" variable. A memory buffer equal to <B>gxsMAX_NAME_LEN</B> must be pre-allocated prior to using this function. Return -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetBoundSocket">gxsSocket_t gxSocket::GetBoundSocket()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the currently bound socket. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetBytesMoved">int *gxSocket::GetBytesMoved()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the total number of bytes written.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetBytesRead">int *gxSocket::GetBytesRead()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the total number of bytes read.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetClientInfo">void gxSocket::GetClientInfo(char *client_name, int &amp;r_port)</A></B></FONT>&nbsp;-&nbsp;Public member function used to get the client's host name and port number. A memory buffer equal to <B>gxsMAX_NAME_LEN</B> must be pre-allocated prior to using this function.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetDomainName">int gxSocket::GetDomainName(char *sbuf)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the domain name of this machine in the "sbuf" variable. A memory buffer equal to <B>gxsMAX_NAME_LEN</B> must be pre-allocated prior to using this function. Return -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetHostInformation">gxsHostNameInfo *gxSocket::GetHostInformation(char *hostname)</A></B></FONT>&nbsp;-&nbsp;Public member function used to obtain hostname information about a specified host. The source of this information is dependent on the calling function's platform configuration which should be a DNS, local host table, and/or NIS database. Returns a pointer to a gxsHostNameInfo data structure if information is available or a null value if the hostname cannot be found. <B>NOTE</B>: The calling function must free the memory allocated for gxsHostNameInfo data structure upon each successful return.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetHostName">int gxSocket::GetHostName(char *sbuf)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the host name of this machine in the "sbuf" variable. A memory buffer equal to <B>gxsMAX_NAME_LEN</B> must be pre-allocated prior to using this function. Return -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetIPAddress">int gxSocket::GetIPAddress(char *sbuf)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the IP Address of this machine in the "sbuf" variable. A memory buffer equal to <B>gxsMAX_NAME_LEN</B> must be pre-allocated prior to using this function. Return -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetPeerName">int gxSocket::GetPeerName(gxsSocket_t s, gxsSocketAddress *sa)</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the current name of the specified socket descriptor. Returns -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetPeerName_overload_1">int gxSocket::GetPeerName()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the current name for the remote socket descriptor. Returns -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetPortNumber">int gxSocket::GetPortNumber()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns port number actually set by the system. Use this function after a call to the gxSocket::GetSockName() function.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetProtocolFamily">gxsProtocolFamily gxSocket::GetProtocolFamily()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the current protocol family.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetRemoteAddressFamily">gxsAddressFamily gxSocket::GetRemoteAddressFamily()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the current address family of the remote socket</P>
<B><FONT COLOR="#000080"><P><A NAME="GetRemoteHostName">int gxSocket::GetRemoteHostName(char *sbuf)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the client host name client in the "sbuf" variable. A memory buffer equal to <B>gxsMAX_NAME_LEN</B> must be pre-allocated prior to using this function. Return -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetRemotePortNumber">int gxSocket::GetRemotePortNumber()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the port number of the client socket. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetRemoteSocket">gxsSocket_t gxSocket::GetRemoteSocket()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the client side socket. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetServByName">int gxSocket::GetServByName(char *name, char *protocol = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set service information corresponding to a service name and protocol. Returns -1 if an unknown service or protocol is requested. <B>NOTE</B>: This information is obtained from this machines local services file or from a NIS database. If the "protocol" pointer is null, this function passes back the first service entry that matches the protocol name or alias. Otherwise this function matches both the name and the protocol.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetServByPort">int gxSocket::GetServByPort(int port, char *protocol = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set service information corresponding to a port number and protocol. Returns -1 if an unknown service or protocol is requested. <B>NOTE</B>: This information is obtained from this machines local services file or from a NIS database. If the "protocol" pointer is null, this function passes back the first service entry that matches the port number. Otherwise this function matches both the port and the protocol.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetServiceInformation">gxsServent *gxSocket::GetServiceInformation(char *name, char *protocol = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to obtain service information about a specified name. The source of this information is dependent on the calling function's platform configuration, which should be a local services file, or a NIS database. Returns a pointer to a gxsServent data structure if service information is available or a null value if the service cannot be found. <B>NOTE</B>: The calling function must free the memory allocated for gxsServent data structure upon each successful return. If the "protocol" pointer is null, this function passes back the first service entry that matches the protocol name or alias. Otherwise this function matches both the name and the protocol.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetServiceInformation_overload_1">gxsServent *gxSocket::GetServiceInformation(int port, char *protocol = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to obtain service information about a specified port. The source of this information is dependent on the calling function's platform configuration, which should be a local services file, or a NIS database. Returns a pointer to a gxsServent data structure if service information is available or a null value if the service cannot be found. <B>NOTE</B>: The calling function must free the memory allocated for gxsServent data structure upon each successful return. If the "protocol" pointer is null, this function passes back the first service entry that matches the port number. Otherwise this function matches both the port and the protocol.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetSockName">int gxSocket::GetSockName(gxsSocket_t s, gxsSocketAddress *sa)</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieves the current name for the specified socket descriptor. It is used on a bound and/or connected socket and returns the local association. This function is especially useful when a connect call has been made without doing a bind first in which case this function provides the only means by which you can determine the local association which has been set by the system. Returns -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetSockName_overload_1">int gxSocket::GetSockName()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the current name of the socket descriptor. It is used on a bound and/or connected socket and returns the local association. This function is especially useful when a connect call has been made without doing a bind first in which case this function provides the only means by which you can determine the local association which has been set by the system. Returns -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetSockOpt">int gxSocket::GetSockOpt(gxsSocket_t s, int level, int optName, void *optVal, unsigned *optLen)</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the socket option for the specified option level or name. Returns -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetSockOpt_overload_1">int gxSocket::GetSockOpt(int level, int optName, void *optVal, unsigned *optLen)</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the current socket option for the specified option level or name. Returns -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetSocket">gxsSocket_t gxSocket::GetSocket()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the this object's socket. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetSocketError">gxSocketError gxSocket::GetSocketError()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the last reported socket error. The return value will correspond to one of the integer constants defined in the <A HREF="#ErrorCodes">error code</A> enumeration. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetSocketType">gxsSocket_t gxSocket::GetSocketType()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the current socket type. </P>
<B><FONT COLOR="#000080"><P><A NAME="InitSocket">gxsSocket_t gxSocket::InitSocket(gxsSocket_t st, int port, char *hostname = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to create a and initialize a socket according to the socket type: <B>SOCK_STREAM</B> or <B>SOCK_DGRAM</B>. All ports below 1024 are reserved. The "hostname" variable is an optional parameter that allows clients to specify a server name. Returns a valid socket descriptor or -1 if the socket cannot be initialized.</P>
<B><FONT COLOR="#000080"><P><A NAME="InitSocket_overload_1">gxsSocket_t gxSocket::InitSocket(gxsAddressFamily af, gxsSocket_t st, gxsProtocolFamily pf, int port, char *hostname = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to create and initialize a socket according to the address family, socket type, and protocol family. The "hostname" variable is an optional parameter that allows clients to specify a server name. Returns a valid socket descriptor or -1 if the socket cannot be initialized. <B>NOTE</B>: Under all UNIX platforms you must have root privileges to use raw sockets. Windows 95/98/ME/NT only works with the <B>IPPROTO_ICMP</B> protocol when using raw sockets and does not support the <B>IPPROTO_RAW</B> protocol.</P>
<B><FONT COLOR="#000080"><P><A NAME="InitSocketLibrary">int gxSocket::InitSocketLibrary()</A></B></FONT>&nbsp;-&nbsp;Public member function used to perform any platform specific initialization required before network communication can be established. Returns zero if no errors occur, -1 if an error occurs and the error can be mapped internally, or a value greater then zero if an error occurs and the error cannot be determined. </P>
<B><FONT COLOR="#000080"><P><A NAME="IsBound">int gxSocket::IsBound()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if the socket is currently bound.</P>
<B><FONT COLOR="#000080"><P><A NAME="IsConnected">int gxSocket::IsConnected()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if the socket is currently connected. </P>
<B><FONT COLOR="#000080"><P><A NAME="Listen">int gxSocket::Listen(int max_connections = SOMAXCONN)</A></B></FONT>&nbsp;-&nbsp;Public member function used to listen for connections if configured as a server. The "max_connections" variable determines how many pending connections the queue will hold. Returns -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RawRead">int gxSocket::RawRead(void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to receive a block of data from the bound socket. <B>NOTE</B>: A raw read may return before all the bytes have been read. Returns the total number of bytes read or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RawRead_overload_1">int gxSocket::RawRead(gxsSocket_t s, void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to receive a block of data from a specified socket. <B>NOTE</B>: A raw read may return before all the bytes have been read. Returns the total number of bytes read or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RawReadFrom">int gxSocket::RawReadFrom(gxsSocket_t s, gxsSocketAddress *sa, void *buf,int bytes, int flags = 0)</A></B></FONT>&nbsp;- Public member function used to receive a block of data from a remote datagram socket. <B>NOTE</B>: A raw read may return before all the bytes have been read. Returns the total number of bytes read or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RawReadFrom_overload_1">int gxSocket::RawReadFrom(void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to receive a block of data from a remote datagram socket. <B>NOTE</B>: A raw read may return before all the bytes have been read. Returns the total number of bytes read or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RawRemoteRead">int gxSocket::RawRemoteRead(void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to receive a block of data from a remote socket. <B>NOTE</B>: A raw read may return before all the bytes have been read. Returns the total number of bytes read or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RawRemoteWrite">int gxSocket::RawRemoteWrite(const void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block of data to a remote socket. <B>NOTE</B>: A raw write may return before all the bytes have been written. Returns the total of bytes written or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RawWrite">int gxSocket::RawWrite(const void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block of data to the bound socket. <B>NOTE</B>: A raw write may return before all the bytes have been written. Returns the total of bytes written or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RawWrite_overload_1">int gxSocket::RawWrite(gxsSocket_t s, const void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block of data to a specified socket. <B>NOTE</B>: A raw write may return before all the bytes have been written. Returns the total of bytes written or -1 if an error occurs. </P>
<B><FONT COLOR="#000080"><P><A NAME="RawWriteTo">int gxSocket::RawWriteTo(gxsSocket_t s, gxsSocketAddress *sa, void *buf,int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block of data to a datagram socket. <B>NOTE</B>: A raw write may return before all the bytes have been written. Returns the total of bytes written or -1 if an error occurs. </P>
<B><FONT COLOR="#000080"><P><A NAME="RawWriteTo_overload_1">int gxSocket::RawWriteTo(void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block of data to a datagram socket. <B>NOTE</B>: A raw write may return before all the bytes have been written. Returns the total of bytes written or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadSelect">int gxSocket::ReadSelect(gxsSocket_t s, int seconds, int useconds)</A></B></FONT>&nbsp;-&nbsp;Public member function used to multiplex reads without polling. Returns false if a reply time is longer then the timeout values.</P>
<B><FONT COLOR="#000080"><P><A NAME="Recv">int gxSocket::Recv(void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to receive a block of data from the bound socket and do not return until all the bytes have been read. Returns the total number of bytes received or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="Recv_overload_1">int gxSocket::Recv(gxsSocket_t s, void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to receive a block of data from a specified socket and do not return until all the bytes have been read. Returns the total number of bytes received or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="Recv_overload_2">int gxSocket::Recv(void *buf, int bytes, int seconds, int useconds, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to receive a block of data from the bound socket and do not return until all the bytes have been read or the timeout value has been exceeded. Returns the total number of bytes received or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="Recv_overload_3">int gxSocket::Recv(gxsSocket_t s, void *buf, int bytes, int seconds, int useconds, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to receive a block of data from a specified socket and do not return until all the bytes have been read or the timeout value has been exceeded. Returns the total number of bytes received or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RecvFrom">int gxSocket::RecvFrom(gxsSocket_t s, gxsSocketAddress *sa, void *buf, int bytes, int seconds, int useconds, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to Receive a block of data from a remote datagram socket and do not return until all the bytes have been read or the timeout value has been exceeded. Returns the total number of bytes received or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RecvFrom_overload_1">int gxSocket::RecvFrom(gxsSocket_t s, gxsSocketAddress *sa, void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function receive a block of data from a remote datagram socket and do not return until all the bytes have been read. Returns the total number of bytes received or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RecvFrom_overload_2">int gxSocket::RecvFrom(void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function receive a block of data from a remote datagram socket and do not return until all the bytes have been read. Returns the total number of bytes received or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RecvFrom_overload_3">int gxSocket::RecvFrom(void *buf, int bytes, int seconds, int useconds, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to receive a block of data from a remote datagram socket and do not return until all the bytes have been read or the timeout value has been exceeded. Returns the total number of bytes received or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReleaseRemoteSocket">void gxSocket::ReleaseRemoteSocket()</A></B></FONT>&nbsp;-&nbsp;Public member function used to release this object's remote socket without closing the socket or performing any other operation. <B>NOTE</B>: This function is used to reset the remote socket when more then one object is referencing the socket and the socket has been closed. You can also use a release call to signal that this object is finished with the socket and can be deleted without affecting other objects currently using this socket.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReleaseSocket">void gxSocket::ReleaseSocket()</A></B></FONT>&nbsp;-&nbsp;Public member function used to release this object's socket without closing the socket or performing any other operation. <B>NOTE</B>: This function is used to reset the this object's socket when more then one object is referencing the socket and the socket has been closed. You can also use a release call to signal that this object is finished with the socket and can be deleted without affecting other objects currently using this socket.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReleaseSocketLibrary">int gxSocket::ReleaseSocketLibrary()</A></B></FONT>&nbsp;-&nbsp;Public member function used to perform any platform specific operations required to release the socket library and free any resources associated with it. Returns -1 if any errors occur. </P>
<B><FONT COLOR="#000080"><P><A NAME="RemoteRecv">int gxSocket::RemoteRecv(void *buf, int bytes, int seconds, int useconds, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to receive a block of data from a remote socket in blocking mode with a specified timeout value. Returns the total number of bytes received or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RemoteRecv_overload_1">int gxSocket::RemoteRecv(void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to receive a block of data from a remote socket in blocking mode. Returns the total number of bytes received or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RemoteSend">int gxSocket::RemoteSend(const void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block of data to a remote socket in blocking mode. Returns the total number of bytes received or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="ResetError">gxSocketError gxSocket::ResetError()</A></B></FONT>&nbsp;-&nbsp;Public member function used to clear the last reported socket error.</P>
<B><FONT COLOR="#000080"><P><A NAME="ResetRead">void gxSocket::ResetRead()</A></B></FONT>&nbsp;-&nbsp;Public member function used to reset the received byte count.</P>
<B><FONT COLOR="#000080"><P><A NAME="ResetSocketError">gxSocketError gxSocket::ResetSocketError()</A></B></FONT>&nbsp;-&nbsp;Public member function used to clear the last reported socket error.</P>
<B><FONT COLOR="#000080"><P><A NAME="ResetWrite">void gxSocket::ResetWrite()</A></B></FONT>&nbsp;-&nbsp;Public member function used to reset the transmit byte count.</P>
<B><FONT COLOR="#000080"><P><A NAME="Send">int gxSocket::Send(const void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block of data to the bound socket and do not return until all the bytes have been written. Returns the total number of bytes sent or -1 if an error occurs. </P>
<B><FONT COLOR="#000080"><P><A NAME="Send_overload_1">int gxSocket::Send(gxsSocket_t s, const void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block of data to a specified socket and do not return until all the bytes have been written. Returns the total number of bytes sent or -1 if an error occurs. </P>
<B><FONT COLOR="#000080"><P><A NAME="SendTo">int gxSocket::SendTo(gxsSocket_t s, gxsSocketAddress *sa, void *buf,int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block of data to a datagram socket and do not return until all the bytes have been written. Returns the total number of bytes sent or -1 if an error occurs. </P>
<B><FONT COLOR="#000080"><P><A NAME="SendTo_overload_1">int gxSocket::SendTo(void *buf, int bytes, int flags = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block of data to a datagram socket and do not return until all the bytes have been written. Returns the total number of bytes sent or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetAddressFamily">void gxSocket::SetAddressFamily(gxsAddressFamily af)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the address family. Defaults to <B>AF_INET </B>when a new gxSocket object is constructed.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetBytesMoved">int gxSocket::SetBytesMoved(int bytes = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to reset the transmit byte count.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetBytesRead">int gxSocket::SetBytesRead(int bytes = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the received byte count.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetPortNumber">void gxSocket::SetPortNumber(gxsPort_t p)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the port number. </P>
<B><FONT COLOR="#000080"><P><A NAME="SetProtocolFamily">void gxSocket::SetProtocolFamily(gxsProtocolFamily pf)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the protocol family. Defaults to <B>IPPROTO_TCP </B>when a new gxSocket object is constructed.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetRemoteSocket">gxsSocket_t gxSocket::SetRemoteSocket(gxsSocket_t s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set this object's remote socket.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetSockOpt">int gxSocket::SetSockOpt(gxsSocket_t s, int level, int optName, const void *optVal, unsigned optLen)</A></B></FONT>&nbsp;- Public member function used to set the socket option for the specified option level or name. Returns -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetSockOpt_overload_1">int gxSocket::SetSockOpt(int level, int optName, const void *optVal, unsigned optLen)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set this object's socket option for the specified option level or name. Returns -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetSocket">gxsSocket_t gxSocket::SetSocket(gxsSocket_t s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set this object's socket.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetSocketError">gxSocketError gxSocket::SetSocketError(gxSocketError err)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the socket error code. The "err" variable must correspond to one to the integer constants defined in the <A HREF="#ErrorCodes">error code</A> enumeration.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetSocketType">void gxSocket::SetSocketType(gxsSocket_t st)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the socket type. Defaults to <B>SOCK_STREAM </B>when a new gxSocket object is constructed.</P>
<B><FONT COLOR="#000080"><P><A NAME="ShutDown">void gxSocket::ShutDown(int how = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to close and un-initialize a full-duplex socket. The "how" variable must equal one of the following values: 0 = user is no longer interested in reading data, 1 = no more data will be sent, or 2 = no data is to be sent or received.</P>
<B><FONT COLOR="#000080"><P><A NAME="ShutDown_overload_1">void gxSocket::ShutDown(gxsSocket_t &amp;s, int how = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to close and un-initialize the specified full-duplex socket. The "how" variable must equal one of the following values: 0 = user is no longer interested in reading data, 1 = no more data will be sent, or 2 = no data is to be sent or received.</P>
<B><FONT COLOR="#000080"><P><A NAME="ShutDownRemoteSocket">void gxSocket::ShutDownRemoteSocket(int how = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to close a full-duplex client side socket. The "how" variable must equal one of the following values: 0 = user is no longer interested in reading data, 1 = no more data will be sent, or 2 = no data is to be sent or received.</P>
<B><FONT COLOR="#000080"><P><A NAME="ShutDownSocket">void gxSocket::ShutDownSocket(int how = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to close a full-duplex server side socket. The "how" variable must equal one of the following values: 0 = user is no longer interested in reading data, 1 = no more data will be sent, or 2 = no data is to be sent or received.</P>
<B><FONT COLOR="#000080"><P><A NAME="Socket">gxsSocket_t gxSocket::Socket()</A></B></FONT>&nbsp;-&nbsp;Public member function used to create a socket. Returns a valid socket descriptor or -1 if the socket cannot be initialized.</P>
<B><FONT COLOR="#000080"><P><A NAME="SocketExceptionMessage">const char *gxSocket::SocketExceptionMessage()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a null-terminated string that can be use to log or print a socket exception. </P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
