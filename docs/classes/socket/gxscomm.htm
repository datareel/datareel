<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:48:02 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxscomm class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Serial Communications Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><A HREF="#Overview">Overview</A><BR>
<A HREF="#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="#Enumerations">Enumerations</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The gxSerialComm class is a base class used to open a serial port for bi-directional communication. It includes several low-level functions needed by derived classes to initialize a serial port, transmit, and receive data.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="ConditionalDirectives">Conditional Directives</A></P>
</FONT><P>__UNIX__</B> - Conditional directive required for all UNIX variants.</P>
<B><P>__WIN32__</B> - Conditional directive required for all WIN32 platforms</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="Enumerations">Enumerations</A></P>
</B></FONT><PRE><A NAME="ErrorCodes">enum {
</A>  // Internal error codes used to report the serial port last error
  gxSerialComm::<B>scomm_NO_ERROR</B>  = 0,      // No errors reported
  gxSerialComm::<B>scomm_INVALID_ERROR_CODE</B>, // Invalid error code

  gxSerialComm::<B>scomm_BAUDRATE_ERROR</B>,    // Invalid baud rate
  gxSerialComm::<B>scomm_CS_ERROR</B>,          // Invalid character size
  gxSerialComm::<B>scomm_FLOWCONTROL_ERROR</B>, // Invalid flow control
  gxSerialComm::<B>scomm_INIT_ERROR</B>,        // Initialization error
  gxSerialComm::<B>scomm_INVALIDPARM</B>,       // Invalid parameter
  gxSerialComm::<B>scomm_OPEN_ERROR</B>,        // Cannot open serial device
  gxSerialComm::<B>scomm_PARITY_ERROR</B>,      // Invalid parity
  gxSerialComm::<B>scomm_RECEIVE_ERROR</B>,     // Serial device receive error
  gxSerialComm::<B>scomm_STOPBIT_ERROR</B>,     // Invalid stop bit
  gxSerialComm::<B>scomm_TRANSMIT_ERROR</B>,    // Transmit error

  // Exception codes added to handle variable block errors
  gxSerialComm::<B>scomm_BLOCKACK_ERROR</B>,    // Acknowledgment error
  gxSerialComm::<B>scomm_BLOCKHEADER_ERROR</B>, // Bad variable block header
  gxSerialComm::<B>scomm_BLOCKSIZE_ERROR</B>,   // Bad variable block size
  gxSerialComm::<B>scomm_BLOCKSYNC_ERROR</B>    // Synchronization error
 };
  
<A NAME="DeviceConstants">enum {
</A>  // Flow control constants
  gxSerialComm::<B>scommHARD_FLOW</B>,
  gxSerialComm::<B>scommSOFT_FLOW</B>,
  gxSerialComm::<B>scommXON_XOFF</B>,
  gxSerialComm::<B>scommNO_FLOW_CONTROL</B>,

  // Device access constants
  gxSerialComm::<B>scommREAD_ONLY</B>,
  gxSerialComm::<B>scommWRITE_ONLY</B>,
  gxSerialComm::<B>scommREAD_WRITE
</B> };</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxSerialComm">gxSerialComm::gxSerialComm()</A><BR>
<A HREF="#Destructor">gxSerialComm::~gxSerialComm()</A><BR>
<A HREF="#BinaryMode">gxSerialComm::BinaryMode()</A><BR>
<A HREF="#BytesMoved">gxSerialComm::BytesMoved()</A><BR>
<A HREF="#BytesRead">gxSerialComm::BytesRead()</A><BR>
<A HREF="#CharacterMode">gxSerialComm::CharacterMode()</A><BR>
<A HREF="#Close">gxSerialComm::Close()</A><BR>
<A HREF="#DeviceHandle">gxSerialComm::DeviceHandle()</A><BR>
<A HREF="#GetSerialCommError">gxSerialComm::GetSerialCommError()</A><BR>
<A HREF="#InitSerialPort">gxSerialComm::InitSerialPort()</A><BR>
<A HREF="#OpenSerialPort">gxSerialComm::OpenSerialPort()</A><BR>
<A HREF="#RawRead">gxSerialComm::RawRead()</A><BR>
<A HREF="#RawWrite">gxSerialComm::RawWrite()</A><BR>
<A HREF="#Recv">gxSerialComm::Recv()</A><BR>
<A HREF="#ResetError">gxSerialComm::ResetError()</A><BR>
<A HREF="#ResetSerialCommError">gxSerialComm::ResetSerialCommError()</A><BR>
<A HREF="#Send">gxSerialComm::Send()</A><BR>
<A HREF="#SerialCommExceptionMessage">gxSerialComm::SerialCommExceptionMessage()</A><BR>
<A HREF="#SetBaudRate">gxSerialComm::SetBaudRate()</A><BR>
<A HREF="#SetCharacterSize">gxSerialComm::SetCharacterSize()</A><BR>
<A HREF="#SetFlowControl">gxSerialComm::SetFlowControl()</A><BR>
<A HREF="#SetParity">gxSerialComm::SetParity()</A><BR>
<A HREF="#SetSerialCommError">gxSerialComm::SetSerialCommError()</A><BR>
<A HREF="#SetStopBits">gxSerialComm::SetStopBits()</A><BR>
<A HREF="#Send">gxSerialComm::Send() </A></P>
<B><FONT COLOR="#000080"><P><A NAME="gxSerialComm">gxSerialComm::gxSerialComm()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="Destructor"><A NAME="BM_gxSerialComm">virtual gxSerialComm::~gxSerialComm()</A></A></B></FONT>&nbsp;-&nbsp;Class destructor used to automatically close an open serial device when a gxSerialComm object is deleted.</P>
<B><FONT COLOR="#000080"><P><A NAME="BinaryMode">void gxSerialComm::BinaryMode()</A></B></FONT>&nbsp;-&nbsp;Public member function used to toggle from character mode to binary mode. <B>NOTE</B>: This function has no effect under WIN32. The Win32 API does not support non-binary mode transfers.</P>
<B><FONT COLOR="#000080"><P><A NAME="BytesMoved">int gxSerialComm::BytesMoved()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the number of bytes moved following a write operation.</P>
<B><FONT COLOR="#000080"><P><A NAME="BytesRead">int gxSerialComm::BytesRead()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the number of bytes read following a read operation.</P>
<B><FONT COLOR="#000080"><P><A NAME="CharacterMode">void gxSerialComm::CharacterMode()</A></B></FONT>&nbsp;-&nbsp;Public member function used to toggle from binary mode to character mode. <B>NOTE</B>: This function has no effect under WIN32. The Win32 API does not support non-binary mode transfers.</P>
<B><FONT COLOR="#000080"><P><A NAME="Close">void gxSerialComm::Close()</A></B></FONT>&nbsp;-&nbsp;Public member function used to close a previously opened serial device.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeviceHandle">scommDeviceHandle gxSerialComm::DeviceHandle()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the device handle for the currently opened serial device.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetSerialCommError">int gxSerialComm::GetSerialCommError()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the last reported serial port error. The return value will correspond to one of the integer constants defined in the <A HREF="#ErrorCodes">error code</A> enumeration.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetSerialCommError_overload_1">int gxSerialComm::GetSerialCommError()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the last reported serial port error. The return value will correspond to one of the integer constants defined in the <A HREF="#ErrorCodes">error code</A> enumeration. </P>
<B><FONT COLOR="#000080"><P><A NAME="InitSerialPort">int gxSerialComm::InitSerialPort()</A></B></FONT>&nbsp;-&nbsp;Public member function used to initialize a serial device. Returns zero to indicate success or -1 to indicate a serial port error.</P>
<B><FONT COLOR="#000080"><P><A NAME="InitSerialPort_overload_1">int gxSerialComm::InitSerialPort(char *device_name, int sp = 9600, char pr = 'N', int cs = 8, int sb = 1, int flow = gxSerialComm::scommNO_FLOW_CONTROL,int bin_mode = 1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to initialize a serial device. Returns zero to indicate success or -1 to indicate a serial port error.</P>
<B><FONT COLOR="#000080"><P><A NAME="OpenSerialPort">int gxSerialComm::OpenSerialPort(char *device_name)</A></B></FONT>&nbsp;-&nbsp;Public member function to open a serial port for read/write operations depending on the device file permissions. This function will try to open the device for read/write, read, and then write access. Returns -1 if the device cannot be opened. This function will return a non-zero value corresponding to one of the integer constants defined in the <A HREF="#DeviceConstants">device access</A> enumeration if the serial device is opened successfully.</P>
<B><FONT COLOR="#000080"><P><A NAME="RawRead">int gxSerialComm::RawRead(void *buf, int bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used read a specified number of bytes from the serial port and return whether or not the read was completed. Returns the number of bytes received or -1 if an error occurred.</P>
<B><FONT COLOR="#000080"><P><A NAME="RawWrite">int gxSerialComm::RawWrite(const void *buf, int bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a specified number of bytes to a serial port and return whether or not the write was complete. Returns the total number of bytes moved or -1 if an error occurred.</P>
<B><FONT COLOR="#000080"><P><A NAME="Recv">int gxSerialComm::Recv(void *buf, int bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to receive a specified number of bytes from a serial port and does not return until all the byte have been read. Returns the total number of bytes read or -1 if an error occurred.</P>
<B><FONT COLOR="#000080"><P><A NAME="ResetError">void gxSerialComm::ResetError()</A></B></FONT>&nbsp;-&nbsp;Public member function used to clear the last reported serial device error.</P>
<B><FONT COLOR="#000080"><P><A NAME="ResetSerialCommError">void gxSerialComm::ResetSerialCommError()</A></B></FONT>&nbsp;-&nbsp;Public member function used to clear the last reported serial device error.</P>
<B><FONT COLOR="#000080"><P>int gxSerialComm::Send(const void *buf, int bytes)</B></FONT>&nbsp;-&nbsp;Public member function used to write a specified number of bytes to a serial port and does not return until all the bytes have been written. Returns the total number of bytes written or -1 if an error occurred.</P>
<B><FONT COLOR="#000080"><P><A NAME="SerialCommExceptionMessage">const char *gxSerialComm::SerialCommExceptionMessage()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a null-terminated string that can be use to log or print a serial port exception.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetBaudRate">void gxSerialComm::SetBaudRate(int br)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the baud rate prior to initialization.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetCharacterSize">void gxSerialComm::SetCharacterSize(int cs)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the character size prior to initialization.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetFlowControl">void gxSerialComm::SetFlowControl(int f)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the flow control prior to initialization. The "f" variable must equal one of the integer constants defined in the <A HREF="#DeviceConstants">flow control</A> enumeration. </P>
<B><FONT COLOR="#000080"><P><A NAME="SetParity">void gxSerialComm::SetParity(char p)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the parity prior to initialization.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetSerialCommError">void gxSerialComm::SetSerialCommError(int err)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the serial device error code. The "err" variable must equal one of the integer constants defined in the <A HREF="#ErrorCodes">error code</A> enumeration.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetStopBits">void gxSerialComm::SetStopBits(int sb)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the stop bits prior to initialization.</P>
<B><FONT COLOR="#000080"><P>int <A NAME="Send">gxSerialComm::Send</A>(const void *buf, int bytes)</B></FONT> - Public member function used to write a specified number of bytes to a serial port and does not return until all the bytes have been written. Returns the total number of bytes written or -1 if an error occurred. </P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
