<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:49:13 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxshttpc class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">HTTP Client Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#Constants">Constants</A><BR>
<A HREF="#TypeDefinitions">Type Definitions</A><BR>
<A HREF="#DataMembers">Data Members</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The HTTP client class is used to retrieve Web pages from an HTTP server.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="Constants">Constants</A></P>
</B></FONT><PRE>const int <B>__HTTP_DEFAULT_CACHE_SIZE__</B>  = 1024;  // Default cache size  
const int <B>__HTTP_DEFAULT_PACKET_SIZE__</B> = 1024;  // Max block length

// Adjust these values for maximum performance
const int <B>__HTTP_CACHE_SIZE__</B>  = 1024;  // Number of cache buckets used
const int <B>__HTTP_PACKET_SIZE__</B> = 32767; // Maximum packet size </PRE>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="TypeDefinitions">Type Definitions</A></P>
</B></FONT><PRE>typedef MemoryBuffer <B>MEMTYPE</B>; // Resizable memory buffers
typedef gxDeviceCachePtr <B>httpCachePointer</B>; // Pointer to the device cache</PRE>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="DataMembers">Public Data Members</A></P>
</B></FONT><P>Client header strings that can or must be modified according to the application. These values will be used when a request string is built.</P>
<B><FONT COLOR="#000080"><P>gxString gxsHTTPClient::HTTP_VERSION_STRING </B></FONT>- HTTP requested version string. "Defaults to: HTTP/1.0\r\n"</P>
<B><FONT COLOR="#000080"><P>gxString gxsHTTPClient::HTTP_AGENT_STRING</B></FONT> - Application name string. Defaults to: "User-Agent: gxsHTTPLibrary/4000.101\r\n"</P>
<B><FONT COLOR="#000080"><P>gxString gxsHTTPClient::HTTP_ACCEPT_STRING</B></FONT> - File types that will be accepted. Defaults to: "Accept: */*\r\n"</P>
<B><FONT COLOR="#000080"><P>gxString gxsHTTPClient::HTTP_PRAGMA_STRING</B></FONT> - Implementation-specific directives. Defaults to: "Pragma: no-cache\r\n" </P>
<B><FONT COLOR="#000080"><P>gxString gxsHTTPClient::HTTP_COOKIE_STRING</B></FONT> - Used to provide information left earlier by some server. Usage: "Cookie: persistent data\r\n" Defaults to: NULL</P>
<B><FONT COLOR="#000080"><P>gxString gxsHTTPClient::HTTP_DEFAULT_FILE_REQUEST_STRING</B></FONT> - Default file name used if no file is specified in the HTTP request string. Defaults to " /"</P>
<B><FONT COLOR="#000080"><P>gxString gxsHTTPClient::HTTP_REFERER_STRING -</B></FONT> The Referer request-header field allows the client to specify, for the server's benefit, the address (URI) of the resource from which the Request-URI was obtained. This value will be set to NULL by default. Usage example: "Referer: http://www.w3.org/hypertext/DataSources/Overview.html\r\n"</P>
<B><FONT COLOR="#000080"><P>gxString gxsHTTPClient::HTTP_IF_MOD_STRING</B></FONT> - Used with the GET method to make it conditional: if the requested resource has not been modified since the time specified in this field, a copy of the resource will not be returned from the server; instead, a 304 (not modified) response will be returned without any Entity-Body. This value will be set to NULL by default. The application must set this value in order to include it in the request string. Usage example: "If-Modified-Since: Sat, 29 Oct 1999 19:43:31 GMT\r\n"</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxsHTTPClient">gxsHTTPClient::gxsHTTPClient()</A><BR>
<A HREF="#BM_gxsHTTPClient">gxsHTTPClient::~gxsHTTPClient()</A><BR>
<A HREF="#BucketsInUse">gxsHTTPClient::BucketsInUse()</A><BR>
<A HREF="#BuildRequestString">gxsHTTPClient::BuildRequestString()</A><BR>
<A HREF="#BuildSimpleRequestString">gxsHTTPClient::BuildSimpleRequestString()</A><BR>
<A HREF="#ConnectClient">gxsHTTPClient::ConnectClient()</A><BR>
<A HREF="#Flush">gxsHTTPClient::Flush()</A><BR>
<A HREF="#GetCache">gxsHTTPClient::GetCache()</A><BR>
<A HREF="#GetMethod">gxsHTTPClient::GetMethod()</A><BR>
<A HREF="#GetProtocolString">gxsHTTPClient::GetProtocolString()</A><BR>
<A HREF="#ParseHTTPHeader">gxsHTTPClient::ParseHTTPHeader()</A> <BR>
<A HREF="#RequestFile">gxsHTTPClient::RequestFile()</A><BR>
<A HREF="#RequestHeader">gxsHTTPClient::RequestHeader()</A><BR>
<A HREF="#SimpleRequest">gxsHTTPClient::SimpleRequest()</A><A NAME="gxsHTTPClient"></P>
<B><FONT COLOR="#000080"><P>gxsHTTPClient::gxsHTTPClient(int CacheSize = __HTTP_DEFAULT_CACHE_SIZE__)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct a new HTTP client and set the device cache size.</P>
<B><FONT COLOR="#000080"><P><A NAME="BM_gxsHTTPClient">gxsHTTPClient::~gxsHTTPClient()</A></B></FONT>&nbsp;-&nbsp;Class destructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="BucketsInUse">unsigned gxsHTTPClient::BucketsInUse()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the total number of device cache buckets in used.</P>
<B><FONT COLOR="#000080"><P><A NAME="BuildRequestString">void gxsHTTPClient::BuildRequestString(const gxsURLInfo &amp;u, int method, gxString &amp;request)</A></B></FONT>&nbsp;-&nbsp;Public member function used to build a request string. </P>
<B><FONT COLOR="#000080"><P><A NAME="BuildSimpleRequestString">void gxsHTTPClient::BuildSimpleRequestString(const gxsURLInfo &amp;u, int method, gxString &amp;request)</A></B></FONT>&nbsp;-Public member function used to build a simple request string. When a simple request string is used the server will not send an HTTP header with the requested document. </P>
<B><FONT COLOR="#000080"><P><A NAME="ConnectClient">int gxsHTTPClient::ConnectClient(const char *host, int port = gxSOCKET_HTTP_PORT)</A></B></FONT>&nbsp;-&nbsp;Public member function used to connect a client to an HTTP server. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="Flush">void gxsHTTPClient::Flush()</A></B></FONT>&nbsp;-&nbsp;Public member function used to flush all the device cache buffers.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetCache">gxDeviceBucketCache *gxsHTTPClient::GetCache()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the bucket cache.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetMethod">char *gxsHTTPClient::GetMethod(int method)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a null terminated string corresponding to the specified method.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetProtocolString">char *gxsHTTPClient::GetProtocolString(int protocol)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a null terminated string corresponding to the specified protocol.</P>
<B><FONT COLOR="#000080"><P><A NAME="ParseHTTPHeader">int gxsHTTPClient::ParseHTTPHeader(const gxsURLInfo &amp;u, const gxString &amp;header, gxsHTTPHeader &amp;hdr)</A></B></FONT>&nbsp;-&nbsp;Public member function used to parse HTTP headers received from an HTTP server. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="RequestFile">int gxsHTTPClient::RequestFile(const gxsURLInfo &amp;u, const gxsHTTPHeader &amp;hdr, fstream *stream)</A></B></FONT>&nbsp;-Public member function used to request a file and write it to the specified stream. This function assumes that the document header has already been requested and placed in the "hdr" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="RequestFile_overload_1">int gxsHTTPClient::RequestFile(const gxsURLInfo &amp;u, const gxsHTTPHeader &amp;hdr, MemoryBuffer &amp;mbuf)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request a file and write it to a memory buffer. This function assumes that the document header has already been requested and placed in the "hdr" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="RequestHeader">int gxsHTTPClient::RequestHeader(const gxsURLInfo &amp;u, gxsHTTPHeader &amp;hdr)</A></B></FONT>&nbsp;-Public member function used to request a document header passing back the header information in the "hdr" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="SimpleRequest">int gxsHTTPClient::SimpleRequest(const gxsURLInfo &amp;u, fstream *stream)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request a document with no header information and write it to the specified stream. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="SimpleRequest_overload_1">int gxsHTTPClient::SimpleRequest(const gxsURLInfo &amp;u, MemoryBuffer &amp;mbuf)</A></B></FONT>&nbsp;- Public member function used to request a document with no header information and write it to the specified memory buffer. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
