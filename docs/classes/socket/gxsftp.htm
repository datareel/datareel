<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:47:57 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxsftp class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Embedded FTP Client</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#DataMemebers">Data Members</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The embedded FTP (File Transfer Protocol) client is a cross platform FTP implementation used with applications that require FTP client/server functions. The gxsFTPClient class is derived from the <A HREF="gxsocket.htm">gxSocket</A> class and conforms to RFC 959: <A HREF="http://www.faqs.org/rfcs/rfc959.html">http://www.faqs.org/rfcs/rfc959.html</A></P>
<P><HR></P>
<P><A NAME="DataMemebers"><!-- New Section --><B><FONT SIZE=4>Public Data Members</B></FONT> </A></P>
<B><FONT COLOR="#000080"><P>gxSocket gxsFTPClient::ftp_data</B></FONT> - Socket used to transfer data to this client.</P>
<B><FONT COLOR="#000080"><P>int gxsFTPClient::ftp_data_port</B></FONT> - FTP data port client is listening on.</P>
<B><FONT COLOR="#000080"><P>char gxsFTPClient::reply_buf[gxsBUF_SIZE]</B></FONT> - Buffer used to hold the last reply.</P>
<B><FONT COLOR="#000080"><P>char gxsFTPClient::command_buf[gxsBUF_SIZE]</B></FONT> - Buffer used to hold the last command.</P>
<B><FONT COLOR="#000080"><P>int gxsFTPClient::time_out_sec</B></FONT> - Number of seconds before a blocking timeout.</P>
<B><FONT COLOR="#000080"><P>int gxsFTPClient::time_out_usec</B></FONT> - Number of microseconds before a blocking timeout.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxsFTPClient">gxsFTPClient::gxsFTPClient()</A><BR>
<A HREF="#gxsFTPClientDestructor">gxsFTPClient::~gxsFTPClient()</A><BR>
<A HREF="#CloseDataPort">gxsFTPClient::CloseDataPort()</A><BR>
<A HREF="#ConnectClient">gxsFTPClient::ConnectClient()</A><BR>
<A HREF="#FTPChDir">gxsFTPClient::FTPChDir()</A><BR>
<A HREF="#FTPDelete">gxsFTPClient::FTPDelete()</A><BR>
<A HREF="#FTPGet">gxsFTPClient::FTPGet()</A><BR>
<A HREF="#FTPImageType">gxsFTPClient::FTPImageType()</A><BR>
<A HREF="#FTPList">gxsFTPClient::FTPList()</A><BR>
<A HREF="#FTPLogin">gxsFTPClient::FTPLogin()</A><BR>
<A HREF="#FTPLogout">gxsFTPClient::FTPLogout()</A><BR>
<A HREF="#FTPMkDir">gxsFTPClient::FTPMkDir()</A><BR>
<A HREF="#FTPMove">gxsFTPClient::FTPMove()</A><BR>
<A HREF="#FTPPWD">gxsFTPClient::FTPPWD()</A><BR>
<A HREF="#FTPPut">gxsFTPClient::FTPPut()</A><BR>
<A HREF="#FTPRmDir">gxsFTPClient::FTPRmDir()</A><BR>
<A HREF="#FTPSize">gxsFTPClient::FTPSize()</A><BR>
<A HREF="#FTPStat">gxsFTPClient::FTPStat()</A><BR>
<A HREF="#OpenDataPort">gxsFTPClient::OpenDataPort()</A><BR>
<A HREF="#ReadDataPort">gxsFTPClient::ReadDataPort()</A><BR>
<A HREF="#RecvResponse">gxsFTPClient::RecvResponse()</A><BR>
<A HREF="#SendCommand">gxsFTPClient::SendCommand()</A><BR>
<A HREF="#SetTimeOut">gxsFTPClient::SetTimeOut()</A><BR>
<A HREF="#WaitForReply">gxsFTPClient::WaitForReply()</A><BR>
<A HREF="#WriteDataPort">gxsFTPClient::WriteDataPort()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="gxsFTPClient">gxsFTPClient::gxsFTPClient()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxsFTPClientDestructor">gxsFTPClient::~gxsFTPClient()</A></B></FONT>&nbsp;-&nbsp; Class destructor.</P>
<B><FONT COLOR="#000080"><P><A NAME="CloseDataPort">void gxsFTPClient::CloseDataPort()</A></B></FONT>&nbsp;-&nbsp;Public member function used to close the FTP data port.</P>
<B><FONT COLOR="#000080"><P><A NAME="ConnectClient">gxSocketError gxsFTPClient::ConnectClient(const char *host, int port = gxSOCKET_FTP_PORT)</A></B></FONT>&nbsp;-&nbsp;Public member function used to connect a FTP client to a server. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="FTPChDir">gxSocketError gxsFTPClient::FTPChDir(const char *dname)</A></B></FONT>&nbsp;-&nbsp;Public member function used to change the current directory to the specified directory. Returns zero if no errors occur. </P>
<B><FONT COLOR="#000080"><P><A NAME="FTPDelete">gxSocketError gxsFTPClient::FTPDelete(const char *fname)</A></B></FONT>&nbsp;-&nbsp;Public member function used to delete the specified file. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="FTPGet">gxSocketError gxsFTPClient::FTPGet(const char *fname, fstream &amp;stream, unsigned &amp;bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to download a file and write it to the specified file stream. Passes back the total number of bytes downloaded in the "bytes" variable. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="FTPImageType">gxSocketError gxsFTPClient::FTPImageType(char type = 'I')</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the FTP image type to 'A' for ASCII transfers or 'I' for binary transfers. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="FTPList">gxSocketError gxsFTPClient::FTPList(char *sbuf, unsigned bytes, int full = 1, const char *args = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to list the contents of the current working directory. The calling function must allocate a memory buffer for the directory listing and pass the buffer and buffer length to this function. If the directory listing exceeds the number of bytes allocated this function will return a buffer overflow. If the "full" variable is true this function will request a full directory listing. The "args" variable is used to add additional arguments to the list command sent to the FTP server. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="FTPLogin">gxSocketError gxsFTPClient::FTPLogin(const char *username, const char *password)</A></B></FONT>&nbsp;-&nbsp;Public member function used to logon to an FTP server. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="FTPLogout">gxSocketError gxsFTPClient::FTPLogout()</A></B></FONT>&nbsp;-&nbsp;Public member function used to logoff an FTP server. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="FTPMkDir">gxSocketError gxsFTPClient::FTPMkDir(const char *dname)</A></B></FONT>&nbsp;-&nbsp;Public member function used to make the specified directory. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="FTPMove">gxSocketError gxsFTPClient::FTPMove(const char *from, const char *to)</A></B></FONT>&nbsp;-&nbsp;Public member function used to rename an existing file. Returns zero if no errors occur. </P>
<B><FONT COLOR="#000080"><P><A NAME="FTPPWD">gxSocketError gxsFTPClient::FTPPWD()</A></B></FONT>&nbsp;-&nbsp;Public member function used to get the present working directory. The results are stored in the "gxsFTPClient::reply_buf" string buffer. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="FTPPut">gxSocketError gxsFTPClient::FTPPut(const char *fname, fstream &amp;stream, unsigned &amp;bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to upload a file from the specified stream to the FTP server. Passes back the total number of bytes uploaded in the "bytes" variable. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="FTPRmDir">gxSocketError gxsFTPClient::FTPRmDir(const char *dname)</A></B></FONT>&nbsp;-&nbsp;Public member function used to remove the specified directory. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="FTPSize">gxSocketError gxsFTPClient::FTPSize(const char *fname)</A></B></FONT>&nbsp;-&nbsp;Public member function used to obtain the size of the specified file. The results are stored in the "gxsFTPClient::reply_buf" string buffer. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="FTPStat">gxSocketError gxsFTPClient::FTPStat()</A></B></FONT>&nbsp;-&nbsp;Public member function used to obtain the current FTP status. The results are stored in the "gxsFTPClient::reply_buf" string buffer. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="OpenDataPort">gxSocketError gxsFTPClient::OpenDataPort()</A></B></FONT>&nbsp;-&nbsp;Public member function used to open the client's FTP data port for file transfers. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadDataPort">int gxsFTPClient::ReadDataPort(void *buf, unsigned bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a specified number of bytes from the open data port using a non-blocking read. Returns the total number of bytes received or -1 if any errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="RecvResponse">int gxsFTPClient::RecvResponse(char *buf, int bytes, const char *response)</A></B></FONT>&nbsp;-&nbsp;Public blocking receive function used to read a reply from an FTP server following a command. If the specified response is not received within the timeout period this function will return false to indicate an error. Returns true if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="RecvResponse_overload_1">int gxsFTPClient::RecvResponse(gxsSocket_t s, char *buf, int bytes, const char *response)</A></B></FONT>&nbsp;-&nbsp;Public blocking receive function used to read a reply from an FTP server following a command. If the specified response is not received within the timeout period this function will return false to indicate an error. Returns true if successful. </P>
<B><FONT COLOR="#000080"><P><A NAME="SendCommand">gxSocketError gxsFTPClient::SendCommand(const char *command, const char *response, const char *args = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a command to an FTP server and read the server's response. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetTimeOut">void gxsFTPClient::SetTimeOut(int seconds, int useconds)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the FTP timeout values.</P>
<B><FONT COLOR="#000080"><P><A NAME="WaitForReply">int gxsFTPClient::WaitForReply(gxsSocket_t s)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns false if a reply time is longer then the timeout values.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteDataPort">int gxsFTPClient::WriteDataPort(void *buf, unsigned bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a specified number of bytes to data port using a block write. Returns the total number of bytes transmitted or -1 if any errors occur.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
