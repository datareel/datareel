<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:49:23 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>scomserv class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Database Serial Comm Server</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The gxSerialCommServer class is derived from the <A HREF="gxscomm.htm">gxSerialComm</A> class and is used to establish a client or server connection that can transmit and receive database blocks over a serial port.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxSerialCommServer">gxSerialCommServer::gxSerialCommServer()</A><BR>
<A HREF="#BM_gxSerialCommServer">gxSerialCommServer::~gxSerialCommServer()</A><BR>
<A HREF="#AddBlock">gxSerialCommServer::AddBlock()</A><BR>
<A HREF="#ChangeBlock">gxSerialCommServer::ChangeBlock()</A><BR>
<A HREF="#CloseConnection">gxSerialCommServer::CloseConnection()</A><BR>
<A HREF="#DeleteBlock">gxSerialCommServer::DeleteBlock()</A><BR>
<A HREF="#InitCommServer">gxSerialCommServer::InitCommServer()</A><BR>
<A HREF="#ReadAckBlock">gxSerialCommServer::ReadAckBlock()</A><BR>
<A HREF="#ReadBlock">gxSerialCommServer::ReadBlock()</A><BR>
<A HREF="#ReadHeader">gxSerialCommServer::ReadHeader()</A><BR>
<A HREF="#RequestBlock">gxSerialCommServer::RequestBlock()</A><BR>
<A HREF="#SetBlockStatus">gxSerialCommServer::SetBlockStatus()</A><BR>
<A HREF="#TerminateConnection">gxSerialCommServer::TerminateConnection()</A><BR>
<A HREF="#WriteAckBlock">gxSerialCommServer::WriteAckBlock()</A><BR>
<A HREF="#WriteBlock">gxSerialCommServer::WriteBlock()</A><BR>
<A HREF="#WriteHeader">gxSerialCommServer::WriteHeader()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="gxSerialCommServer">gxSerialCommServer::gxSerialCommServer()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="BM_gxSerialCommServer">gxSerialCommServer::~gxSerialCommServer()</A></B></FONT>&nbsp;-&nbsp;Class destructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="AddBlock">int gxSerialCommServer::AddBlock(const void *block, gxBlockHeader &amp;block_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request that the block pointed to by the "block" variable be added by a local or remote device. The <A HREF="../database/gxheader.htm#BlockHeader">block header</A> must account for the total length of the data pointed to by the "block" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeBlock">int gxSerialCommServer::ChangeBlock(const void *request, const void *block,gxBlockHeader &amp;request_header, gxBlockHeader &amp;block_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request that the block pointed to by the "block" variable be changed by a local or remote device. The "request" variable points to the new information that will be inserted in place of the block pointed to by the "block" variable. The <A HREF="../database/gxheader.htm#BlockHeader">block header</A> must account for the total length of the data pointed to by the "block" variable and the "request_header" must account for the total length of the data pointed to by the "request" variable. Returns zero if no errors occur or a non-zero value to indicate a failure. </P>
<B><FONT COLOR="#000080"><P><A NAME="CloseConnection">int gxSerialCommServer::CloseConnection()</A></B></FONT>&nbsp;-&nbsp;Public member function that sends a block command used to close a persistent client or server connection. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteBlock">int gxSerialCommServer::DeleteBlock(const void *request, gxBlockHeader &amp;request_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request that the a block pointed to by the "request" variable be deleted. The "request_header" must account for the total length of the data pointed to by the "request" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="InitCommServer">int gxSerialCommServer::InitCommServer(char *dev, int sp = 9600, char pr = 'N', int cs = 8, int sb = 1,int flow = gxSerialComm::scommNO_FLOW_CONTROL)</A></B></FONT>&nbsp;-&nbsp;Public member function used to initialize a serial device. Returns zero to indicate success or a non-zero value to indicate a serial port error. </P>
<B><FONT COLOR="#000080"><P><A NAME="ReadAckBlock">int gxSerialCommServer::ReadAckBlock()</A></B></FONT>&nbsp;-&nbsp;Public member function used to read an acknowledgment block. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadBlock">int gxSerialCommServer::ReadBlock(void *buf, gxBlockHeader &amp;gx)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a block. Returns zero if no errors occur or a non-zero value to indicate a failure. </P>
<B><FONT COLOR="#000080"><P><A NAME="ReadHeader">int gxSerialCommServer::ReadHeader(gxBlockHeader &amp;gx)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a header. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="RequestBlock">void *gxSerialCommServer::RequestBlock(const void *request, gxBlockHeader &amp;request_header, gxBlockHeader &amp;requested_block_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request a block from the remote end. The "request" variable points to the request information. The "request_header" must account for the total length of the data pointed to by the "request" variable. Returns the requested block or a null value if an error occurs. The block returned by this function must be typecast to the correct type by the calling function.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetBlockStatus">void gxSerialCommServer::SetBlockStatus(gxBlockHeader &amp;gx, __SBYTE__ dev_status,__SBYTE__ file_status = gxRemoteDeviceBlock)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the variable <A HREF="../database/gxheader.htm#BlockHeader">block header</A> status member control byte. <B>NOTE</B>: The block's next deleted variable must be set, if needed, after a call to this function. The block length will not be set here.</P>
<B><FONT COLOR="#000080"><P><A NAME="TerminateConnection">int gxSerialCommServer::TerminateConnection()</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block command that will shutdown a server or client. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteAckBlock">int gxSerialCommServer::WriteAckBlock()</A></B></FONT>&nbsp;-&nbsp;Public member function used to write an acknowledgment block. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteBlock">int gxSerialCommServer::WriteBlock(const void *buf, int bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a block of raw data to the socket. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteBlock_overload_1">int gxSerialCommServer::WriteBlock(const void *buf, gxBlockHeader &amp;gx)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a block. The <A HREF="../database/gxheader.htm#BlockHeader">block header</A> must account for the total length of the data pointed to by the "buf" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteHeader">int gxSerialCommServer::WriteHeader(gxBlockHeader &amp;gx)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a header. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
