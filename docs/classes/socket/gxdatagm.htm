<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:48:24 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxdatagm class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Database Datagram Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The gxDatagram class is derived from the <A HREF="gxsocket.htm">gxSocket</A> class and is used to send and receive database blocks over a UDP connection.</P>
<P><A HREF="gxstream.htm#Description">Detailed Description</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxDatagram">gxDatagram::gxDatagram()</A><BR>
<A HREF="#AddBlock">gxDatagram::AddBlock()</A><BR>
<A HREF="#ChangeBlock">gxDatagram::ChangeBlock()</A><BR>
<A HREF="#CloseConnection">gxDatagram::CloseConnection()</A><BR>
<A HREF="#DatagramClient">gxDatagram::DatagramClient()</A><BR>
<A HREF="#DatagramServer">gxDatagram::DatagramServer()</A><BR>
<A HREF="#DeleteBlock">gxDatagram::DeleteBlock()</A><BR>
<A HREF="#HostName">gxDatagram::HostName()</A><BR>
<A HREF="#PortNumber">gxDatagram::PortNumber()</A><BR>
<A HREF="#ReadAckBlock">gxDatagram::ReadAckBlock()</A><BR>
<A HREF="#ReadClientHeader">gxDatagram::ReadClientHeader()</A><BR>
<A HREF="#ReadRemoteAckBlock">gxDatagram::ReadRemoteAckBlock()</A><BR>
<A HREF="#ReadRemoteBlock">gxDatagram::ReadRemoteBlock()</A><BR>
<A HREF="#RemoteHostName">gxDatagram::RemoteHostName()</A><BR>
<A HREF="#RemotePortNumber">gxDatagram::RemotePortNumber()</A><BR>
<A HREF="#RequestBlock">gxDatagram::RequestBlock()</A><BR>
<A HREF="#SetBlockStatus">gxDatagram::SetBlockStatus()</A><BR>
<A HREF="#TerminateConnection">gxDatagram::TerminateConnection()</A><BR>
<A HREF="#WriteAckBlock">gxDatagram::WriteAckBlock()</A><BR>
<A HREF="#WriteBlock">gxDatagram::WriteBlock()</A><BR>
<A HREF="#WriteRemoteAckBlock">gxDatagram::WriteRemoteAckBlock()</A><BR>
<A HREF="#WriteRemoteBlock">gxDatagram::WriteRemoteBlock()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="gxDatagram">gxDatagram::gxDatagram()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="AddBlock">int gxDatagram::AddBlock(const void *block, gxBlockHeader &amp;block_header)</A></B></FONT>&nbsp;- Public member function used to request that the block pointed to by the "block" variable be added by a local or remote device. The <A HREF="../database/gxheader.htm#BlockHeader">block header</A> must account for the total length of the data pointed to by the "block" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeBlock">int gxDatagram::ChangeBlock(const void *request, const void *block, gxBlockHeader &amp;request_header, gxBlockHeader &amp;block_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request that the block pointed to by the "block" variable be changed by a local or remote device. The "request" variable points to the new information that will be inserted in place of the block pointed to by the "block" variable. The <A HREF="../database/gxheader.htm#BlockHeader">block header</A> must account for the total length of the data pointed to by the "block" variable and the "request_header" must account for the total length of the data pointed to by the "request" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="CloseConnection">int gxDatagram::CloseConnection()</A></B></FONT>&nbsp;-&nbsp;Public member function that sends a block command used to close a persistent client or server connection. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="DatagramClient">int gxDatagram::DatagramClient(int port, char *host)</A></B></FONT>&nbsp;-&nbsp;Public member function used to connect a datagram client to the specified host. Returns zero if no errors occur during initialization or a non-zero value to indicate a failure. </P>
<B><FONT COLOR="#000080"><P><A NAME="DatagramServer">int gxDatagram::DatagramServer(int port)</A></B></FONT>&nbsp;-&nbsp;Public member function used to initialize a datagram server. Returns zero if no errors occur during initialization or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteBlock">int gxDatagram::DeleteBlock(const void *request, gxBlockHeader &amp;request_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request that the a block pointed to by the "request" variable be deleted. The "request_header" must account for the total length of the data pointed to by the "request" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="HostName">int gxDatagram::HostName(char *hs)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the host name of this machine in the "hs" variable. <B>NOTE</B>: A memory buffer for the "hs" variable equal to <A HREF="gxsocket.htm#Constants">gxsMAX_NAME_LEN</A> must be pre-allocated prior to using this function. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="PortNumber">int gxDatagram::PortNumber(int &amp;port)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the port number actually set by the system in the "port" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadAckBlock">int gxDatagram::ReadAckBlock()</A></B></FONT>&nbsp;-&nbsp;Public member function used to read an acknowledgment block. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadClientHeader">int gxDatagram::ReadClientHeader(gxBlockHeader &amp;gxs)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a client header. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadRemoteAckBlock">int gxDatagram::ReadRemoteAckBlock()</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a client acknowledgment block. <A NAME="ReadRemoteBlock">Returns zero if no errors occur or a non-zero value to indicate a failure. </P>
<B><FONT COLOR="#000080"><P>int gxDatagram::ReadRemoteBlock(void *buf, gxBlockHeader &amp;gx)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a remote block. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="RemoteHostName">int gxDatagram::RemoteHostName(char *hs)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the host name of the client in the "hs" variable. <B>NOTE</B>: A memory buffer for the "hs" variable equal to <A HREF="gxsocket.htm#Constants">gxsMAX_NAME_LEN</A> must be pre-allocated prior to using this function. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="RemotePortNumber">int gxDatagram::RemotePortNumber(int &amp;port)</A></B></FONT>&nbsp;-&nbsp;Public member function that passes back the client's port number in the "port" variable. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="RequestBlock">void *gxDatagram::RequestBlock(const void *request, gxBlockHeader &amp;request_header, gxBlockHeader &amp;requested_block_header)</A></B></FONT>&nbsp;-&nbsp;Public member function used to request a block from the remote end. The "request" variable points to the request information. The "request_header" must account for the total length of the data pointed to by the "request" variable. Returns the requested block or a null value if an error occurs. The block returned by this function must be typecast to the correct type by the calling function.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetBlockStatus">void gxDatagram::SetBlockStatus(gxBlockHeader &amp;gx, __SBYTE__ net_status,__SBYTE__ file_status = gxRemoteDeviceBlock)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the variable <A HREF="../database/gxheader.htm#BlockHeader">block header</A> status member control byte. <B>NOTE</B>: The block's next deleted variable must be set, if needed, after a call to this function. The block length will not be set here.</P>
<B><FONT COLOR="#000080"><P><A NAME="TerminateConnection">int gxDatagram::TerminateConnection()</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a block command that will shutdown a server or client. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteAckBlock">int gxDatagram::WriteAckBlock()</A></B></FONT>&nbsp;-&nbsp;Public member function used to write an acknowledgment block. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteBlock">int gxDatagram::WriteBlock(const void *buf, int bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a block of raw data. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteRemoteAckBlock">int gxDatagram::WriteRemoteAckBlock()</A></B></FONT>&nbsp;-&nbsp;Public member function used to write an acknowledgment block to the remote end. <A NAME="WriteRemoteBlock">Returns zero if no errors occur or a non-zero value to indicate a failure. </P>
<B><FONT COLOR="#000080"><P>int gxDatagram::WriteRemoteBlock(void *buf, int bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a block of raw data to the remote end. Returns zero if no errors occur or a non-zero value to indicate a failure.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
