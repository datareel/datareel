<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:47:51 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxsocket class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">HTML Parser</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#Enumerations">Enumerations</A><BR>
<A HREF="#Structs">Data Structures</A><BR>
<A HREF="#Functions">Functions</A><BR>
<A HREF="#HTMLTagHandlers">HTML Tag Handlers</A> </P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The gxsHTML class is a base class used to parse html documents. The gxsHTML class works through multiple inheritance. It includes functions to load and parse HTML files. HTML tags are handled through the use of virtual tag handlers. Derived classes are responsible for processing HTML tags and any associated attributes by overriding the appropriate tag handler.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="Enumerations">Enumerations</A></P>
</B></FONT><PRE>// The following list of HTML tags is a combination of HTML
// 2.0, 3.0, 3.2 tags supported by Netscape's Navigator
// web browser, Microsoft's Internet Explorer web browser, 
// and standards defined by the World Wide Web Consortium.
// This list was taken from the Willcam's Comprehensive HTML 
// Cross Reference at: 
// <A HREF="http://www.willcam.com/cmat/html/crossref.html">http://www.willcam.com/cmat/html/crossref.html</A> 
<A NAME="TagIDEnumeration">enum { // HTML tags and modifiers ID enumeration</A>
  gxsHTML::<B>gxs_invalid_tag</B> = 0, // Invalid tag specified
  gxsHTML::<B>gxs_unknown_tag,</B>     // Unknown tag specified
  gxsHTML::<B>gxs_special_tag,</B>     // Unknown special tags starting with 
                                // an ampersand ending in a semicolon
                                // &amp;xxxx;

    // Tags and format specifiers with special meaning
  gxsHTML::<B>gxs_comment_tag,</B>     // comment
  gxsHTML::<B>gxs_less_then,</B>       // Less than sign "&amp;lt;" 
  gxsHTML::<B>gxs_greater_then,</B>    // Greater then sign "&amp;gt;"
  gxsHTML::<B>gxs_ampersand,</B>       // Ampersand "&amp;"
  gxsHTML::<B>gxs_nb_space,</B>        // Non-breaking space "&amp;nbsp;"
  gxsHTML::<B>gxs_quote,</B>           // Quotation mark "&amp;quot;"
  gxsHTML::<B>gxs_ex_acsii_set,</B>    // Extended ASCII character set

    // HTML tag codes
  gxsHTML::<B>gxs_a_tag,</B>           // anchor
  gxsHTML::<B>gxs_abbrev_tag,</B>      // abbreviation
  gxsHTML::<B>gxs_acronym_tag,</B>     // acronym
  gxsHTML::<B>gxs_address_tag,</B>     // address
  gxsHTML::<B>gxs_applet_tag,</B>      // java applet
  gxsHTML::<B>gxs_area_tag,</B>        // area
  gxsHTML::<B>gxs_au_tag,</B>          // author
  gxsHTML::<B>gxs_author_tag,</B>      // author
  gxsHTML::<B>gxs_b_tag,</B>           // bold
  gxsHTML::<B>gxs_banner_tag,</B>      // banner
  gxsHTML::<B>gxs_base_tag,</B>        // base
  gxsHTML::<B>gxs_basefont_tag,</B>    // base font
  gxsHTML::<B>gxs_bgsound_tag,</B>     // background sound
  gxsHTML::<B>gxs_big_tag,</B>         // big text
  gxsHTML::<B>gxs_blink_tag,</B>       // blink
  gxsHTML::<B>gxs_blockquote_tag,</B>  // block quote
  gxsHTML::<B>gxs_bq_tag,</B>          // block quote
  gxsHTML::<B>gxs_body_tag,</B>        // body
  gxsHTML::<B>gxs_br_tag,</B>          // line break
  gxsHTML::<B>gxs_caption_tag,</B>     // caption
  gxsHTML::<B>gxs_center_tag,</B>      // center
  gxsHTML::<B>gxs_cite_tag,</B>        // citation
  gxsHTML::<B>gxs_code_tag,</B>        // code
  gxsHTML::<B>gxs_col_tag,</B>         // table column
  gxsHTML::<B>gxs_colgroup_tag,</B>    // table column group
  gxsHTML::<B>gxs_credit_tag,</B>      // credit
  gxsHTML::<B>gxs_del_tag,</B>         // deleted text
  gxsHTML::<B>gxs_dfn_tag,</B>         // definition
  gxsHTML::<B>gxs_dir_tag,</B>         // directory list
  gxsHTML::<B>gxs_div_tag,</B>         // division
  gxsHTML::<B>gxs_dl_tag,</B>          // definition list
  gxsHTML::<B>gxs_dt_tag,</B>          // definition term
  gxsHTML::<B>gxs_dd_tag,</B>          // definition definition
  gxsHTML::<B>gxs_em_tag,</B>          // emphasized
  gxsHTML::<B>gxs_embed_tag,</B>       // embed
  gxsHTML::<B>gxs_fig_tag,</B>         // figure
  gxsHTML::<B>gxs_fn_tag,</B>          // footnote
  gxsHTML::<B>gxs_font_tag,</B>        // font
  gxsHTML::<B>gxs_form_tag,</B>        // form
  gxsHTML::<B>gxs_frame_tag,</B>       // frame
  gxsHTML::<B>gxs_frameset_tag,</B>    // frame set
  gxsHTML::<B>gxs_h1_tag,</B>          // heading 1
  gxsHTML::<B>gxs_h2_tag,</B>          // heading 2
  gxsHTML::<B>gxs_h3_tag,</B>          // heading 3
  gxsHTML::<B>gxs_h4_tag,</B>          // heading 4
  gxsHTML::<B>gxs_h5_tag,</B>          // heading 5
  gxsHTML::<B>gxs_h6_tag,</B>          // heading 6
  gxsHTML::<B>gxs_head_tag,</B>        // head
  gxsHTML::<B>gxs_hr_tag,</B>          // horizontal rule
  gxsHTML::<B>gxs_html_tag,</B>        // html
  gxsHTML::<B>gxs_i_tag,</B>           // italic
  gxsHTML::<B>gxs_iframe_tag,</B>      // frame - floating
  gxsHTML::<B>gxs_img_tag,</B>         // inline image
  gxsHTML::<B>gxs_input_tag,</B>       // form input
  gxsHTML::<B>gxs_ins_tag,</B>         // inserted text
  gxsHTML::<B>gxs_isindex_tag,</B>     // is index
  gxsHTML::<B>gxs_kbd_tag,</B>         // keyboard
  gxsHTML::<B>gxs_lang_tag,</B>        // language
  gxsHTML::<B>gxs_lh_tag,</B>          // list heading
  gxsHTML::<B>gxs_li_tag,</B>          // list item
  gxsHTML::<B>gxs_link_tag,</B>        // link
  gxsHTML::<B>gxs_listing_tag,</B>     // listing
  gxsHTML::<B>gxs_map_tag,</B>         // map
  gxsHTML::<B>gxs_marquee_tag,</B>     // marquee
  gxsHTML::<B>gxs_math_tag,</B>        // math
  gxsHTML::<B>gxs_menu_tag,</B>        // menu list
  gxsHTML::<B>gxs_meta_tag,</B>        // meta
  gxsHTML::<B>gxs_multicol_tag,</B>    // multi column text
  gxsHTML::<B>gxs_nobr_tag,</B>        // no break
  gxsHTML::<B>gxs_noframes_tag,</B>    // no frames
  gxsHTML::<B>gxs_note_tag,</B>        // note
  gxsHTML::<B>gxs_ol_tag,</B>          // ordered list
  gxsHTML::<B>gxs_overlay_tag,</B>     // overlay
  gxsHTML::<B>gxs_p_tag,</B>           // paragraph
  gxsHTML::<B>gxs_param_tag,</B>       // parameters
  gxsHTML::<B>gxs_person_tag,</B>      // person
  gxsHTML::<B>gxs_plaintext_tag,</B>   // plain text
  gxsHTML::<B>gxs_pre_tag,</B>         // preformatted text
  gxsHTML::<B>gxs_q_tag,</B>           // quote
  gxsHTML::<B>gxs_range_tag,</B>       // range
  gxsHTML::<B>gxs_samp_tag,</B>        // sample
  gxsHTML::<B>gxs_script_tag,</B>      // script
  gxsHTML::<B>gxs_select_tag,</B>      // form select
  gxsHTML::<B>gxs_small_tag,</B>       // small text
  gxsHTML::<B>gxs_spacer_tag,</B>      // white space
  gxsHTML::<B>gxs_spot_tag,</B>        // spot
  gxsHTML::<B>gxs_strike_tag,</B>      // strikethrough
  gxsHTML::<B>gxs_strong_tag,</B>      // strong
  gxsHTML::<B>gxs_sub_tag,</B>         // subscript
  gxsHTML::<B>gxs_sup_tag,</B>         // superscript
  gxsHTML::<B>gxs_tab_tag,</B>         // horizontal tab
  gxsHTML::<B>gxs_table_tag,</B>       // table
  gxsHTML::<B>gxs_tbody_tag,</B>       // table body
  gxsHTML::<B>gxs_td_tag,</B>          // table data
  gxsHTML::<B>gxs_textarea_tag,</B>    // form text area
  gxsHTML::<B>gxs_textflow_tag,</B>    // java applet textflow
  gxsHTML::<B>gxs_tfoot_tag,</B>       // table footer
  gxsHTML::<B>gxs_th_tag,</B>          // table header
  gxsHTML::<B>gxs_thead_tag,</B>       // table head
  gxsHTML::<B>gxs_title_tag,</B>       // title
  gxsHTML::<B>gxs_tr_tag,</B>          // table row
  gxsHTML::<B>gxs_tt_tag,</B>          // teletype
  gxsHTML::<B>gxs_u_tag,</B>           // underlined
  gxsHTML::<B>gxs_ul_tag,</B>          // unordered list
  gxsHTML::<B>gxs_var_tag,</B>         // variable
  gxsHTML::<B>gxs_wbr_tag,</B>         // word break
  gxsHTML::<B>gxs_xmp_tag </B>         // example
};</PRE>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="Structs">Data Structures</A></P>
</B></FONT><P>Data structure used to store the file position of an html tag, the tag itself, its attributes and instructions.</P>
<FONT COLOR="#008080"><PRE>struct gxsHTMLTagInfo
{
  // File information
  df_StreamPos start_tag; // This tag's starting position in the file
  df_StreamPos end_tag;   // This tag's ending position in the file
  unsigned tag_length;    // The complete length of this tag "&lt; ---- &gt;"
  
  // Tag information
  int tag_id;        // Numerical value used to identify supported tags
  gxString tag_info; // Complete tag from opening to closing bracket
  gxString tag;      // HTML tag
  gxString attr;     // HTML tag attributes 

  // Tag instructions
  int start_instruction; // True if start of tag instruction "&lt;"
  int end_instruction;   // True if end of a tag instruction "/x&gt;"
  int has_attributes;    // True if this tag has associated attributes
}; </PRE>
</FONT><P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></FONT> </P>
</B><P><A HREF="#gxsHTML">gxsHTML::gxsHTML()</A><BR>
<A HREF="#BM_gxsHTML">gxsHTML::~gxsHTML()</A><BR>
<A HREF="#ClearTagList">gxsHTML::ClearTagList()</A><BR>
<A HREF="#CloseFile">gxsHTML::CloseFile()</A><BR>
<A HREF="#CollectHTMLTags">gxsHTML::CollectHTMLTags()</A><BR>
<A HREF="#Copy">gxsHTML::Copy()</A><BR>
<A HREF="#GetTag">gxsHTML::GetTag()</A><BR>
<A HREF="#GetTagID">gxsHTML::GetTagID()</A><BR>
<A HREF="#GetTagList">gxsHTML::GetTagList()</A><BR>
<A HREF="#HandleHTMLTag">gxsHTML::HandleHTMLTag()</A><BR>
<A HREF="#LoadHTMLFile">gxsHTML::LoadHTMLFile()</A><BR>
<A HREF="#LoadMemoryBuffer">gxsHTML::LoadMemoryBuffer()</A><BR>
<A HREF="#NumProcessed">gxsHTML::NumProcessed()</A><BR>
<A HREF="#NumTags">gxsHTML::NumTags()</A><BR>
<A HREF="#ParseHTMLTagInfo">gxsHTML::ParseHTMLTagInfo()</A><BR>
<A HREF="#ProcessHTMLTags">gxsHTML::ProcessHTMLTags()</A><A NAME="gxsHTML"></P>
<B><FONT COLOR="#000080"><P>gxsHTML::gxsHTML()</A></FONT>&nbsp;-&nbsp;</B>Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxsHTML_overload_1">gxsHTML::gxsHTML(const gxsHTML &amp;ob)</A></FONT>&nbsp;-&nbsp;</B>Class copy constructor.<B> </P>
<FONT COLOR="#000080"><P><A NAME="BM_gxsHTML">virtual gxsHTML::~gxsHTML()</A></FONT>&nbsp;-&nbsp;</B>Class destructor.<B> </P>
<FONT COLOR="#000080"><P><A NAME="ClearTagList">void gxsHTML::ClearTagList()</A></FONT>&nbsp;-&nbsp;</B>Public member function<B> </B>used to clear the tag list.</P>
<B><FONT COLOR="#000080"><P><A NAME="CloseFile">void gxsHTML::CloseFile()</A></FONT>&nbsp;-&nbsp;</B>Public member function<B> </B>used to close the open HTML file after a load operation.</P>
<B><FONT COLOR="#000080"><P><A NAME="CollectHTMLTags">int gxsHTML::CollectHTMLTags()</A></FONT>&nbsp;-&nbsp;</B>Internal processing function<B> </B>used to collect all the HTML tags in a previously opened file. Returns a zero if no file errors occur or a non-zero corresponding to <A HREF="../general/dfileb.htm#ErrorCodeEnumeration">DiskFileB</A> error code if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="CollectHTMLTags_overload_1">int gxsHTML::CollectHTMLTags(const MemoryBuffer &amp;membuf)</A></FONT>&nbsp;-&nbsp;</B>Internal processing function<B> </B>used to collect all the HTML tags from a previously loaded <A HREF="../general/membuf.htm">MemoryBuffer</A> object. Returns a zero if no errors occur or a non-zero to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="Copy">void gxsHTML::Copy(const gxsHTML &amp;ob)</A></FONT>&nbsp;-&nbsp;</B>Internal processing function<B> </B>used to copy gxsHTML objects.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetTag">char *gxsHTML::GetTag(int tag_id)</A></FONT>&nbsp;-&nbsp;</B>Public member function that returns a null terminated string based on the value of the tag ID number. The "tag_id" variable must equal one of the integer constants defined in the <A HREF="#TagIDEnumeration">tag ID</A> enumeration.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetTagID">int gxsHTML::GetTagID(const gxString &amp;tag)</A></FONT>&nbsp;-&nbsp;</B>Public member function that returns a numerical value defined in the <A HREF="#TagIDEnumeration">tag ID</A> enumeration that represents the specified tag.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetTagList">gxDLList<gxsHTMLTagInfo> *gxsHTML::GetTagList()</A></FONT>&nbsp;-&nbsp;</B>Public member function that returns a pointer to the tag list. </P>
<B><FONT COLOR="#000080"><P><A NAME="HandleHTMLTag">void gxsHTML::HandleHTMLTag(int tag_id)</A></FONT>&nbsp;-&nbsp;</B>Internal processing function used to execute the derived class version of a specific tag handler.<B> </P>
<FONT COLOR="#000080"><P><A NAME="LoadHTMLFile">int gxsHTML::LoadHTMLFile(const char *fname)</A></FONT>&nbsp;-&nbsp;</B>Public member function used to open the specified HTML file and process all the tags collected from the file. Returns a zero if no disk file errors occur or a non-zero corresponding to <A HREF="../general/dfileb.htm#ErrorCodeEnumeration">DiskFileB</A> error code if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="LoadMemoryBuffer">int gxsHTML::LoadMemoryBuffer(const MemoryBuffer &amp;membuf)</A></FONT>&nbsp;-&nbsp;</B>Public member function used to process all the tags stored in a<B> </B><A HREF="../general/membuf.htm">MemoryBuffer</A> object. Returns a zero if no errors occur or a non-zero to indicate a failure.</P>
<B><FONT COLOR="#000080"><P><A NAME="NumProcessed">unsigned gxsHTML::NumProcessed()</A></FONT>&nbsp;-&nbsp;</B>Public member function used to retrieve the total number of tags processed.</P>
<B><FONT COLOR="#000080"><P><A NAME="NumTags">unsigned gxsHTML::NumTags()</A></FONT>&nbsp;-&nbsp;</B>Public member function used to retrieve the total number of tags collected.</P>
<B><FONT COLOR="#000080"><P><A NAME="ParseHTMLTagInfo">void gxsHTML::ParseHTMLTagInfo(gxsHTMLTagInfo &amp;t)</A></FONT>&nbsp;-&nbsp;</B>Public member function used to<B> </B>parse the specific tag information based on the string contained in the <A HREF="#Structs">gxsHTMLTagInfo::tag_info</A> member.</P>
<B><FONT COLOR="#000080"><P><A NAME="ProcessHTMLTags">int gxsHTML::ProcessHTMLTags()</A></FONT>&nbsp;-&nbsp;</B>Internal processing function used to<B> </B>read and process all the tags in a previously opened file. Returns a zero if no disk file errors occur or a non-zero corresponding to <A HREF="../general/dfileb.htm#ErrorCodeEnumeration">DiskFileB</A> error code if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="ProcessHTMLTags_overload_1">int gxsHTML::ProcessHTMLTags(const MemoryBuffer &amp;membuf)</A></FONT>&nbsp;-&nbsp;</B>Internal processing function used to read and process all the tags in a <A HREF="../general/membuf.htm">MemoryBuffer</A> object. Returns a zero if no errors occur or a non-zero to indicate a failure.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="HTMLTagHandlers">HTML Tag Handlers</A></P>
</B></FONT><P>Derived class interface used to process tags.</P>
<PRE>
<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_INVALID_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle INVALID tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_UNKNOWN_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle UNKNOWN tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_UNKNOWN_SPECIAL_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle unknown special tags starting 
</FONT>  <FONT COLOR="#ff0000">// with an ampersand ending in a semicolon &amp;xxxx;
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_COMMENT_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle COMMENT tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_LESS_THEN_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle a less than sign "&amp;lt;" 
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_GREATER_THEN_Tag() 
{
  <FONT COLOR="#ff0000">// Override to handle a greater than sign "&amp;gt;"
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_AMPERSAND_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle an ampersand "&amp;amp;" 
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_NB_SPACE_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle a non-breaking space "&amp;nbsp;"
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_QUOTE_Tag() 
{
  <FONT COLOR="#ff0000">// Override to handle a quotation mark "&amp;quot;" 
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_EX_ASCII_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle the extended ASCII character set "&amp;#"
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_A_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle ANCHOR tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_ABBREV_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle ABBREVIATION tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_ACRONYM_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle ACRONYM tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_ADDRESS_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle ADDRESS tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_APPLET_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle JAVA APPLET tag
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_AREA_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle AREA tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_AU_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle AUTHOR tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_AUTHOR_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle AUTHOR tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_B_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle BOLD tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_BANNER_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle BANNER tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_BASE_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle BASE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_BASEFONT_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle BASE FONT
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_BGSOUND_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle BACKGROUND SOUND
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_BIG_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle BIG text
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_BLINK_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle BLINK tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_BLOCKQUOTE_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle BLOCK QUOTE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_BQ_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle BLOCK QUOTE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_BODY_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle BODY tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_BR_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle LINE BREAK tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_CAPTION_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle CAPTION tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_CENTER_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle CENTER tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_CITE_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle CITATION tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_CODE_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle CODE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_COL_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle TABLE Cols tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_COLGROUP_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle TABLE Cols tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_CREDIT_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle CREDIT tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_DEL_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle DELETED text tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_DFN_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle DEFINITION tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_DIR_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle DIRECTORY list tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_DIV_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle DIVISION tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_DL_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle DEFINITION list tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_DT_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle DEFINITION term tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_DD_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle DEFINITION tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_EM_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle EMPHASIZED tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_EMBED_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle EMBED tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_FIG_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle FIGURE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_FN_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle FOOTNOTE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_FONT_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle FONT tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_FORM_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle FORM tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_FRAME_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle FRAME tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_FRAMESET_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle FRAME sets
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_H1_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle HEADING 1 tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_H2_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle HEADING 2 tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_H3_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle HEADING 3 tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_H4_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle HEADING 4 tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_H5_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle HEADING 5 tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_H6_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle HEADING 6 tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_HEAD_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle HEAD tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_HR_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle HORIZONTAL rules
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_HTML_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle HTML tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_I_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle ITALIC tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_IFRAME_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle FRAME - Floating tag
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_IMG_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle INLINE images
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_INPUT_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle FORM input tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_INS_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle INSERTED text
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_ISINDEX_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle ISINDEX tag
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_KBD_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle KEYBOARD tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_LANG_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle LANGUAGE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_LH_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle LIST header tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_LI_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle LIST item tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_LINK_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle LINK tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_LISTING_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle LISTING tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_MAP_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle MAP tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_MARQUEE_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle MARQUEE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_MATH_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle MATH tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_MENU_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle MENU list tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_META_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle META tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_MULTICOL_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle MULTI COLUMN tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_NOBR_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle NO BREAK tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_NOFRAMES_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle NO FRAMES tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_NOTE_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle NOTE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_OL_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle ORDERED list tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_OVERLAY_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle OVERLAY tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_P_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle PARAGRAPH tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_PARAM_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle PARAMETERS tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_PERSON_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle PERSON tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_PLAINTEXT_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle PLAIN text tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_PRE_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle PREFORMATTED text tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_Q_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle QUOTE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_RANGE_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle RANGE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_SAMP_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle SAMPLE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_SCRIPT_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle SCRIPT tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_SELECT_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle FORM SELECT tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_SMALL_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle SMALL text tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_SPACER_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle WHITE SPACE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_SPOT_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle SPOT tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_STRIKE_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle STRIKETHROUGH tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_STRONG_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle STRONG tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_SUB_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle SUBSCRIPT tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_SUP_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle SUPERSCRIPT tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_TAB_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle HORIZONTAL TABS tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_TABLE_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle TABLE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_TBODY_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle TABLE body tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_TD_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle TABLE data tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_TEXTAREA_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle FORM form tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_TEXTFLOW_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle JAVA applet textflow
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_TFOOT_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle TABLE footer tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_TH_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle TABLE head
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_THEAD_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle TABLE head tag
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_TITLE_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle TITLE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_TR_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle TABLE row tags 
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_TT_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle TELETYPE tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_U_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle UNDERLINED tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_UL_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle UNORDERED list tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_VAR_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle VARIABLE tags 
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_WBR_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle WORD BREAK tags
</FONT>}

<FONT COLOR="#ff00ff">void</FONT> gxsHTML::Handle_XMP_Tag()
{
  <FONT COLOR="#ff0000">// Override to handle EXAMPLE tags
</FONT>}</PRE>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>



  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
