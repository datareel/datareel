<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:48:51 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxspop3 class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Embedded POP3 Client</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#DataMemebers">Data Members</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The embedded POP3 (Post Office Protocol 3) client is a cross platform POP3 implementation used with applications that require POP3 client/server functions. The gxsPOP3Client class is derived from the <A HREF="gxsocket.htm">gxSocket</A> class and conforms to RFC 1725: <A HREF="http://www.faqs.org/rfcs/rfc1725.html">http://www.faqs.org/rfcs/rfc1725.html</A></P>
<P><HR></P>
<P><A NAME="DataMemebers"><!-- New Section --><B><FONT SIZE=4>Data Members</A></B></FONT> </P>
<B><FONT COLOR="#000080"><P>char gxsPOP3Client:: reply_buf[gxsBUF_SIZE]</B></FONT> - Buffer used to hold the last reply.</P>
<B><FONT COLOR="#000080"><P>char gxs POP3Client:: command_buf[gxsBUF_SIZE]</B></FONT> - Buffer used to hold the last command.</P>
<B><FONT COLOR="#000080"><P>int gxs POP3Client:: time_out_sec</B></FONT> - Number of seconds before a blocking timeout.</P>
<B><FONT COLOR="#000080"><P>int gxs POP3Client:: time_out_usec</B></FONT> - Number of microseconds before a blocking timeout.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxsPOP3Client">gxsPOP3Client::gxsPOP3Client()</A><BR>
<A HREF="#gxsPOP3ClientDestructor">gxsPOP3Client::~gxsPOP3Client()</A><BR>
<A HREF="#ConnectClient">gxsPOP3Client::ConnectClient()</A><BR>
<A HREF="#POP3Delete">gxsPOP3Client::POP3Delete()</A><BR>
<A HREF="#POP3List">gxsPOP3Client::POP3List()</A><BR>
<A HREF="#POP3Login">gxsPOP3Client::POP3Login()</A><BR>
<A HREF="#POP3Logout">gxsPOP3Client::POP3Logout()</A><BR>
<A HREF="#POP3RSet">gxsPOP3Client::POP3RSet()</A><BR>
<A HREF="#POP3Retr">gxsPOP3Client::POP3Retr()</A><BR>
<A HREF="#POP3Top">gxsPOP3Client::POP3Top()</A><BR>
<A HREF="#RecvResponse">gxsPOP3Client::RecvResponse()</A><BR>
<A HREF="#SendCommand">gxsPOP3Client::SendCommand()</A><BR>
<A HREF="#SetTimeOut">gxsPOP3Client::SetTimeOut()</A><BR>
<A HREF="#WaitForReply">gxsPOP3Client::WaitForReply()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="gxsPOP3Client">gxsPOP3Client::gxsPOP3Client()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxsPOP3ClientDestructor">gxsPOP3Client::~gxsPOP3Client()</A></B></FONT>&nbsp;-&nbsp;Class destructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="ConnectClient">gxSocketError gxsPOP3Client::ConnectClient(const char *host, int port = gxSOCKET_POP3_PORT)</A></B></FONT>&nbsp;-&nbsp;Public member function used to connect a POP3 client to a server. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="POP3Delete">gxSocketError gxsPOP3Client::POP3Delete(int message_number, char *buf, int bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to delete a message from the POP3 server. The "message_number" variable must be a valid message number obtained by a call to the list function. The calling function must allocate sufficient memory for the "buf" variable to store the server's reply. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="POP3List">gxSocketError gxsPOP3Client::POP3List(char *buf, int bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to list all the message numbers on the POP3 server. The calling function must allocate sufficient memory for the "buf" variable to store the server's reply. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="POP3Login">gxSocketError gxsPOP3Client::POP3Login(const char *username, const char *password)</A></B></FONT>&nbsp;-&nbsp;Public member function used to logon to a POP3 server. Both the "username" and "password" variable must be null terminated strings set to a valid username and password. Returns zero no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="POP3Logout">gxSocketError gxsPOP3Client::POP3Logout()</A></B></FONT>&nbsp;-&nbsp;Public member function used to send the POP3 "QUIT" command. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="POP3RSet">gxSocketError gxsPOP3Client::POP3RSet()</A></B></FONT>&nbsp;-&nbsp;Public member function used to send the POP3 "Reset" command. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="POP3Retr">gxSocketError gxsPOP3Client::POP3Retr(int message_number, char *buf, int bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve a message from the POP3 server. The "message_number" variable must be a valid message number obtained by a call to the list function. The calling function must allocate sufficient memory for the "buf" variable to store the entire message or a buffer overflow will result. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="POP3Top">gxSocketError gxsPOP3Client::POP3Top(int message_number, char *buf, int bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve a message header from the POP3 server. The "message_number" variable must be a valid message number obtained by a call to the list function. The calling function must allocate sufficient memory for the "buf" variable to store the entire message header or a buffer overflow will result. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="RecvResponse">int gxsPOP3Client::RecvResponse(char *buf, int bytes, const char *response)</A></B></FONT>&nbsp;-&nbsp;Blocking public receive function used to read a reply from an POP3 server following a command. If the specified response is not received within the timeout period this function will return false to indicate an error. Returns true if successful. </P>
<B><FONT COLOR="#000080"><P><A NAME="SendCommand">gxSocketError gxsPOP3Client::SendCommand(const char *command, const char *response, const char *args = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to send a command to a POP3 server and read the server's response. Returns zero if no errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetTimeOut">void gxsPOP3Client::SetTimeOut(int seconds, int useconds)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the POP3 timeout values.</P>
<B><FONT COLOR="#000080"><P><A NAME="WaitForReply">int gxsPOP3Client::WaitForReply()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns false if a reply time is longer then the timeout values.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
