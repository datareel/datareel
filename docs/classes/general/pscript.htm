<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:47:40 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>pscript class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Postscript Driver</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#Constants">Constants</A> <BR>
<A HREF="#Fonts">Postscript Fonts </A><BR>
<A HREF="#Paper">PostScript Paper Sizes</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>PostScript is a device-independent programming language for describing the appearance of text and graphics on a printed page. PostScript is an interpreted language, which means that when a printer or other interpreter looks at the file it executes the instructions one by one. There is no compilation step. </P>
<P>&nbsp;A PostScript file is an ordinary ASCII file. The first line of every PostScript file begins with <B>%!</B> usually followed by the version identifier: <B>PS-Adobe 2.0</B>. Comments begin with a percent sign <B>%</B> and end with a new line character. </P>
<P>The PostScript interpreter manages a dictionary stack, an operand stack, an execution stack, and a graphics state stack. Each stack is processed last-in-first-out (LIFO). Most PostScript operators use the operand stack-for example; the statement for adding two numbers is as follows: </P>
<P>2 3 add </P>
<P>This statement "pushes" a 2 and then a 3 onto the stack, and then the add operator "pops" both numbers off and then pushes the result (5) back onto the stack. PostScript uses postfix notation, where the operands (2 and 3) precede the operators (add). </P>
<P>The unit of measurement in PostScript is referred to as a point. There are 72 points per inch by default. Thus, a letter-size sheet of paper measures 612 by 792 points, with the origin (0,0) in the lower left corner of the page. PostScript operators allow you to manipulate the coordinate system using operators such as translate, scale, rotate, and so on. </P>
<P>The current point is the reference point used by many PostScript commands, including the commands for placing text on the page. Once set, the current point remains fixed in position on the paper until moved again. The default coordinate system originates (zero-zero point) at the lower left corner of the page. The X-axis increases towards the right and the Y-axis increase towards the top of the page. The initial zero-zero point is always the physical corner of the paper, even if the printer can't print all the way to the edge of the page. By default, distances are specified in PostScript points (1/72 of an inch.) This is true only if the default coordinate system is used. The location of the origin, the units for measurements, and even the direction of the axis may be changed by the programmer.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Constants"><B><FONT SIZE=4>Constants</A></B></FONT> </P>
<PRE>// Setup postscript defaults
const int <B>DEFAULT_TAB_SIZE</B> = 8;        // Default tab size
const double <B>DEFAULT_POINT_SIZE</B> = 10;  // Default point size (10 pitch)
const double <B>DEFAULT_OFFSET</B> = 0.0;     // Default inches to indent each line
const double <B>DEFAULT_LR_MARGIN</B> = 1.0;  // Default left and right margin offset
const double <B>DEFAULT_TB_MARGIN</B> = 1.0;  // Default top and bottom margin offset
const double <B>PRINTABLE_OFFSET_Y</B> = 25;  // Printable area offset
const double <B>PRINTABLE_OFFSET_X</B> = 25;  // Printable area offset
const double <B>HEADER_OFFSET</B> = 1.0;      // Offset for header and trailer text
const int <B>THICK_LINE_WIDTH</B> = 2;        // Line width for header lines
const int <B>LINE_WIDTH</B> = 1;              // Line width for separator lines

// Setup postscript constants
const char <B>SEP_CHAR</B> = '\001';   // Column separator character 
const int <B>MAXPAGES</B> = 10000;     // Maximum number of pages per job 
const int <B>PS_EOF</B> = 0x04;        // PostScript end of file mark
const int <B>MAX_LINES</B> = 160;      // Maximum lines per page for documents 
const int <B>PIXELS_PER_INCH</B> = 72; // PostScript points per inch

// Max lines for a unix man page produced by nroff
// nroff is used to format man pages under most variants of UNIX
const int <B>UNIX_MAN_PAGE_LINES</B> = 66;   

// Setup input/output buffer sizes for postscript documents
const int <B>MAX_LINE</B> = 256; // No PostScript line can exceed 256 characters
const int <B>BUFIN</B> = 1024;   // Maximum length of an input line 
const int <B>BUFOUT</B> = (BUFIN * 5);</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Fonts"><B><FONT SIZE=4>PostScript Fonts</A></B></FONT> </P>
<P>Most PostScript products include software to support 13 standard fonts based on the Courier, Times, Helvetica, and Symbol families. The following enumeration, defined in the PostScriptDrv class, is used to select a specific font: </P>
<PRE>
  enum PSFonts {
    
    <B>COURIER</B>,                                    
    <B>COURIER_BOLD</B>,                    
    <B>COURIER_OBLIQUE</B>,               
    <B>COURIER_BOLD_OBLIQUE</B>, 

    <B>TIMES</B>,                           
    <B>TIMES_BOLD</B>,                
    <B>TIMES_ITALIC</B>,              
    <B>TIMES_BOLD_ITALIC</B>, 

    <B>HELV</B>,                     
    <B>HELV_BOLD</B>,               
    <B>HELV_OBLIQUE</B>,              
    <B>HELV_BOLD_OBLIQUE</B>,         

    <B>SYMBOL</B>                    
};
</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Paper"><B><FONT SIZE=4>PostScript Paper Sizes</A></B></FONT> </P>
<P>The following enumeration, defined in the PostScriptDrv class, is used to select a specific paper size: </P>
<PRE>
  enum PSPaperSizes {
    // Non-metric Traditional Paper Sizes used in Canada and the
    // United States. Sheet sizes accommodate 1/8" (3 mm) head,
    // foot, and fore edge trim margins (width precedes height.)
    // Decimal inches multiplied by 25.4 to convert to approximate mm.
    // N.B. fractional mm measures must be rounded to the nearest
    // whole number.
    <B>LETTER_SIZE</B>,  // 8.5 x 11 inches 
    <B>LEGAL_SIZE</B>,   // 8.5 x 14 inches 
    <B>TABLOID_SIZE</B>, // 11 x 17 inches  

    // ISO/DIN and JIS Standard Paper Sizes Trim sizes in mm.
    // Width precedes height. Sheet sizes accommodate 3mm head,
    // foot, and fore edge trim margins. To convert to approximate
    // decimal inches, divide measures by 25.4.
    <B>A3_SIZE</B>, // 297mm x 420mm (11.70" X 16.55")
    <B>A4_SIZE</B>  // 210mm x 297mm (8.27" X 11.70")
};
</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P>The PostScriptDrv class is used to create postscript documents. This version prints postscript documents to a file or the console. The default coordinate system is used for all PostScript operations and all distances are calculated in increments of 1/72 of an inch.</P>
<P><A HREF="#PostScriptDrv">PostScriptDrv::PostScriptDrv()</A><BR>
<A HREF="#PostScriptDrvDestrcutor">PostScriptDrv::~PostScriptDrv()</A><BR>
<A HREF="#ChangeFont">PostScriptDrv::ChangeFont()</A><BR>
<A HREF="#CharWidth">PostScriptDrv::CharWidth()</A><BR>
<A HREF="#CharsPerInch">PostScriptDrv::CharsPerInch()</A><BR>
<A HREF="#Columns">PostScriptDrv::Columns()</A><BR>
<A HREF="#ConvertTextFile">PostScriptDrv::ConvertTextFile()</A><BR>
<A HREF="#Copies">PostScriptDrv::Copies()</A><BR>
<A HREF="#DocumentSetup">PostScriptDrv::DocumentSetup()</A><BR>
<A HREF="#DrawHeaderLine">PostScriptDrv::DrawHeaderLine()</A><BR>
<A HREF="#EndPage">PostScriptDrv::EndPage()</A><BR>
<A HREF="#Epilogue">PostScriptDrv::Epilogue()</A><BR>
<A HREF="#FontSize">PostScriptDrv::FontSize()</A><BR>
<A HREF="#GetMode">PostScriptDrv::GetMode()</A><BR>
<A HREF="#HeaderFont">PostScriptDrv::HeaderFont()</A><BR>
<A HREF="#HeaderFontSize">PostScriptDrv::HeaderFontSize()</A><BR>
<A HREF="#LandScapeMode">PostScriptDrv::LandScapeMode()</A><BR>
<A HREF="#LinesPerPage">PostScriptDrv::LinesPerPage()</A><BR>
<A HREF="#MediaSetup">PostScriptDrv::MediaSetup()</A><BR>
<A HREF="#MoveTo">PostScriptDrv::MoveTo()</A><BR>
<A HREF="#NCopies">PostScriptDrv::NCopies()</A><BR>
<A HREF="#NoMargins">PostScriptDrv::NoMargins()</A><BR>
<A HREF="#PageHeight">PostScriptDrv::PageHeight()</A><BR>
<A HREF="#PageWidth">PostScriptDrv::PageWidth()</A><BR>
<A HREF="#PortraitMode">PostScriptDrv::PortraitMode()</A><BR>
<A HREF="#PrintLine">PostScriptDrv::PrintLine()</A><BR>
<A HREF="#ProcessText">PostScriptDrv::ProcessText()</A><BR>
<A HREF="#Prologue">PostScriptDrv::Prologue()</A><BR>
<A HREF="#SetDateString">PostScriptDrv::SetDateString()</A><BR>
<A HREF="#SetDocumentName">PostScriptDrv::SetDocumentName()</A><BR>
<A HREF="#SetFont">PostScriptDrv::SetFont()</A><BR>
<A HREF="#SetHeaderFont">PostScriptDrv::SetHeaderFont()</A><BR>
<A HREF="#SetPaperSize">PostScriptDrv::SetPaperSize()</A><BR>
<A HREF="#SetTabStop">PostScriptDrv::SetTabStop()</A><BR>
<A HREF="#StartPage">PostScriptDrv::StartPage()</A><BR>
<A HREF="#StartX">PostScriptDrv::StartX()</A><BR>
<A HREF="#StartY">PostScriptDrv::StartY()</A><BR>
<A HREF="#StringLen">PostScriptDrv::StringLen()</A><BR>
<A HREF="#TabStop">PostScriptDrv::TabStop()</A><BR>
<A HREF="#TextFont">PostScriptDrv::TextFont()</A><BR>
<A HREF="#UseHeader">PostScriptDrv::UseHeader()</A><BR>
<A HREF="#UseLRMargin">PostScriptDrv::UseLRMargin()</A><BR>
<A HREF="#UseTBMargin">PostScriptDrv::UseTBMargin()</A><BR>
<A HREF="#UsingHeader">PostScriptDrv::UsingHeader()</A><BR>
<A HREF="#UsingLRMargin">PostScriptDrv::UsingLRMargin()</A><BR>
<A HREF="#UsingTBMargin">PostScriptDrv::UsingTBMargin()</A><BR>
<A HREF="#drawLine">PostScriptDrv::drawLine()</A><BR>
<A HREF="#drawThickLine">PostScriptDrv::drawThickLine()</A><BR>
<A HREF="#GetSystemTime">GetSystemTime()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="PostScriptDrv">PostScriptDrv::PostScriptDrv()</A></B></FONT>&nbsp;-&nbsp;Default class constructor responsible for setting the default page description values and default fonts. </P>
<B><FONT COLOR="#000080"><P><A NAME="PostScriptDrv_overload_1">PostScriptDrv::PostScriptDrv(const PostScriptDrv &amp;ob)</A></B></FONT>&nbsp;-&nbsp;Class copy constructor used to copy construct a PostScriptDrv object.</P>
<B><FONT COLOR="#000080"><P>PostScriptDrv &amp;PostScriptDrv::operator=(const PostScriptDrv &amp;ob)</B></FONT> - Overloaded assignment operator used to assign the specified object to the object that invoked the call.</P>
<B><FONT COLOR="#000080"><P><A NAME="PostScriptDrvDestrcutor">PostScriptDrv::~PostScriptDrv()</A></B></FONT>&nbsp;-&nbsp;Class destructor that does nothing.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeFont">void PostScriptDrv::ChangeFont(ostream &amp;stream, PSFonts font, double size)</A></B></FONT>&nbsp;-&nbsp;Public member function used to change the current font. <A HREF="#Fonts">PSFonts</A> is an enumeration defined in the PostScriptDrv class used to select a font family.</P>
<B><FONT COLOR="#000080"><P><A NAME="CharWidth">double PostScriptDrv::CharWidth()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the character width of the selected font. The character width of a Courier font is calculated by multiplying .6 by the selected font size. All the other PostScript fonts have a variable character width. </P>
<B><FONT COLOR="#000080"><P><A NAME="CharsPerInch">double PostScriptDrv::CharsPerInch()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the characters per inch based on the selected font size. The number of characters per inch is calculated by dividing the pixels per inch by the character width of the selected font. </P>
<B><FONT COLOR="#000080"><P><A NAME="Columns">int PostScriptDrv::Columns()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the current number of columns, based on the selected font, paper size, margins, and orientation.</P>
<B><FONT COLOR="#000080"><P><A NAME="ConvertTextFile">int PostScriptDrv::ConvertTextFile(ifstream &amp;infile, ostream &amp;stream,int wrap = 0, int cut = 1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to convert the specified ASCII document to a PostScript document. If wrap is true the line will wrap around the page if the number of columns are exceeded. If cut is true the line will be truncated to match the maximum number of columns set for this document. Returns true if successful. </P>
<B><FONT COLOR="#000080"><P><A NAME="Copies">void PostScriptDrv::Copies(int num)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the number of copies that will be printed. </P>
<B><FONT COLOR="#000080"><P><A NAME="DocumentSetup">void PostScriptDrv::DocumentSetup(double LR_margin = 0, double TB_margin = 0, int man = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to calculate the "x" and "y" positions, lines per page and columns for landscape and portrait modes. The left/right and top/bottom margin offsets will not be used if left/right or top/bottom margins are not enabled. If "man" is true the line per page will be set to max lines per page for UNIX man pages produced by "nroff." Nroff is used to format man pages under most variants of UNIX. </P>
<B><FONT COLOR="#000080"><P><A NAME="DrawHeaderLine">void PostScriptDrv::DrawHeaderLine()</A></B></FONT>&nbsp;-&nbsp;Public member function used to enable lines that will be printed below the page header and above the page number.</P>
<B><FONT COLOR="#000080"><P><A NAME="EndPage">void PostScriptDrv::EndPage(ostream &amp;stream)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write the end of page sequence to the specified stream when the end of a page is reached.</P>
<B><FONT COLOR="#000080"><P><A NAME="Epilogue">void PostScriptDrv::Epilogue(ostream &amp;stream, int page_count)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write the PostScript epilogue to the specified stream when the end of document is reached.</P>
<B><FONT COLOR="#000080"><P><A NAME="FontSize">double PostScriptDrv::FontSize()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the current font size.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetMode">int PostScriptDrv::GetMode()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if using landscape mode.</P>
<B><FONT COLOR="#000080"><P><A NAME="HeaderFont">char *PostScriptDrv::HeaderFont()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the name of selected header font.</P>
<B><FONT COLOR="#000080"><P><A NAME="HeaderFontSize">double PostScriptDrv::HeaderFontSize()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the current size of the header font.</P>
<B><FONT COLOR="#000080"><P><A NAME="LandScapeMode">void PostScriptDrv::LandScapeMode()</A></B></FONT>&nbsp;-&nbsp;Public member function used to enable landscape mode.</P>
<B><FONT COLOR="#000080"><P><A NAME="LinesPerPage">int PostScriptDrv::LinesPerPage()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the current lines per page, based on the selected font, paper size, margins, and orientation.</P>
<B><FONT COLOR="#000080"><P><A NAME="MediaSetup">void PostScriptDrv::MediaSetup(ostream &amp;stream, int duplex = 0, int manualfeed = 0,int use_tray = 0, int tray_number = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the physical sources and physical destinations for the media source and destination to be used by the printer. These settings are device dependent. The duplex option enables duplex printing if a duplex device is attached to the printer. Each pair of consecutive pages will be printed on opposite sides of a single sheet of paper. The manual feed option will feed the paper from the manual feed position. The tray options are used to select a specific paper tray to print from. The tray number indicates the actual paper tray. The correspondence between tray numbers and the actual positions is specific to each printer. Example: The HP LaserJet 5Si/5Si MX printer uses the following numbers to represent the actual paper trays: 0 = Tray 2, 1 = Tray 3, 2 = Envelope Feeder, 3 = Tray 1, 4
 = Tray 4</P>
<B><FONT COLOR="#000080"><P><A NAME="MoveTo">void PostScriptDrv::MoveTo(ostream &amp;stream, int x, int y)</A></B></FONT>&nbsp;-&nbsp;Public member function used to move to the specified "x" and "y" positions.</P>
<B><FONT COLOR="#000080"><P><A NAME="NCopies">int PostScriptDrv::NCopies()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the current number of copies to be printed.</P>
<B><FONT COLOR="#000080"><P><A NAME="NoMargins">void PostScriptDrv::NoMargins()</A></B></FONT>&nbsp;-&nbsp;Public member function used to disable left/right and top/bottom margins.</P>
<B><FONT COLOR="#000080"><P><A NAME="PageHeight">int PostScriptDrv::PageHeight()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the current page height in PostScript points, based on the selected paper size.</P>
<B><FONT COLOR="#000080"><P><A NAME="PageWidth">int PostScriptDrv::PageWidth()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the current page width in PostScript points, based on the selected paper size.</P>
<B><FONT COLOR="#000080"><P><A NAME="PortraitMode">void PostScriptDrv::PortraitMode()</A></B></FONT>&nbsp;-&nbsp;Public member function used to enable portrait mode.</P>
<B><FONT COLOR="#000080"><P><A NAME="PrintLine">int PostScriptDrv::PrintLine(char *in, ostream &amp;stream)</A></B></FONT>&nbsp;-&nbsp;Public member function used to print a line of text to the selected stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="PrintLine_overload_1">int PostScriptDrv::PrintLine(char *s, unsigned max_len, ofstream &amp;stream)</A></B></FONT>&nbsp;-&nbsp;Public member function used to print a line of text, up to the specified length, to the specified stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="ProcessText">int PostScriptDrv::ProcessText(char *in, ostream &amp;stream, int cut = 1, int filter = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to process a line of text before printing it. If cut is true the line will be truncated to match the maximum number of columns for this line. If filter is true each line will be filtered for escape sequences and non-printable characters before the line is truncated. Returns true if successful. </P>
<B><FONT COLOR="#000080"><P><A NAME="Prologue">void PostScriptDrv::Prologue(ostream &amp;stream, char *pn = 0, char *hn = 0,char *cd = 0, char *un = 0)</A></B></FONT>&nbsp;-Public member function used to print the PostScript prologue to the specified stream. This indicates the start of the document. Arguments are: "pn" - Program Name, "hn" - Hostname, "cd" - Creation Date, "un" - Username. The arguments will be added to the prologue only if specified.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetDateString">void PostScriptDrv::SetDateString(char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to add a date to this document. The date string will be printed on each page if the use of page headers is enabled.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetDateString_overload_1">void PostScriptDrv::SetDateString(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to add a date to this document. The date string will be printed on each page if the use of page headers is enabled.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetDocumentName">void PostScriptDrv::SetDocumentName(char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to add a date to this document. The date string will be printed on each page if the use of page headers is enabled.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetDocumentName_overload_1">void PostScriptDrv::SetDocumentName(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to name this document. The document name will be printed on each page if the use of page headers is enabled.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetFont">void PostScriptDrv::SetFont(PSFonts font, double size)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the document font. <A HREF="#Fonts">PSFonts</A> is an enumeration defined in the PostScriptDrv class used to select a font family.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetHeaderFont">void PostScriptDrv::SetHeaderFont(PSFonts font, double size)</A></B></FONT>&nbsp;-&nbsp;- Public member function used to set the header font. <A HREF="#Fonts">PSFonts</A> is an enumeration defined in the PostScriptDrv class used to select a font family.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetPaperSize">void PostScriptDrv::SetPaperSize(PSPaperSizes size)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the paper size for this document. <A HREF="#Paper">PSPaperSizes</A> is an enumeration defined in the PostScriptDrv class used to set the paper size.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetTabStop">void PostScriptDrv::SetTabStop(int num)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the tab size.</P>
<B><FONT COLOR="#000080"><P><A NAME="StartPage">void PostScriptDrv::StartPage(int n, ostream &amp;stream)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write the start of page sequence to the specified stream each time a new page is started.</P>
<B><FONT COLOR="#000080"><P><A NAME="StartX">int PostScriptDrv::StartX()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the starting "x" position for each page.</P>
<B><FONT COLOR="#000080"><P><A NAME="StartY">int PostScriptDrv::StartY()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the starting "y" position for each page.</P>
<B><FONT COLOR="#000080"><P><A NAME="StringLen">int PostScriptDrv::StringLen(char *s, int charWidth)</A></B></FONT>&nbsp;-&nbsp;Public member function used to convert a string's length to PostScript points.</P>
<B><FONT COLOR="#000080"><P><A NAME="StringLen_overload_1">int PostScriptDrv::StringLen(const char *s, int charWidth)</A></B></FONT>&nbsp;- Public member function used to convert a string's length to PostScript points.</P>
<B><FONT COLOR="#000080"><P><A NAME="TabStop">int PostScriptDrv::TabStop()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the current tab setting.</P>
<B><FONT COLOR="#000080"><P><A NAME="TextFont">char *PostScriptDrv::TextFont()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the name of the selected font family.</P>
<B><FONT COLOR="#000080"><P><A NAME="UseHeader">void PostScriptDrv::UseHeader()</A></B></FONT>&nbsp;-&nbsp;Public member function used to enable a header and page number to be printed on each page.</P>
<B><FONT COLOR="#000080"><P><A NAME="UseLRMargin">void PostScriptDrv::UseLRMargin()</A></B></FONT>&nbsp;-&nbsp;Public member function used to enable left and right margins.</P>
<B><FONT COLOR="#000080"><P><A NAME="UseTBMargin">void PostScriptDrv::UseTBMargin()</A></B></FONT>&nbsp;-&nbsp;Public member function used to enable top and bottom margins.</P>
<B><FONT COLOR="#000080"><P><A NAME="UsingHeader">int PostScriptDrv::UsingHeader()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if headers and page numbers are enabled. </P>
<B><FONT COLOR="#000080"><P><A NAME="UsingLRMargin">int PostScriptDrv::UsingLRMargin()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if left and right margins are enabled.</P>
<B><FONT COLOR="#000080"><P><A NAME="UsingTBMargin">int PostScriptDrv::UsingTBMargin()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if top and bottom margins are enabled.</P>
<B><FONT COLOR="#000080"><P><A NAME="drawLine">void PostScriptDrv::drawLine(ostream &amp;stream, int points, int xpos, int ypos)</A></B></FONT>&nbsp;-&nbsp;Public member function used to draw a line to the specified stream starting at the specified "x" and "y" positions. The number of PostScript points determines the length of the line.</P>
<B><FONT COLOR="#000080"><P><A NAME="drawThickLine">void PostScriptDrv::drawThickLine(ostream &amp;stream, int points, int xpos, int ypos)</A></B></FONT>&nbsp;Public member function used to draw a thick line to the specified stream starting at the specified "x" and "y" positions. The number of PostScript points determines the length of the line.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetSystemTime">void GetSystemTime(char *s, int full_month_name = 1)</B></FONT> </A>- Standalone function used to create a custom time string for PostScript page headers. If the "full_month_name" variable is false an abbreviated month name will be used instead of a full name, which is selected by default.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
