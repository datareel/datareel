<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:45:52 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>devcache class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Device Cache</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="ddiagram.htm">Block Diagram</A><BR>
<A HREF="#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="#Enumerations">Enumerations</A><BR>
<A HREF="#DeviceCacheFunctions">Device Cache Functions</A> <BR>
<A HREF="#DeviceBucketCacheFunctions">Device Bucket Cache Functions</A> <BR>
<A HREF="#DeviceCachePointerFunctions">Device Cache Pointer Functions</A> </P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The Device Cache consist of series of cooperating classes used to buffer raw data as it moved to and from input and output devices, such as disk files, stream sockets, datagram sockets, serial ports, etc. It was specifically designed to handle large data transfers in the form of continuous streams or controlled bursts. The Device Cache works through multiple inheritance with three primary classes comprising the user interface: the gxDeviceCache class, the gxDeviceBucketCache class, and the gxDeviceCachePtr class. </P>
<P>The <A HREF="#DeviceCacheFunctions">gxDeviceCache</A> class is an abstract base class used to define the methods needed to interface a device with the memory cache. The derived class determines the type of device the cache will be linked to. The derived class is also responsible for defining the methods used to read and write to and from the device as well as keep track of the device status. The device cache will buffer a stream of binary data as is it is written to or read from the device the derived class is using to perform I/O operations.</P>
<P>The <A HREF="#DeviceBucketCacheFunctions">gxDeviceBucketCache</A> class is responsible for the allocation and de-allocation of a fixed number of cache buckets and incorporates functions used to handle requests for memory-based I/O buffers. The cache must determine whether an I/O buffer is already loaded. If the buffer is not loaded the cache reserves a bucket and loads the buffer into memory. This cache design uses cache pointers to reference cache buckets directly, with each cache pointer being initialized after the bucket is reserved. Cache buckets are organized into a doubly linked list with the number of buckets determined when a gxDeviceBucketCache object is constructed.</P>
<P>The <A HREF="#DeviceCachePointerFunctions">gxDeviceCachePtr</A> class is used to access cache buckets directly, which allows the user to load and unload I/O buffers as needed. Cache pointers are used to work in conjunction with the cache buckets. Each cache pointer stores a pointer to the bucket containing the I/O memory buffer and a pointer to the cache the cache pointer is connected to. </P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="ConditionalDirectives">Conditional Directives</A></P>
</B></FONT><P>This cache design supports both variable length and fixed length cache buckets. In order to support multiple bucket types the <B>MBTYPE </B>definition is used to define the bucket data type. The bucket data type is set by a conditional directive that allows the device cache classes to use variable or fixed length buffers. Each type must be determined at compile time and only one type can be used for each compile. <B>NOTE</B>: Resizable cache buckets will be used by default. The following conditional directives can be used to support the following bucket data types:</P>
<B><P>__SMEMORY_BLOCK__</B> - Fixed length memory (static) blocks using the <A HREF="memblock.htm">MemoryBlock</A> type.</P>
<B><P>__VMEMORY_BUFFER__ -</B> Resizable memory buffers using the <A HREF="membuf.htm">MemoryBuffer</A> type.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="Enumerations">Enumerations</A></P>
</B></FONT><P>This gxDeviceTypes enumeration is used to define the various devices types used by the communications library.</P>
<PRE><A NAME="gxDeviceTypesEnumeration">enum gxDeviceTypes</A> {
  <B>gxDEVICE_VOID</B> = 0,        // Not pointing to any valid device
  <B>gxDEVICE_CONSOLE</B>,         // Using the console for I/O operations 
  <B>gxDEVICE_DATAGRAM_SOCKET</B>, // Using a datagram socket for I/O  
  <B>gxDEVICE_DISK_FILE</B>,       // Using a disk file for I/O operations
  <B>gxDEVICE_MEMORY_BUFFER</B>,   // Using a memory buffer for I/O operations
  <B>gxDEVICE_NULL</B>,            // Dump I/O into the bit bucket
  <B>gxDEVICE_SERIAL_PORT</B>,     // Using a serial port for I/O operations
  <B>gxDEVICE_STREAM_SOCKET</B>    // Using a stream socket for I/O operations
};</PRE>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="DeviceCacheFunctions">Device Cache Functions</A></P>
</B></FONT><P><A HREF="#gxDeviceCache">gxDeviceCache::gxDeviceCache()</A><BR>
<A HREF="#gxDeviceCacheDestrcutor">gxDeviceCache::~gxDeviceCache()</A><BR>
<A HREF="#Read">gxDeviceCache::Read()</A><BR>
<A HREF="#ReadyForReading">gxDeviceCache::ReadyForReading()</A><BR>
<A HREF="#ReadyForWriting">gxDeviceCache::ReadyForWriting()</A><BR>
<A HREF="#Write">gxDeviceCache::Write()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="gxDeviceCache">gxDeviceCache::gxDeviceCache()</A></B></FONT>&nbsp;-&nbsp;Default class constructor.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxDeviceCacheDestrcutor">virtual gxDeviceCache::~gxDeviceCache()</B></FONT>&nbsp;</A>-&nbsp;Class destructor provided for virtuality.</P>
<B><FONT COLOR="#000080"><P><A NAME="Read">virtual void gxDeviceCache::Read(void *buf, unsigned Bytes, gxDeviceTypes dev)</A></B></FONT>&nbsp;Pure virtual member function used by the device cache classes to read a specified number of bytes from an input device. The "dev" variable is used to map the input device and must correspond to one of the integer constants defined in the <A HREF="#gxDeviceTypesEnumeration">gxDeviceTypes</A> enumeration. </P>
<B><FONT COLOR="#000080"><P><A NAME="ReadyForReading">int gxDeviceCache::ReadyForReading()</A></B></FONT>&nbsp;-&nbsp;Public member function used by the device cache classes to determine if an input device is ready for to be read.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadyForWriting">int gxDeviceCache::ReadyForWriting()</A></B></FONT>&nbsp;-&nbsp;Public member function used by the device cache classes to determine if an output device is can be written to.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write">virtual void gxDeviceCache::Write(const void *buf, unsigned Bytes, gxDeviceTypes dev)</A></B></FONT>&nbsp;-&nbsp;Pure virtual member function used by the device cache classes to write a specified number of bytes to an output device. The "dev" variable is used to map the output device and must correspond to one of the integer constants defined in the <A HREF="#gxDeviceTypesEnumeration">gxDeviceTypes</A> enumeration.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="DeviceBucketCacheFunctions">Device Bucket Cache Functions</A></P>
</B></FONT><P>The gxDeviceBucket data structure is a cache node used to define how each bucket will be loaded/stored and which device will be used for every input/output operation. gxDeviceBucket objects are organized in a contiguous circular linked list by the gxDeviceBucketCache class.</P>
<FONT COLOR="#008080"><PRE>class gxDeviceBucket: public MBTYPE
{
public:
  gxDeviceTypes o_device; // Output device this bucket is connected to
  gxDeviceTypes i_device; // Input device this bucket is connected to
  gxDeviceBucket *prev;   // Previous bucket in the list
  gxDeviceBucket *next;   // Next bucket in the list
};</PRE>
</FONT><B><U><P>gxDeviceBucket functions</B></U>:<BR>
<A HREF="#:FlushBucket">gxDeviceBucket::FlushBucket()</A><BR>
<A HREF="#:IsDirty">gxDeviceBucket::IsDirty()</A><BR>
<A HREF="#:ReadBucket">gxDeviceBucket::ReadBucket()</A><BR>
<A HREF="#:ResetBucket">gxDeviceBucket::ResetBucket()</A><BR>
<A HREF="#:WriteBucket">gxDeviceBucket::WriteBucket()</A><BR>
<A NAME="BM_FlushBucket"></P>
<B><FONT COLOR="#000080"><P>void gxDeviceBucket::FlushBucket(gxDeviceCache &amp;dev)</A></B></FONT>&nbsp;-&nbsp;Public member function used to flush this cache bucket to the specified device and reset the dirty flag.</P>
<B><FONT COLOR="#000080"><P><A NAME="BM_IsDirty">int gxDeviceBucket::IsDirty()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true when the bucket is in use or false when empty. This "is_dirty" flag locks the bucket following a read operation and unlocks the bucket following a write operation.</P>
<B><FONT COLOR="#000080"><P><A NAME="BM_ReadBucket">void gxDeviceBucket::ReadBucket(gxDeviceCache &amp;dev, unsigned bytes = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a specified number of bytes from this device. If a zero byte size is specified the bucket will be locked and the bucket data must be loaded manually.</P>
<B><FONT COLOR="#000080"><P><A NAME="BM_ResetBucket">void gxDeviceBucket::ResetBucket()</A></B></FONT>&nbsp;-&nbsp;Public member function used to reset the all the bucket flags and direct all I/O operations to a void device.</P>
<B><FONT COLOR="#000080"><P><A NAME="BM_WriteBucket">void gxDeviceBucket::WriteBucket(gxDeviceCache &amp;dev)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write the contents of this cache bucket to the specified device.</P>
<P>The gxDeviceBucketCache class is used to handle the allocation and de-allocation of buckets. The cache must determine whether an object is already loaded. If the object is not loaded the cache reserves a bucket and loads the object into memory.</P>
<B><U><P>gxDeviceBucketCache functions</B></U>:<BR>
<A HREF="#gxDeviceBucketCache">gxDeviceBucketCache::gxDeviceBucketCache()</A><BR>
<A HREF="#gxDeviceBucketCacheDestructor">gxDeviceBucketCache::~gxDeviceBucketCache()</A><BR>
<A HREF="#gxDeviceBucketCacheAllocBucket">gxDeviceBucketCache::AllocBucket()</A><BR>
<A HREF="#BucketsInUse">gxDeviceBucketCache::BucketsInUse()</A><BR>
<A HREF="#Clear">gxDeviceBucketCache::Clear()</A><BR>
<A HREF="#gxDeviceBucketCacheConnect">gxDeviceBucketCache::Connect()</A><BR>
<A HREF="#ConstructCache">gxDeviceBucketCache::ConstructCache()</A><BR>
<A HREF="#DestroyCache">gxDeviceBucketCache::DestroyCache()</A><BR>
<A HREF="#Disconnect">gxDeviceBucketCache::Disconnect()</A> <BR>
<A HREF="#Flush">gxDeviceBucketCache::Flush()</A><BR>
<A HREF="#GetBuckets">gxDeviceBucketCache::GetBuckets()</A><BR>
<A HREF="#GetHead">gxDeviceBucketCache::GetHead()</A><BR>
<A HREF="#GetTail">gxDeviceBucketCache::GetTail()</A> <BR>
<A HREF="#gxDeviceBucketCacheIsEmpty">gxDeviceBucketCache::IsEmpty()</A> <BR>
<A HREF="#rFlush">gxDeviceBucketCache::rFlush()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="gxDeviceBucketCache">gxDeviceBucketCache::gxDeviceBucketCache(unsigned num)</A></B></FONT>&nbsp;-&nbsp;Class constructor responsible for allocating a specified number of cache buckets and organizing the buckets in a contiguous circular linked list</P>
<B><FONT COLOR="#000080"><P><A NAME="gxDeviceBucketCacheDestructor">gxDeviceBucketCache::~gxDeviceBucketCache()</B></FONT>&nbsp;</A>-&nbsp;Class destructor responsible for flushing the cache and de-allocating the cache buckets.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxDeviceBucketCacheAllocBucket">gxDeviceBucket *gxDeviceBucketCache::AllocBucket(gxDeviceTypes o_dev, gxDeviceTypes i_dev,unsigned bytes = 0)</B></FONT>&nbsp;</A>-&nbsp;Public member function used to connect a cache bucket to the specified I/O device and read a specified number of bytes from the input device. Returns a pointer to the bucket or a null value if an error occurred.</P>
<B><FONT COLOR="#000080"><P><A NAME="BucketsInUse">unsigned gxDeviceBucketCache::BucketsInUse()</A></B></FONT>&nbsp;-&nbsp;Public member function use to obtain the total number of dirty buckets.</P>
<B><FONT COLOR="#000080"><P><A NAME="Clear">void gxDeviceBucketCache::Clear()</A></B></FONT>&nbsp;-&nbsp;Public member function used to flush all buckets in the cache.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxDeviceBucketCacheConnect">void gxDeviceBucketCache::Connect(gxDeviceCache *dev)</B></FONT>&nbsp;</A>-&nbsp;Public member function used to connect the cache to an I/O device. <B>NOTE</B>: This function will clear the cache if previously connected.</P>
<B><FONT COLOR="#000080"><P><A NAME="ConstructCache">gxDeviceBucket *gxDeviceBucketCache::ConstructCache(unsigned num)</A></B></FONT>&nbsp;-&nbsp;Public member function used to construct and initialize and array of buckets. <B>NOTE</B>: This implementation uses contiguous memory for the cache buckets. Returns a pointer to the bucket array or a null value if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="DestroyCache">void gxDeviceBucketCache::DestroyCache()</A></B></FONT>&nbsp;-&nbsp;Public member function used to flush all the cache buckets and frees the memory allocated for the cache bucket array.</P>
<B><FONT COLOR="#000080"><P><A NAME="Disconnect">void gxDeviceBucketCache::Disconnect()</A></B></FONT>&nbsp;-&nbsp;Public member function used to clear and disconnect the cache from a previously connected I/O device.</P>
<B><FONT COLOR="#000080"><P><A NAME="Flush">int gxDeviceBucketCache::Flush()</A></B></FONT>&nbsp;-&nbsp;Public member function used to flush all the buckets in the cache. Returns true if successful or false if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetBuckets">int gxDeviceBucketCache::GetBuckets()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the total number of cache buckets that have been allocated. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetHead">gxDeviceBucket *gxDeviceBucketCache::GetHead()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a pointer to the first bucket.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetTail">gxDeviceBucket *gxDeviceBucketCache::GetTail()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a pointer to the last bucket.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxDeviceBucketCacheIsEmpty"><A NAME="IsEmpty">int gxDeviceBucketCache::IsEmpty()</A></A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if no memory has been allocated for the cache bucket array of the cache bucket array has been destroyed.</P>
<B><FONT COLOR="#000080"><P><A NAME="rFlush">int gxDeviceBucketCache::rFlush()</A></B></FONT>&nbsp;-&nbsp;Public member function used to flush all buckets in reverse order. Returns true if successful or false if an error occurs.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="DeviceCachePointerFunctions">Device Cache Pointer Functions</A></P>
</B></FONT><P><A HREF="#gxDeviceCachePtr">gxDeviceCachePtr::gxDeviceCachePtr()</A><BR>
<A HREF="#gxDeviceCachePtrDestructor">gxDeviceCachePtr::~gxDeviceCachePtr()</A><BR>
<A HREF="#Alloc">gxDeviceCachePtr::Alloc()</A><BR>
<A HREF="#GetInputDevice">gxDeviceCachePtr::GetInputDevice()</A><BR>
<A HREF="#GetOutputDevice">gxDeviceCachePtr::GetOutputDevice()</A><BR>
<A HREF="#Release">gxDeviceCachePtr::Release()</A><BR>
<A HREF="#SetCache">gxDeviceCachePtr::SetCache()</A><BR>
<A HREF="#SetInputDevice">gxDeviceCachePtr::SetInputDevice()</A><BR>
<A HREF="#SetOutputDevice">gxDeviceCachePtr::SetOutputDevice()</A> <BR>
<A HREF="#IndirectionOperator">gxDeviceCachePtr::operator*()</A><BR>
<A HREF="#ArrowOperator">gxDeviceCachePtr::operator-&gt;()</A><BR>
<A NAME="gxDeviceCachePtr"></P>
<B><FONT COLOR="#000080"><P>gxDeviceCachePtr::gxDeviceCachePtr(gxDeviceBucketCache &amp;c, gxDeviceTypes o_dev,gxDeviceTypes i_dev)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to connect the pointer to a previously constructed cache. The "i_dev" and "o_dev" variables are used to map the I/O device and must correspond to one of the integer constants defined in the <A HREF="#gxDeviceTypesEnumeration">gxDeviceTypes</A> enumeration. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxDeviceCachePtr_overload_1">gxDeviceCachePtr::gxDeviceCachePtr(const gxDeviceCachePtr &amp;ob)</A></B></FONT>&nbsp;-&nbsp;Copy constructor that will release the bucket this object forcing this pointer to reference another bucket. </P>
<B><FONT COLOR="#000080"><P>gxDeviceCachePtr&amp; gxDeviceCachePtr::operator=(const gxDeviceCachePtr &amp;ob)</B></FONT>&nbsp;-&nbsp;Assignment operator that will release the bucket this object forcing this pointer to reference another bucket.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxDeviceCachePtrDestructor">gxDeviceCachePtr::~gxDeviceCachePtr()</B></FONT>&nbsp;</A>-&nbsp;Class destructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="Alloc">MBTYPE *gxDeviceCachePtr::Alloc(unsigned bytes = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to reserve a cache bucket and automatically loads a specified number of bytes into the bucket from the input device the bucket is connected to. <B>NOTE</B>: If a zero byte value is specified no data will be read from the input device.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetInputDevice">gxDeviceTypes gxDeviceCachePtr::GetInputDevice()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the current input device. Returns an integer constant defined in the <A HREF="#gxDeviceTypesEnumeration">gxDeviceTypes</A> enumeration.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetOutputDevice">gxDeviceTypes gxDeviceCachePtr::GetOutputDevice()</A></B></FONT>&nbsp;-&nbsp;Public member function used to retrieve the current output device. Returns an integer constant defined in the <A HREF="#gxDeviceTypesEnumeration">gxDeviceTypes</A> enumeration.</P>
<B><FONT COLOR="#000080"><P><A NAME="Release">void gxDeviceCachePtr::Release()</A></B></FONT>&nbsp;-&nbsp;Public member function used to release the bucket this pointer is currently holding.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetCache">void gxDeviceCachePtr::SetCache(gxDeviceBucketCache *c)</A></B></FONT>&nbsp;-&nbsp;Public member function used to connect this pointer to a previously constructed cache object.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetInputDevice">void gxDeviceCachePtr::SetInputDevice(gxDeviceTypes dev)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the input device. The "dev" variable is used to set the input device and must correspond to one of the integer constants defined in the <A HREF="#gxDeviceTypesEnumeration">gxDeviceTypes</A> enumeration.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetOutputDevice">void gxDeviceCachePtr::SetOutputDevice(gxDeviceTypes dev)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the output device. The "dev" variable is used to set the output device and must correspond to one of the integer constants defined in the <A HREF="#gxDeviceTypesEnumeration">gxDeviceTypes</A> enumeration.</P>
<B><FONT COLOR="#000080"><P><A NAME="IndirectionOperator">gxDeviceBucket &amp; gxDeviceCachePtr::operator*()</A></B></FONT>&nbsp;-&nbsp;Overloaded indirection operator that allows device cache pointers to dereference the bucket this object is currently referencing.</P>
<B><FONT COLOR="#000080"><P><A NAME="ArrowOperator">gxDeviceBucket *gxDeviceCachePtr::operator-&gt;()</A></B></FONT>&nbsp;-&nbsp;Overloaded arrow operator used to reference a device cache pointer to the bucket it is currently referencing.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
