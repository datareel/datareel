<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:47:02 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>futils class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">File Utilities</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="#Constants">Constants</A><BR>
<A HREF="#Enumerations">Enumerations</A><BR>
<A HREF="#Structs">Data Structures</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The file utilities are a collection of data structures and standalone functions used to perform general-purpose platform independent file and directory functions.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="ConditionalDirectives"><B><FONT SIZE=4>Conditional Directives</A></B></FONT> </P>
<P>The following conditional directives are used to define non-portable file and directory routines that need to be ported between UNIX and WIN32 platforms.</P>
<B><P>__UNIX__</B> - Directive used for all UNIX compilers</P>
<B><P>__WIN32__</B> - Directive used for all WIN32 compilers</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Constants"><B><FONT SIZE=4>Constants</A></B></FONT> </P>
<P>Platform independent path and directory length constants.</P>
<PRE>const unsigned <B>futils_MAX_LINE_LENGTH</B> = 1024; // Max line length
const unsigned <B>futils_MAX_NAME_LENGTH</B> = 255;  // Max length of a file name
const unsigned <B>futils_MAX_DIR_LENGTH</B>  = 1024; // Max length of a directory name
const unsigned <B>futils_MAX_PATH_LENGTH</B> = 1024; // Max absolute or relative path</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Enumerations"><B><FONT SIZE=4>Enumerations</A></B></FONT> </P>
<PRE><A NAME="futilPermissionMode">typedef enum </A>{ 
  // Permission mode enumeration needed to set file permissions
  // when new files are created. 
  <B>futils_READONLY</B>,
  <B>futils_WRITEONLY</B>,
  <B>futils_READWRITE
</B>} futilPermissionMode;</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Structs"><B><FONT SIZE=4>Data Structures</A></B></FONT> </P>
<P>POSIX style directory entry for WIN32 platforms. </P>
<FONT COLOR="#008080"><PRE>typedef struct dirent {
  HANDLE d_ino;   // File number of entry 
  DWORD d_reclen; // Length of this record 
  DWORD d_namlen; // Length of string in d_name 
  char  d_name[futils_MAX_NAME_LENGTH]; // Name of this file 

  // WIN32 Specifics 
  WIN32_FIND_DATA file; // Describes a file found by a WIN32 find function 
} WIN32FileData;</PRE>
</FONT><P>POSIX style directory structure for WIN32 platforms. </P>
<FONT COLOR="#008080"><PRE>typedef struct {
  int dd_fd;            // optional file descriptor 
  DWORD dd_loc;         // file location in the directory stream 
  DWORD dd_size;        // file size  
  WIN32FileData dd_buf; // WIN32 file information 
  char dd_dirname[futils_MAX_NAME_LENGTH]; // Directory name 
} DIR;</PRE>
</FONT><P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<B><U><P>File and Directory Functions</B></U>:<BR>
<A HREF="#futils_chdir">futils_chdir()</A><BR>
<A HREF="#futils_chmod">futils_chmod()</A><BR>
<A HREF="#futils_filelength">futils_filelength()</A><BR>
<A HREF="#futils_exists">futils_exists()</A><BR>
<A HREF="#futils_genoutputfilename">futils_genoutputfilename()</A><BR>
<A HREF="#futils_getcwd">futils_getcwd()</A><BR>
<A HREF="#futils_hasdriveletter">futils_hasdriveletter()</A><BR>
<A HREF="#futils_isdirectory">futils_isdirectory()</A><BR>
<A HREF="#futils_isfile">futils_isfile()</A><BR>
<A HREF="#futils_makeDOSpath">futils_makeDOSpath()</A><BR>
<A HREF="#futils_makeUNIXpath">futils_makeUNIXpath()</A><BR>
<A HREF="#futils_mkdir">futils_mkdir()</A><BR>
<A HREF="#futils_pathsimplify">futils_pathsimplify()</A><BR>
<A HREF="#futils_remove">futils_remove()</A><BR>
<A HREF="#futils_rename">futils_rename()</A><BR>
<A HREF="#futils_rmdir">futils_rmdir()</A></P>
<B><U><P>Directory Stream Functions</B></U>:<BR>
<A HREF="#futils_closedir">futils_closedir()</A><BR>
<A HREF="#futils_opendir">futils_opendir()</A><BR>
<A HREF="#futils_readdir">futils_readdir()</A><BR>
<A HREF="#futils_rewinddir">futils_rewinddir()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="futils_chdir">int futils_chdir(const char *dir_name)</A></B></FONT>&nbsp;-&nbsp;Standalone function used to change directories. Returns zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_chmod">int futils_chmod(const char *fname, futilPermissionMode pmode)</A></B></FONT>&nbsp;-&nbsp;Standalone function used to change the file-permission settings. The "pmode" variable should be equal to futils_READONLY, futils_WRITEONLY, or futils_READWRITE. Returns a non-zero value if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_exists">int futils_exists(const char *name)</A></B></FONT>&nbsp;-&nbsp;Standalone function that tests to see if the specified directory or file name exists. Returns true if the file or directory exists.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_filelength">long futils_filelength(int fd)</A></B></FONT>&nbsp;-&nbsp;Standalone function that returns the file size, in bytes, for the specified file descriptor. Return a value of -1 to indicate an error.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_genoutputfilename">int futils_genoutputfilename(const char *current_file, char *out_file,char *extension)</A></B></FONT>&nbsp;-&nbsp;Standalone function used to generate a name for the output file using the "current_file" name with the specified dot extension. <B>NOTE</B>: This function assumes that the necessary memory has already been allocated for the "out_file" variable by the calling function. Returns a non-zero value if any errors occur.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_getcwd">int futils_getcwd(char *dir, unsigned max_len)</A></B></FONT>&nbsp;-&nbsp;Standalone function that passes back the present working directory in the "dir" variable. Returns 0 if no errors occur. <B>NOTE</B>: This function assumes that the required amount of memory has already been allocated for the "dir" pointer. The "max_len" value must be at least one byte greater than the length of the pathname to be returned.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_hasdriveletter">int futils_hasdriveletter(const char *dir_name, char *letter)</A></B></FONT>&nbsp;-&nbsp;WIN32 function used to parse the drive letter from the specified directory. Returns false if the path does not contain a drive letter. If a drive letter is found it will be passed back in the "letter" variable.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_isdirectory">int futils_isdirectory(const char *dir_name)</A></B></FONT>&nbsp;-&nbsp;Standalone function that returns true if the specified name is a directory.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_isfile">int futils_isfile(const char *fname)</A></B></FONT>&nbsp;-&nbsp;Standalone function that returns true if the specified name is any kind of file or false if this is a directory.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_makeDOSpath">void futils_makeDOSpath(char *path)</A></B></FONT>&nbsp;-&nbsp;Standalone function used to make a DOS directory path by changing all forward slash path separators to back slashes.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_makeUNIXpath">void futils_makeUNIXpath(char *path)</A></B></FONT>&nbsp;-&nbsp;Standalone function used to make a UNIX directory path by changing all back slash path separators to forward slashes.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_mkdir">int futils_mkdir(const char *dir_name)</A></B></FONT>&nbsp;-&nbsp;Standalone function used to make the specified directory (with sub-directories) if the directory does not exist. Returns a non-zero value if an error occurs. UNIX file systems will use 755 permissions when new directories are created.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_pathsimplify">void futils_pathsimplify(const char *path, char *new_path, char path_sep)</A></B></FONT>&nbsp;-&nbsp;Standalone function used to simplify a path and return a new path. The path separator should either be a forward slash for UNIX file systems or a backslash for DOS/WIN32 file systems. Multiple path separators will be collapsed to a single path separator. Leading `./' paths and trailing `/.' paths will be removed. Trailing path separators will be removed. All non-leading `../' paths and trailing `..' paths are handled by removing portions of the path. <B>NOTE</B>: This function assumes that the necessary memory has already been allocated for the "new_path" variable by the calling function.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_remove">int futils_remove(const char *fname)</A></B></FONT>&nbsp;-&nbsp;Standalone function used to remove the specified file. Returns zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_rename">int futils_rename(const char *oldname, const char *newname)</A></B></FONT>&nbsp;-&nbsp;Standalone function used to rename the specified file. Returns zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_rmdir">int futils_rmdir(const char *dir_name)</A></B></FONT>&nbsp;-&nbsp;Standalone function used to remove the specified directory. Returns zero if successful. The directory must be empty and not be the current working directory or the root directory</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_closedir">int futils_closedir(DIR *dirp)</A></B></FONT>&nbsp;-&nbsp;Standalone function used to close the directory stream referred to by the "dirp" argument. Returns zero upon successful completion or -1 if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_opendir">DIR *futils_opendir(const char *dirname)</A></B></FONT>&nbsp;-&nbsp;Standalone function used to open a directory stream corresponding to the directory named by the "dirname" argument. The directory stream is positioned at the first entry.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_readdir">struct dirent *futils_readdir(DIR *dirp)</A></B></FONT>&nbsp;-&nbsp;Standalone function that returns a pointer to a structure representing the directory entry at the current position in the directory stream specified by the "dirp" argument, and positions the directory stream at the next entry. It returns a null pointer upon reaching the end of the directory stream.</P>
<B><FONT COLOR="#000080"><P><A NAME="futils_rewinddir">void futils_rewinddir(DIR *dirp)</A></B></FONT>&nbsp;-&nbsp;Standalone function used to reset the position of the directory stream to which "dirp" refers to the beginning of the directory.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
