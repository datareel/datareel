<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:47:29 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>systime class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">System Time Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#Constants">Constants</A><BR>
<A HREF="#Enumerations">Enumerations</A><BR>
<A HREF="#Structs">Data Structures</A><BR>
<A HREF="#Functions">Functions</A><BR>
<A HREF="#StandaloneFunctions">Standalone Timer Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The SysTime class is used to convert the system time to various character string and integer formats.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="Constants">Constants</A></P>
</B></FONT><PRE>
// Year constants
const int <B>systimeYEAR_CONSTANT</B>      = 365;
const int <B>systimeLEAP_YEAR_CONSTANT</B> = 366;

// SysTime constants
const int <B>systimeSTART_YEAR</B> = 1900; // Starting year 
const int <B>systimeEND_YEAR</B> = 2038;   // Last valid year 

// Calender day constants
const int <B>systimeJANUARY</B>   = 31;
const int <B>systimeFEBUARY</B>   = 28;
const int <B>systimeFEB_LEAP</B>  = 29;
const int <B>systimeMARCH</B>     = 31;
const int <B>systimeAPRIL</B>     = 30;
const int <B>systimeMAY</B>       = 31;
const int <B>systimeJUNE</B>      = 30;
const int <B>systimeJULY</B>      = 31;
const int <B>systimeAUGUST</B>    = 31;
const int <B>systimeSEPTEMBER</B> = 30;
const int <B>systimeOCTOBER</B>   = 31;
const int <B>systimeNOVEMBER</B>  = 30;
const int <B>systimeDECEMBER</B>  = 31;</PRE>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="Enumerations">Enumerations</A></P>
</B></FONT><PRE>
<A NAME="TimeFormat">enum { // Time formats</A>
 SysTime::<B>AMPM</B>,             // AM or PM
 SysTime::<B>Date</B>,             // System date
 SysTime::<B>DayOfTheMonth</B>,    // Day of the month (01..31)
 SysTime::<B>DayOfTheWeek</B>,     // Day of the week (0..6, Sunday=0)
 SysTime::<B>Hour</B>,             // Hour (24 hour clock - 00..23)
 SysTime::<B>JDay</B>,             // Julian day
 SysTime::<B>Minutes</B>,          // Minutes (00..59)
 SysTime::<B>Month</B>,            // Month (01..12)
 SysTime::<B>FullMonthName</B>,    // Full month name 
 SysTime::<B>MonthName</B>,        // Abbreviated month name
 SysTime::<B>Seconds</B>,          // Seconds (00..59)
 SysTime::<B>SystemTime</B>,       // System time
 SysTime::<B>TimeZoneName</B>,     // Timezone name 
 SysTime::<B>WeekDayName</B>,      // Abbreviated weekday name
 SysTime::<B>FullWeekDayName</B>,  // Full weekday name
 SysTime::<B>WeekOfYearSF</B>,     // Week of the year (00..52, Sunday first)
 SysTime::<B>WeekOfYearMF</B>,     // Week of the year (00..52, Monday first)
 SysTime::<B>Year</B>,             // Year (0000..9999)
 SysTime::<B>YearXX</B>,           // Year (00..99)
 SysTime::<B>InvalidTimeFormat</B> = 0xffff // Error code for invalid format
};</PRE>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="Structs">Data Structures</A> </P>
</B></FONT><FONT COLOR="#008080"><PRE>// Time unit data structure used to store time values 
struct SysTimeUnit { 
  char *c_str_Hours(); 
  char *c_str_Minutes(); 
  char *c_str_Seconds();       
  char *c_str_Milliseconds();

  unsigned hours; 
  unsigned minutes; 
  unsigned seconds; 
  unsigned milliseconds; 
}; </PRE>
</FONT><P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#SysTime">SysTime::SysTime()</A><BR>
<A HREF="#DateSpan">SysTime::DateSpan()</A><BR>
<A HREF="#DaysOld">SysTime::DaysOld()</A><BR>
<A HREF="#FormatTime">SysTime::FormatTime()</A><BR>
<A HREF="#GetGMTDateTime">SysTime::GetGMTDateTime()</A><BR>
<A HREF="#GetIntTime">SysTime::GetIntTime()</A><BR>
<A HREF="#GetStrTime">SysTime::GetStrTime()</A><BR>
<A HREF="#GetSystemDate">SysTime::GetSystemDate()</A><BR>
<A HREF="#GetSystemDateTime">SysTime::GetSystemDateTime()</A><BR>
<A HREF="#GetSystemTime">SysTime::GetSystemTime()</A><BR>
<A HREF="#InitTimeBuffers">SysTime::InitTimeBuffers()</A><BR>
<A HREF="#IsLeapYear">SysTime::IsLeapYear()</A><BR>
<A NAME="SysTime"></P>
<B><FONT COLOR="#000080"><P>SysTime::SysTime()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="DateSpan">int SysTime::DateSpan(char *s, unsigned days, int full_month_name = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to calculate a date span from the current system time to the specified number of days. Returns false is an error occurs. This function assumes that memory has already been allocated for the "s" pointer.</P>
<B><FONT COLOR="#000080"><P><A NAME="DaysOld">int SysTime::DaysOld(int jday, int year)</A></B></FONT>&nbsp;-&nbsp;Public member function used to calculate the number of days that have passed since the specified Julian day and four digit year.</P>
<B><FONT COLOR="#000080"><P><A NAME="FormatTime">void SysTime::FormatTime(int Format)</A></B></FONT>&nbsp;-&nbsp;Public member function used to format the current system time. The "Format" variable must equal one of the integer constants defined in the <A HREF="#TimeFormat">time format</A> enumeration.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetGMTDateTime">char *SysTime::GetGMTDateTime()</A></B></FONT>&nbsp;-&nbsp;Public member function used to make a date string in GMT time rather then local time. Returns a null terminated date string: Tue, 15 Nov 1994 08:12:31 GMT</P>
<B><FONT COLOR="#000080"><P><A NAME="GetIntTime">int SysTime::GetIntTime(int Format)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns an integer value base on the specified time format. The "Format" variable must equal one of the integer constants defined in the <A HREF="#TimeFormat">time format</A> enumeration.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetStrTime">char *SysTime::GetStrTime(int Format)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a null-terminated string base on the specified time format. The "Format" variable must equal one of the integer constants defined in the <A HREF="#TimeFormat">time format</A> enumeration. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetSystemDate">char *SysTime::GetSystemDate(int full_month_name = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to copy the current system date into a null-terminated string.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetSystemDateTime">char *SysTime::GetSystemDateTime(int full_month_name = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to copy the current system time and date into a null-terminated string.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetSystemTime">char *SysTime::GetSystemTime()</A></B></FONT>&nbsp;-&nbsp;Public member function used to copy the current system time into a null-terminated string.</P>
<B><FONT COLOR="#000080"><P><A NAME="InitTimeBuffers">void SysTime::InitTimeBuffers()</A></B></FONT>&nbsp;-&nbsp;Public member function used to initialize the internal time buffers.</P>
<B><FONT COLOR="#000080"><P><A NAME="IsLeapYear">int SysTime::IsLeapYear(int year)</A></B></FONT>&nbsp;-&nbsp;Public member function used to calculate leap years using the Gregorian leap year formula: 365 + 1/4 - 1/100 + 1/400. Returns true if the specified year is a leap year.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="StandaloneFunctions">Standalone Timer Functions</A></P>
</FONT><FONT COLOR="#000080"><P>void systimeSleep(clock_t seconds) - </B></FONT>Pauses program for a specified number of seconds.</P>
<B><FONT COLOR="#000080"><P>void systimePauseFor(clock_t wait)</B></FONT> - Pauses program for a specified number of milliseconds. </P>
<B><FONT COLOR="#000080"><P>clock_t systimeStart()</B></FONT> - Mark the starting time for a routine.</P>
<B><FONT COLOR="#000080"><P>clock_t systimeStop()</B></FONT> - Mark the stop time for a routine. </P>
<B><FONT COLOR="#000080"><P>clock_t systimeElapsedSeconds(clock_t begin, clock_t end)</B></FONT> - Calculate the elapsed time in seconds.</P>
<B><FONT COLOR="#000080"><P>double systimeElapsedTime(clock_t begin, clock_t end)</B></FONT> - Calculate the elapsed time in milliseconds. </P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
