<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:47:24 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>terminal class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Independent Terminal Type Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="#Constants">Constants</A><BR>
<A HREF="#Macros">Macros</A><BR>
<A HREF="#CoordsClass">Coords Class</A><BR>
<A HREF="#TerminalClass">Terminal Class</A><BR>
<A HREF="#MSDOSWIN32Port">MSDOS/WIN32</A> </P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The Terminal class is a terminal interface designed to be portable between DOS and UNIX systems. On UNIX systems the curses library is used to create independent terminal type code. On MSDOS and Windows 95 systems the ANSI.SYS driver is used to simulate some of the basic functions in the curses library. </P>
<P>The curses library is a comprehensive API that allows an application to perform detailed terminal operations. A terminal is the logical input (keyboard) and output (screen) device through which character-based applications interact with the user. There are several types of terminals. Each type has different capabilities with respect to its display modes plus its input and output operations. On UNIX systems various terminal types can be emulated on the console or during telnet sessions. </P>
<P>Using the curses library a program you can manipulate text anywhere on the screen and use different display modes such as highlighting and accept input from the user without waiting for the user to press the Enter key. Console based programs do not have the capability to manipulate text on the screen and rely on buffered input. </P>
<P><HR></P>
<P><!-- New Section --><A NAME="ConditionalDirectives"><B><FONT SIZE=4>Conditional Directives</A></B></FONT> </P>
<B><P>__DOS__</B> - Directive required for all DOS compilers. </P>
<B><P>__UNIX__ </B>- Directive required for all UNIX compilers.</P>
<B><P>__WIN32__</B> - Directive required for all WIN32 compilers.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Constants"><B><FONT SIZE=4>Constants</A></B></FONT> </P>
<P>Key constants used the terminal class.</P>
<PRE>const int <B>termEscapeKey</B> = 27;</PRE>
<P><HR></P>
<P><A NAME="Macros"><!-- New Section --><B><FONT SIZE=4>Macros</B></FONT> </A></P>
<PRE>#define CONTROL(c) ((c) &amp; 037) // Ctrl-C macro</PRE>
<P><HR></P>
<P><A NAME="CoordsClass"><!-- New Section --><B><FONT SIZE=4>Coords Class</B></FONT> </A></P>
<P>The Coords class is provided for use within an application to maintain screen coordinates used to position text on the screen. </P>
<FONT COLOR="#008080"><PRE>
class Coords
{
public:
  Coords() { xpos = ypos = 0; }
  Coords(int x, int y) { xpos = x; ypos = y; }
  ~Coords() { }
  Coords(const Coords &amp;ob) { xpos = ob.xpos ; ypos = ob.ypos; }
  Coords &amp;operator=(const Coords &amp;ob) {
    xpos = ob.xpos ; ypos = ob.ypos; return *this;
  } 
  
public:
  int XPos() { return xpos; } // Current x coordinate
  int YPos() { return ypos; } // Current y coordinate 
  int XNext() { int x = xpos + 1; return x; } 
  int YNext() { int y = ypos + 1; return y; }
  int XPrev() { int x = xpos - 1; return x; }
  int YPrev() { int y = ypos - 1; return y; }
  int XOffset(int x) { xpos = xpos + x; return xpos; } 
  int YOffset(int y) { ypos = ypos + y; return ypos; }
  void SetXY(int x, int y) { xpos = x; ypos = y; }
  void SetX(int x) { xpos = x; }
  void SetY(int y) { ypos = y; }

private:
  int xpos;
  int ypos;
};
</PRE>
</FONT><P><HR></P>
<P><A NAME="TerminalClass"><!-- New Section --><B><FONT SIZE=4>Terminal Class</A></B></FONT> </P>
<P>The Terminal class is used to create terminal based user interfaces. A global pointer to a Terminal class object, named <B>terminal </B>is provided to perform all the necessary operations for the life of the program. </P>
<P>The Terminal class is designed work under both DOS/WIN32 and UNIX systems. The operating system is selected by defining one of the macros at compile time: <B>__DOS__</B>,<B> __WIN32__</B>, or <B>__UNIX__</B>. <B>NOTE</B>: on UNIX systems the following linker flags must be used when compiling a curses based program: </P>
<B><P>LFLAGS = -lcurses -ltermcap </P>
</B><P>Redhat Linux 5.2 requires ncurses-devel-4.2-10.i386.rpm</P>
<B><U><P>Termainal Class Functions</B></U>:<BR>
<A HREF="#ConstructorsDestructor">Class Constructors And Destructor</A><BR>
<A HREF="#StandardDialogs">Standard Dialogs</A><BR>
<A HREF="#SetupScreenOperations">Terminal Setup And Screen Operations</A><BR>
<A HREF="#OutputFunctions">Output Functions</A><BR>
<A HREF="#InputFunctions">Input Functions</A> </P>
<B><U><P><A NAME="ConstructorsDestructor">Class Constructors and Destructor</A></B></U>:<BR>
<B><FONT COLOR="#000080">Terminal::Terminal()</B></FONT> - Default class constructor. </P>
<B><FONT COLOR="#000080"><P>Terminal::~Terminal()</B></FONT> - Class destructor that does nothing. The application is responsible for closing the terminal session. </P>
<B><U><P><A NAME="StandardDialogs">Standard Dialogs</A></B></U>:<BR>
<B><FONT COLOR="#000080">int Terminal::YesNo(int x = -1, int y = -1)</B></FONT> - Public member function used to prompt the user for a "yes" or "no" input. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. Returns true if the user answers yes. </P>
<B><FONT COLOR="#000080"><P>int Terminal::YesNo(const char *s, int x = -1, int y = -1)</B></FONT> - Public member function used to prompt the user for a "yes" or "no" input, with a specified prompt. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. Returns true if the user answers yes. </P>
<B><FONT COLOR="#000080"><P>int Terminal::GetYesNo()</B></FONT> - Public member function used to wait for a "yes" or "no" input from the user with no prompt. Returns true if the user answers yes. </P>
<B><FONT COLOR="#000080"><P>void Terminal::AnyKey(int x = -1, int y = -1)</B></FONT> - Public member function used to prompt the user to press any key before continuing. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::AnyKey(const char *s, int x = -1, int y = -1)</B></FONT> - Public member function used to prompt the user to press any key before continuing, with a specified prompt. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><U><P><A NAME="SetupScreenOperations">Terminal Setup And Screen Operations</A></B></U>:<BR>
<B><FONT COLOR="#000080">void Terminal::init()</B></FONT> - Public member function used to initialize the curses library in raw mode with no echo. A simulated terminal initialization is performed under MSDOS. </P>
<B><FONT COLOR="#000080"><P>void Terminal::finish()</B></FONT> - Public member function used to end a terminal session. This function must be called before the program terminates. </P>
<B><FONT COLOR="#000080"><P>char *Terminal::GetTerm() </B></FONT>- public member function that returns the current <B>TERM</B> environment setting. </P>
<B><FONT COLOR="#000080"><P>int Terminal::MaxLines()</B></FONT> - Public member function that returns the maximum number of lines currently being used on the screen. </P>
<B><FONT COLOR="#000080"><P>int Terminal::MaxLines() const</B></FONT> - Public member function that returns the maximum number of lines currently being used on the screen. </P>
<B><FONT COLOR="#000080"><P>int Terminal::MaxCols()</B></FONT> - Public member function that returns the maximum number of columns currently being used on the screen. </P>
<B><FONT COLOR="#000080"><P>int Terminal::MaxCols() const </B></FONT>- Public member function that returns the maximum number of columns currently being used on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::SetMaxLines(int lines)</B></FONT> - Public member function used to set the maximum number of lines that can be used on the screen. This number cannot exceed the maximum number of lines set by the global <B>LINES</B> variable defined in the curses library. </P>
<B><FONT COLOR="#000080"><P>void Terminal::SetMaxCols(int cols)</B></FONT> - Public member function used to set the maximum number of columns that can be used on the screen. This number cannot exceed the maximum number of columns set by the global <B>COLS</B> variable defined in the curses library. </P>
<B><FONT COLOR="#000080"><P>void Terminal::MoveCursor(int x, int y) const</B></FONT> - Public member function used to move the cursor to the specified position. </P>
<B><FONT COLOR="#000080"><P>void Terminal::MoveCursor(int x, int y)</B></FONT> - Public member function used to move the cursor to the specified position. </P>
<B><FONT COLOR="#000080"><P>void Terminal::ClearScreen() const</B></FONT> - Public member function used to clear the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::ClearScreen()</B></FONT> - Public member function used to clear the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::ClearLine(int x = -1, int y = -1) const</B></FONT> - Public member function used to clear a single line. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::ClearLine(int x = -1, int y = -1)</B></FONT> - Public member function used to clear a single line. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>int Terminal::Center(const char *s) const</B></FONT> - Public member function used to center a line of text on the screen. </P>
<B><FONT COLOR="#000080"><P>int Terminal::Center(char *s)</B></FONT> - Public member function used to center a line of text on the screen. </P>
<B><FONT COLOR="#000080"><P>int Terminal::Right(const char *s) const</B></FONT> - Public member function used to right justify a line of text on the screen. </P>
<B><FONT COLOR="#000080"><P>int Terminal::Right(char *s)</B></FONT> - Public member function used to right justify a line of text on the screen. </P>
<B><FONT COLOR="#000080"><P>int Terminal::ScreenCenter(const int offset) const</B></FONT> - Public member function that returns the center coordinate of the screen starting at the specified offset. </P>
<B><FONT COLOR="#000080"><P>int Terminal::ScreenCenter(int offset)</B></FONT> - Public member function that returns the center coordinate of the screen starting at the specified offset. </P>
<B><U><P><A NAME="OutputFunctions">Output Functions</A></B></U>:<BR>
<B><FONT COLOR="#000080">void Terminal::Write(const char c, int x = -1, int y = -1) const</B></FONT> - Public member function used to write a single character to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::Write(char c, int x = -1, int y = -1)</B></FONT> - Public member function used to write a single character to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::Write(const unsigned char c, int x = -1, int y = -1) const</B></FONT> - Public member function used to write a single character to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::Write(unsigned char c, int x = -1, int y = -1)</B></FONT> - Public member function used to write a single character to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::Write(const char *s, int x = -1, int y = -1) const</B></FONT> - Public member function used to write a character string to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::Write(char *s, int x = -1, int y = -1)</B></FONT> - Public member function used to write a character string to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::Write(const long val, int x = -1, int y = -1) const</B></FONT> - Public member function used to write a long integer value to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::Write(long val, int x = -1, int y = -1)</B></FONT> - Public member function used to write a long integer value to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::Write(const int val, int x = -1, int y = -1) const</B></FONT> - Public member function used to write an integer value to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::Write(int val, int x = -1, int y = -1)</B></FONT> - Public member function used to write an integer value to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::Write(double val, int x = -1, int y = -1)</B></FONT> - Public member function used to write a double precision floating point value to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::Write(const double val, int x = -1, int y = -1) const</B></FONT> - Public member function used to write a double precision floating point value to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::Write(float val, int x = -1, int y = -1)</B></FONT> - Public member function used to write a single precision floating point value to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::Write(const float val, int x = -1, int y = -1) const</B></FONT> - Public member function used to write a single precision floating point value to the screen. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::StatusLine(const char *s) const</B></FONT> - Public member function used to write a status line of specified text on the last line of the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::StatusLine(char *s)</B></FONT> - Public member function used to write a status line of specified text on the last line of the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::StandOut(const char *s, int x = -1, int y = -1) const</B></FONT> - Public member function used to write a line of text in standout mode. <B>NOTE</B>: Standout mode does yield the same results on every terminal type. In order to maintain portability you should avoid using these functions in code that needs to maintain a universal appearance when executed across multiple platforms. </P>
<B><FONT COLOR="#000080"><P>void Terminal::StandOut(char *s, int x = -1, int y = -1)</B></FONT> - Public member function used to write a line of text in standout mode. <B>NOTE</B>: Standout mode does yield the same results on every terminal type. In order to maintain portability you should avoid using these functions in code that needs to maintain a universal appearance when executed across multiple platforms.</P>
<B><U><P><A NAME="InputFunctions">Input Functions</A></B></U>:<BR>
<B><FONT COLOR="#000080">int Terminal::KBWait() const</B></FONT> - Public member function used to allow the program to continue processing until the user interrupts by pressing any key. </P>
<B><FONT COLOR="#000080"><P>unsigned Terminal::char GetChar()</B></FONT> - Public member function used to get a single character from the keyboard (unbuffered) without waiting for the Enter key. This function will not accept any input if any characters are waiting to be put back due to a call to the Terminal::PutBack() function. </P>
<B><FONT COLOR="#000080"><P>void Terminal::GetString(char *string, int x = -1, int y = -1)</B></FONT> - Public member function used to allow the user to enter a single string. It was added to echo each character without having to turn the echo on. This will allow the user to edit the entry using the backspace or other defined keys. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::GetPassword(char *string, int x = -1, int y = -1)</B></FONT> - Public member function used to allow the user to enter a password string and echo an asterisk for each character typed. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>void Terminal::PutBack(char c)</B></FONT> - Public member function used to put back a keyboard character before another one is allowed to be entered with a call to the Termainl::GetChar() function. </P>
<B><FONT COLOR="#000080"><P>int Terminal::GetInt(int x = -1, int y = -1)</B></FONT> - Public member function used to allow the user to enter an integer value. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>long Terminal::GetLong(int x = -1, int y = -1)</B></FONT> - Public member function used to allow the user to enter a long integer value. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen. </P>
<B><FONT COLOR="#000080"><P>double Terminal::GetFloat(int x = -1, int y = -1)</B></FONT> - Public member function used to allow the user to enter a double precision floating point value. If the "x" and "y" coordinates are not given the cursor will remain at its current location on the screen.</P>
<P><HR></P>
<P><A NAME="MSDOSWIN32Port"><!-- New Section --><B><FONT SIZE=4>MSDOS/WIN32 Port</A></B></FONT> </P>
<P>The DOS/WIN32 port of the curses library is enabled by defining the <B>__DOS__</B> or <B>__WIN32__</B> macro at compile time. Several standalone functions are used to port this code from UNIX to DOS, Windows 3.11, and Windows 95/98. These functions are used to simulate the basic functionality of the vast curses library. All of these functions rely on the ANSI.SYS driver installed in the config.sys file: </P>
<B><P>DEVICEHIGH=C:\WINDOWS\COMMAND\ANSI.SYS</B> (Windows 95/98) </P>
<B><P>DEVICEHIGH=C:\DOS\ANSI.SYS</B> (DOS/Windows 3.11) </P>
<P>The maximum number of lines and columns set by the global variables <B>LINES</B> and <B>COLS</B> are always set to 25 and 80 respectively. Several definitions are used for further compatibility with the curses library: </P>
<PRE>
#ifndef TRUE
#define&#9;TRUE&#9;1
#endif
#ifndef FALSE
#define&#9;FALSE&#9;0
#endif
#ifndef ERR
#define&#9;ERR&#9;-1
#endif
#ifndef OK 
#define&#9;OK&#9;0
#endif</PRE>
<P>The following standalone functions are used to simulate the basic functionality of the curses library: </P>
<B><FONT COLOR="#000080"><P>int addch(const chtype c)</B></FONT> - Standalone function used to add a single character at the current cursor position. </P>
<B><FONT COLOR="#000080"><P>int addstr(const char *s)</B></FONT> - Standalone function used to add a text string at the current cursor position. </P>
<B><FONT COLOR="#000080"><P>int beep()</B></FONT> - Standalone function used to alert the user of an error condition. </P>
<B><FONT COLOR="#000080"><P>int clear()</B></FONT> - Standalone function used to clear the screen. </P>
<B><FONT COLOR="#000080"><P>int endwin()</B></FONT> - Standalone function used to close the terminal session before the program terminates. </P>
<B><FONT COLOR="#000080"><P>int move(int y, int x)</B></FONT> - Standalone function used to move the cursor to a specified position on the screen. </P>
<B><FONT COLOR="#000080"><P>int refresh()</B></FONT> - Standalone function used to refresh the screen after a move or add operation. </P>
<B><FONT COLOR="#000080"><P>int standend()</B></FONT> - Standalone function used to turn off stand out mode. </P>
<B><FONT COLOR="#000080"><P>int standout()</B></FONT> - Standalone function used to turn on stand out mode. </P>
<P>The following code is supplied for PC enhancements, used to emulate the effects of the video attribute functions in the curses library. All of the escape codes are compatible with vt100 terminals. </P>
<B><FONT COLOR="#000080"><P>void UnderlineText()</B></FONT> - Standalone function used to underline text displayed on the screen. </P>
<B><FONT COLOR="#000080"><P>void BoldText()</B></FONT> - Standalone function used to highlight text displayed on the screen in bold letters. </P>
<B><FONT COLOR="#000080"><P>void ReverseVideo()</B></FONT> - Standalone function used to highlight text displayed on the screen in reverse video. </P>
<B><FONT COLOR="#000080"><P>void NormalText()</B></FONT> - Standalone function used to reset the text mode to normal after a bold, underline, or reverse video operation.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
