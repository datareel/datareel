<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:46:40 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxstring class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">User Defined String Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="#TypeDefinitions">Type Definitions</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The gxString class is a user-defined string class used to create and manipulate null-terminated resizable character strings. By design you can use another string class in place of the user-defined string class simply by modifying the gxString type definition. This implementation allows you to use other existing string classes as required by your application.</P>
<P>By default the UString class is used to define the gxString type. The UString class includes a basic set of typical string class functions such as c_str(), length(), resize(), is_null, etc. It also incorporates several string manipulation and search functions plus several overloads that allow you to use UString objects like the built-in data types: char, int, long, float, and double. </P>
<P><HR></P>
<P><!-- New Section --><A NAME="ConditionalDirectives"><B><FONT SIZE=4>Conditional Directives</A></B></FONT> </P>
<P>The following conditional directives are used to define non-portable string routines that need to be ported between UNIX and WIN32 platforms.</P>
<B><P>__DOS__</B> - Directive used for all DOS compilers </P>
<B><P>__UNIX__</B> - Directive used for all UNIX compilers</P>
<B><P>__WIN32__</B> - Directive used for all WIN32 compilers</P>
<P><HR></P>
<P><!-- New Section --><A NAME="TypeDefinitions"><B><FONT SIZE=4>Type Definitions</A></B></FONT> </P>
<P>The "gxstring.h" uses the following type definition to define the type used for the UString class. By default the UString class is used:</P>
<PRE>typedef UString gxString;</PRE>
<P>This type definition allows you to substitute another string class for the UString class.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#UString">UString::UString()</A><BR>
<A HREF="#UStringDestructor">UString::~UString()</A><BR>
<A HREF="#Cat">UString::Cat()</A><BR>
<A HREF="#Clear">UString::Clear()</A><BR>
<A HREF="#DeleteAfter">UString::DeleteAfter()</A><BR>
<A HREF="#DeleteAfterIncluding">UString::DeleteAfterIncluding()</A><BR>
<A HREF="#DeleteAfterLast">UString::DeleteAfterLast()</A><BR>
<A HREF="#DeleteAfterLastIncluding">UString::DeleteAfterLastIncluding()</A><BR>
<A HREF="#DeleteAt">UString::DeleteAt()</A><BR>
<A HREF="#DeleteBefore">UString::DeleteBefore()</A><BR>
<A HREF="#DeleteBeforeIncluding">UString::DeleteBeforeIncluding()</A><BR>
<A HREF="#DeleteBeforeLast">UString::DeleteBeforeLast()</A><BR>
<A HREF="#DeleteBeforeLastIncluding">UString::DeleteBeforeLastIncluding()</A><BR>
<A HREF="#FilterChar">UString::FilterChar()</A><BR>
<A HREF="#FilterString">UString::FilterString()</A><BR>
<A HREF="#Find">UString::Find()</A><BR>
<A HREF="#FindLast">UString::FindLast()</A><BR>
<A HREF="#IFind">UString::IFind()</A><BR>
<A HREF="#InsertAt">UString::InsertAt()</A><BR>
<A HREF="#ReplaceAt">UString::ReplaceAt()</A><BR>
<A HREF="#ReplaceChar">UString::ReplaceChar()</A><BR>
<A HREF="#ReplaceString">UString::ReplaceString()</A><BR>
<A HREF="#SetString">UString::SetString()</A><BR>
<A HREF="#ToLower">UString::ToLower()</A><BR>
<A HREF="#ToUpper">UString::ToUpper()</A><BR>
<A HREF="#TrimLeadingSpaces">UString::TrimLeadingSpaces()</A><BR>
<A HREF="#TrimTrailingSpaces">UString::TrimTrailingSpaces()</A><BR>
<A HREF="#c_str">UString::c_str()</A><BR>
<A HREF="#is_null">UString::is_null()</A><BR>
<A HREF="#length">UString::length()</A><BR>
<A HREF="#resize">UString::resize()</A><BR>
<A HREF="#strdup">UString::strdup()</A><BR>
<A HREF="#OverloadedOperators">UString Overloaded Operators</A><BR>
<A HREF="#StandaloneFunctions">Standalone Helper Functions</A> </P>
<B><FONT COLOR="#000080"><P><A NAME="UString">UString::UString()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="UString_overload_1">UString::UString(const char *s, unsigned bytes = 0)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct a UString object and load the specified string in memory. The number of bytes allocated for the string is dependent on the string length, if this is a null terminated string, or the number of bytes specified. By Default this constructor assumes that "s" is a null terminated string. If a byte size is specified by the "bytes" variable the string is treated as raw pattern of bytes and a null terminator is not required.</P>
<B><FONT COLOR="#000080"><P><A NAME="UString_overload_2">UString::UString(unsigned bytes)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to allocate a specified number of bytes in memory for a string.</P>
<B><FONT COLOR="#000080"><P><A NAME="UString_overload_3">UString::UString(const UString &amp;s)</A></B></FONT>&nbsp;-&nbsp;Class copy constructor. This copy constructor does not use share semantics and guarantees that each copy will be unique.</P>
<B><FONT COLOR="#000080"><P><A NAME="UStringDestructor">UString::~UString()</A></B></FONT>&nbsp;-&nbsp;Class destructor responsible for freeing the memory allocated for this string object. </P>
<B><FONT COLOR="#000080"><P><A NAME="Cat">void UString::Cat(const char *s, unsigned bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to concatenate a specified number of bytes to the end of the object that invoked the call.</P>
<B><FONT COLOR="#000080"><P><A NAME="Cat_overload_1">void UString::Cat(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to concatenate a null terminated string to the end of the object that invoked the call.</P>
<B><FONT COLOR="#000080"><P><A NAME="Clear">void UString::Clear()</A></B></FONT>&nbsp;-&nbsp;Public member function used to clear this string without freeing its memory segment.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteAfter">int UString::DeleteAfter(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to delete everything after the specified string. Returns true if successful. </P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteAfterIncluding">int UString::DeleteAfterIncluding(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to delete everything after the specified string including the string itself. Returns true if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteAfterLast">int UString::DeleteAfterLast(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to delete everything after the last occurrence of the specified string. Returns true if the any characters were deleted.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteAfterLastIncluding">int UString::DeleteAfterLastIncluding(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to delete everything after the last occurrence of the specified string including the string itself. Returns true if the any characters were deleted.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteAt">unsigned UString::DeleteAt(unsigned position, unsigned bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to delete a specified number of bytes, starting at the specified position. Returns the number of bytes deleted.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteBefore">int UString::DeleteBefore(const char *s)</A></B></FONT>&nbsp;-&nbsp;-&nbsp;Public member function used to delete everything before the specified string. Returns true if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteBeforeIncluding">int UString::DeleteBeforeIncluding(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to delete everything before the specified string including the string itself. Returns true if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteBeforeLast">int UString::DeleteBeforeLast(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to delete everything before the last occurrence of the specified string. Returns true if the any characters were deleted.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteBeforeLastIncluding">int UString::DeleteBeforeLastIncluding(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to delete everything before the last occurrence of the specified string including the string itself. Returns true if the any characters were deleted.</P>
<B><FONT COLOR="#000080"><P><A NAME="FilterChar">unsigned UString::FilterChar(const char c, unsigned offset = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to filter the specified character from the object. Returns the number of characters filtered from the object.</P>
<B><FONT COLOR="#000080"><P><A NAME="FilterString">unsigned UString::FilterString(const char *s, unsigned offset = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to filter the specified string from the object. Returns the number of strings filtered from the object.</P>
<B><FONT COLOR="#000080"><P><A NAME="FilterString_overload_1">unsigned UString::FilterString(char *s, unsigned offset = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to filter the specified string from the object. Returns the number of strings filtered from the object.</P>
<B><FONT COLOR="#000080"><P><A NAME="Find">unsigned UString::Find(char *s, unsigned offset = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to find an occurrence of pattern "s" in this object. The search starts at the specified offset that will default to zero. Returns the index of the first occurrence or -1 if the string is not found.</P>
<B><FONT COLOR="#000080"><P><A NAME="Find_overload_1">unsigned UString::Find(char *s, unsigned bytes, unsigned offset)</A></B></FONT>&nbsp;-&nbsp;Public member function the uses a case sensitive compare to find an occurrence of a sequence of bytes in this object. The search starts at the specified offset. Returns the index of the first occurrence or -1 if the string is not found.</P>
<B><FONT COLOR="#000080"><P><A NAME="Find_overload_2">unsigned UString::Find(const UString &amp;s, unsigned offset = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to find an occurrence object "s" in this object. The search starts at the specified offset that will default to zero. Returns the index of the first occurrence or -1 if the string is not found.</P>
<B><FONT COLOR="#000080"><P><A NAME="Find_overload_3">unsigned UString::Find(const UString &amp;s, unsigned bytes, unsigned offset)</A></B></FONT>&nbsp;-&nbsp;Public member function the uses a case sensitive compare to find an occurrence of a sequence of bytes in this object. The search starts at the specified offset. Returns the index of the first occurrence or -1 if the string is not found.</P>
<B><FONT COLOR="#000080"><P><A NAME="FindLast">unsigned UString::FindLast(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the index of the last occurrence of string "s." Returns -1 if the string is not found.</P>
<B><FONT COLOR="#000080"><P><A NAME="FindLast_overload_1">unsigned UString::FindLast(char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the index of the last occurrence of string "s." Returns -1 if the string is not found.</P>
<B><FONT COLOR="#000080"><P><A NAME="IFind">unsigned UString::IFind(char *s, unsigned offset = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the index of first occurrence of string "s" starting at specified offset using a case insensitive compare. Returns the index of the first occurrence or -1 if the string is not found.</P>
<B><FONT COLOR="#000080"><P><A NAME="IFind_overload_1">unsigned UString::IFind(char *s, unsigned bytes, unsigned offset)</A></B></FONT>&nbsp;-&nbsp;Public member function the uses a case insensitive compare to find an occurrence of a sequence of bytes in this object. The search starts at the specified offset. Returns the index of the first occurrence or -1 if the string is not found.</P>
<B><FONT COLOR="#000080"><P><A NAME="IFind_overload_2">unsigned UString::IFind(const UString &amp;s, unsigned offset = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the index of first occurrence of object "s" starting at specified offset using a case insensitive compare. Returns the index of the first occurrence or -1 if the string is not found.</P>
<B><FONT COLOR="#000080"><P><A NAME="IFind_overload_3">unsigned UString::IFind(const UString &amp;s, unsigned bytes, unsigned offset)</A></B></FONT>&nbsp;-&nbsp;Public member function the uses a case insensitive compare to find an occurrence of a sequence of bytes in this object. The search starts at the specified offset. Returns the index of the first occurrence or -1 if the string is not found.</P>
<B><FONT COLOR="#000080"><P><A NAME="InsertAt">unsigned UString::InsertAt(unsigned position, const char *s, unsigned bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to insert a bytes sequence starting at the specified position. Returns the number of bytes inserted.</P>
<B><FONT COLOR="#000080"><P><A NAME="InsertAt_overload_1">unsigned UString::InsertAt(unsigned position, const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to insert a null terminated string starting at the specified position. Returns the number of bytes inserted.</P>
<B><FONT COLOR="#000080"><P><A NAME="InsertAt_overload_2">unsigned UString::InsertAt(unsigned position, const UString &amp;s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to insert a string object starting at the specified position. Returns the number of bytes inserted.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReplaceAt">unsigned UString::ReplaceAt(unsigned position, const char *s, unsigned bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used to replace a byte sequence starting at the specified position. Returns the number of bytes replaced.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReplaceAt_overload_1">unsigned UString::ReplaceAt(unsigned position, const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to replace a null terminated string starting at the specified position. Returns the number of bytes replaced.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReplaceAt_overload_2">unsigned UString::ReplaceAt(unsigned position, const UString &amp;s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to replace a string object starting at the specified position. Returns the number of bytes replaced.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReplaceChar">unsigned UString::ReplaceChar(const char c, const char replacement,unsigned offset = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to replace every occurrence of the specified character starting at the specified offset. Returns the number of characters replaced in the string.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReplaceString">unsigned UString::ReplaceString(const char *s, const char *replacement,unsigned offset = 0)</A></B></FONT>&nbsp;- Public member function used to replace every occurrence of the specified string starting at the specified offset. Returns the number of strings replaced. </P>
<B><FONT COLOR="#000080"><P><A NAME="ReplaceString_overload_1">unsigned UString::ReplaceString(char *s, char *replacement, unsigned offset = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to replace every occurrence of the specified string starting at the specified offset. Returns the number of strings replaced.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetString">int UString::SetString(const char *s, unsigned bytes = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the string value for this object. This function will try to re-use the current memory segment allocated for this string before re-allocating memory for the string. Returns true if successful or false if an error occurs. <B>NOTE</B>: The UString class guarantees that each object is unique by storing a unique copy of the string with each object. This ensures that UString objects can be safely copy constructed, assigned, resized, and deleted by multiple threads. Multiple threads accessing shared memory segments must be handled by the application.</P>
<B><FONT COLOR="#000080"><P><A NAME="ToLower">int UString::ToLower()</A></B></FONT>&nbsp;-&nbsp;Public member function used to change all characters in the string to lower case. Returns true if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="ToUpper">int UString::ToUpper()</A></B></FONT>&nbsp;-&nbsp;Public member function used to change all characters in the string to upper case. Returns true if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="TrimLeadingSpaces">unsigned UString::TrimLeadingSpaces()</A></B></FONT>&nbsp;-&nbsp;Public member function used to filter all leading spaces from a string. Returns the number of spaces filtered. </P>
<B><FONT COLOR="#000080"><P><A NAME="TrimTrailingSpaces">unsigned UString::TrimTrailingSpaces()</A></B></FONT>&nbsp;-&nbsp;Public member function used to filter all trailing spaces from a string. Returns the number of spaces filtered.</P>
<B><FONT COLOR="#000080"><P><A NAME="c_str">char *UString::c_str()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the null terminated string this object is referencing.</P>
<B><FONT COLOR="#000080"><P><A NAME="is_null">int UString::is_null()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if this string is null.</P>
<B><FONT COLOR="#000080"><P><A NAME="length">unsigned UString::length()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the string length of this string.</P>
<B><FONT COLOR="#000080"><P><A NAME="resize">int UString::resize(unsigned bytes , int keep = 1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to resize the logical length of the buffer. If the "keep" variable is true the old data will be copied into the new space. By default the old data will not be deleted. Returns true if successful or false if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="strdup">UString *UString::strdup()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a duplicate string object or a null value if an error occurs.</P>
<B><U><P><A NAME="OverloadedOperators">Overloaded operators</A></B></U>:<BR>
<B><FONT COLOR="#000080">UString &amp;UString::operator=(const UString &amp;buf)</B></FONT>&nbsp;-&nbsp;Class assignment operator. This assignment operator does not use share semantics and guarantees that each copy will be unique.</P>
<B><FONT COLOR="#000080"><P>UString &amp;UString::operator=(const char *s)</B></FONT>&nbsp;-&nbsp;Class assignment operator used to assign this object to a null terminated string. This assignment operator does not use share semantics and guarantees that each copy will be unique.</P>
<B><FONT COLOR="#000080"><P>int UString::operator!() </FONT>- </B>Overloaded not operator that returns true if the buffer is null.</P>
<B><FONT COLOR="#000080"><P>operator UString::int () </FONT>- </B>Conversion function that returns true if the buffer is not null. </P>
<B><FONT COLOR="#000080"><P>char &amp;UString::operator[ ](unsigned i)</B></FONT> - Overloaded subscript operator used to ensure that an index is in range before subscripting this object's string data.</P>
<B><FONT COLOR="#000080"><P>void UString::operator+=(const UString &amp;s)</B></FONT> - Overloaded member operator used to concatenate the string data of object "s" to the end of the object that invoked the call. </P>
<B><FONT COLOR="#000080"><P>void UString::operator+=(const char *s)</B></FONT> - Overloaded member operator used to concatenate a null terminated string to the end of the object that invoked the call </P>
<B><FONT COLOR="#000080"><P>void UString::operator+=(const char c)</B></FONT> - Overloaded member operator used to concatenate the a single character to the end of the object that invoked the call </P>
<B><FONT COLOR="#000080"><P>friend ostream &amp;operator&lt;&lt;(ostream &amp;os, const UString &amp;s)</B></FONT> - Overloaded operator used to convert a UString type into an ostream type. </P>
<B><FONT COLOR="#000080"><P>friend istream &amp;operator&gt;&gt;(istream &amp;os, UString &amp;s)</B></FONT> - Overloaded operator used to convert a UString type into an istream type. </P>
<B><FONT COLOR="#000080"><P>friend UString operator+(const UString &amp;a, const UString &amp;b)</B></FONT> - Overloaded operator used to add two UString objects together. </P>
<B><FONT COLOR="#000080"><P>friend int operator==(const UString &amp;a, const UString &amp;b)</B></FONT> - Overloaded operator that returns true if its operands are equal to each other. </P>
<B><FONT COLOR="#000080"><P>friend int operator!=(const UString &amp;a, const UString &amp;b)</B></FONT> - Overloaded operator that returns true if its operands are not equal to each other. </P>
<B><FONT COLOR="#000080"><P>friend int operator&gt;(const UString &amp;a, const UString &amp;b)</B></FONT> - Overloaded operator that returns true if its operand "a" is greater then "b." </P>
<B><FONT COLOR="#000080"><P>friend int operator&gt;=(const UString &amp;a, const UString &amp;b)</B></FONT> - Overloaded operator that returns true if its operand "a" is greater then or equal to "b." </P>
<B><FONT COLOR="#000080"><P>friend int operator&lt;(const UString &amp;a, const UString &amp;b)</B></FONT> - Overloaded operator that returns true if its operand "a" is less then "b." </P>
<B><FONT COLOR="#000080"><P>friend int operator&lt;=(const UString &amp;a, const UString &amp;b)</B></FONT> - Overloaded operator that returns true if its operand "a" is less then or equal to "b." </P>
<B><U><P><A NAME="StandaloneFunctions">Standalone Helper Functions</A></B></U>:<BR>
<B><FONT COLOR="#000080">int CaseICmp(const UString &amp;s1, const UString &amp;s2)</B></FONT> - Compare two UString objects without regard to the case of the letters. Returns -1 if a &lt; b, 0 if a == b, and 1 if a &gt; b </P>
<B><FONT COLOR="#000080"><P>int CaseICmp(const UString &amp;s1, const char *s)</B></FONT> - Compare a UString object to a null terminated string without regard to the case of the letters. Returns -1 if a &lt; b, 0 if a == b, and 1 if a &gt; b</P>
<B><FONT COLOR="#000080"><P>int CaseICmp(const char *s, const UString &amp;s2)</B></FONT> - Compare a null terminated string to a UString object without regard to the case of the letters. Returns -1 if a &lt; b, 0 if a == b, and 1 if a &gt; b</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
