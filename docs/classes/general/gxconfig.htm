<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:46:51 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxconfig class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Configuration Manager</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The configuration manager class is used to load program parameters from a text based (ASCII) configuration file. This allows specified program parameters to be changed without having to recompile the program. Users or the program itself can customize the application simply by modifying the text based configuration file named within the application. </P>
<P>Each configurable parameter is assigned a case-sensitive name in the file followed by an equal sign, then a value. The first character of a parameter name must be alphanumeric. If the first character is not alphanumeric the line will be ignored. The configuration manager can read strings, integer, or floating point values from the text file. A number sign or a semicolon precedes comments in the configuration file. The following is an example of a program configuration file: </P>
<FONT COLOR="#008080"><PRE>
# Define a signed long integer value 
Long=2147483647 # This comment will be ignored
                                                            
# Define a signed short integer value 
Int = 32768                                

# Define a double precision floating point value
Float= 1.12345
                                                                 
# Define a character string value
String=YES                                                  </PRE>
</FONT><P>There can only be one instance of a parameter name in the file. If a parameter is named two or more times, the configuration manager will use the first one it finds and ignore all others. Limits and default values for each parameter must be defined within the application itself. The application is responsible for creating the configurable parameters in the file. This version of the configuration manager allows you to update any changes to existing values. If the parameter you are changing does not exist, the parameter name and value will be written to the configuration file.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="ConditionalDirectives"><B><FONT SIZE=4>Conditional Directives</A></B></FONT> </P>
<P>The following conditional directives are used to define non-portable file routines that need to be ported between UNIX and WIN32 platforms.</P>
<B><P>__UNIX__</B> - Directive used for all UNIX compilers</P>
<B><P>__WIN32__</B> - Directive used for all WIN32 compilers</P>
<B><P>__BCC32__</B> - Directive required for all BCC32 compilers</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxConfig">gxConfig::gxConfig()</A><BR>
<A HREF="#BM_gxConfig">gxConfig::~gxConfig()</A><BR>
<A HREF="#ChangeConfigValue">gxConfig::ChangeConfigValue()</A><BR>
<A HREF="#FilterComments">gxConfig::FilterComments()</A><BR>
<A HREF="#GetCommentChar">gxConfig::GetCommentChar()</A><BR>
<A HREF="#GetDFPValue">gxConfig::GetDFPValue()</A><BR>
<A HREF="#GetFileName">gxConfig::GetFileName()</A><BR>
<A HREF="#GetFloatValue">gxConfig::GetFloatValue()</A><BR>
<A HREF="#GetIntValue">gxConfig::GetIntValue()</A><BR>
<A HREF="#GetLongValue">gxConfig::GetLongValue()</A><BR>
<A HREF="#GetParmID">gxConfig::GetParmID()</A><BR>
<A HREF="#GetStrValue">gxConfig::GetStrValue()</A><BR>
<A HREF="#Load">gxConfig::Load()</A><BR>
<A HREF="#ReLoad">gxConfig::ReLoad()</A><BR>
<A HREF="#ReadComments">gxConfig::ReadComments()</A><BR>
<A HREF="#SetCommentChar">gxConfig::SetCommentChar()</A><BR>
<A HREF="#SetFileName">gxConfig::SetFileName()</A><BR>
<A HREF="#SetParmID">gxConfig::SetParmID()</A><BR>
<A HREF="#UnLoad">gxConfig::UnLoad()</A><BR>
<A HREF="#WriteCommentLine">gxConfig::WriteCommentLine()</A><BR>
<A HREF="#WriteConfigLine">gxConfig::WriteConfigLine()</A><BR>
<A HREF="#WriteLine">gxConfig::WriteLine()</A><BR>
<A NAME="gxConfig"></P>
<B><FONT COLOR="#000080"><P>gxConfig::gxConfig()</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct a configuration file object.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxConfig_overload_1">gxConfig::gxConfig(const gxString &amp;fname)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct a configuration file object and set the name of the configuration file.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxConfig_overload_2">gxConfig::gxConfig(char *fname)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct a configuration file object and set the name of the configuration file.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxConfig_overload_3">gxConfig::gxConfig(const char *fname)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct a configuration file object and set the name of the configuration file.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxConfig_overload_4">gxConfig::gxConfig(const gxString &amp;fname, const gxString &amp;p_id)</A></B></FONT>&nbsp;-&nbsp;<A NAME="gxConfig_overload_5">Class constructor used to construct a configuration file object and set the name of the configuration file and the string value that will be used to identify parameter values within the file.</P>
<B><FONT COLOR="#000080"><P>gxConfig::gxConfig(const gxString &amp;fname, char *p_id)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct a configuration file object and set the name of the configuration file and the string value that will be used to identify parameter values within the file. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxConfig_overload_6">gxConfig::gxConfig(const gxString &amp;fname, const char *p_id)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to construct a configuration file object and set the name of the configuration file and the string value that will be used to identify parameter values within the file.</P>
<B><FONT COLOR="#000080"><P><A NAME="BM_gxConfig">gxConfig::~gxConfig()</A></B></FONT>&nbsp;-&nbsp;Class destructor responsible for clearing the list and de-allocating all the nodes when a gxConfig object is destroyed.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue">int gxConfig::ChangeConfigValue(const gxString &amp;parm, const gxString &amp;value)</A></B></FONT>&nbsp;- Public member function used to a modify a configuration file user-defined string value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_1">int gxConfig::ChangeConfigValue(const char *parm, const gxString &amp;value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_10">int gxConfig::ChangeConfigValue(const gxString &amp;parm, unsigned value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_11">int gxConfig::ChangeConfigValue(const char *parm, unsigned value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_12">int gxConfig::ChangeConfigValue(char *parm, unsigned value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_13">int gxConfig::ChangeConfigValue(const gxString &amp;parm, long value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_14">int gxConfig::ChangeConfigValue(const char *parm, long value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_15">int gxConfig::ChangeConfigValue(char *parm, long value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_16">int gxConfig::ChangeConfigValue(const gxString &amp;parm, float value)</A></B></FONT>&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_17">int gxConfig::ChangeConfigValue(const char *parm, float value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_18">int gxConfig::ChangeConfigValue(char *parm, float value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_19">int gxConfig::ChangeConfigValue(const gxString &amp;parm, double value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_2">int gxConfig::ChangeConfigValue(const gxString &amp;parm, const char *value)</A></B></FONT>&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_20">int gxConfig::ChangeConfigValue(const char *parm, double value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_21">int gxConfig::ChangeConfigValue(char *parm, double value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_3">int gxConfig::ChangeConfigValue(char *parm, const gxString &amp;value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_4">int gxConfig::ChangeConfigValue(const gxString &amp;parm, char *value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_5">int gxConfig::ChangeConfigValue(const char *parm, const char *value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_6">int gxConfig::ChangeConfigValue(char *parm, char *value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_7">int gxConfig::ChangeConfigValue(const gxString &amp;parm, int value)</A></B></FONT>&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID.<A NAME="ChangeConfigValue_overload_8"></P>
<B><FONT COLOR="#000080"><P>int gxConfig::ChangeConfigValue(const char *parm, int value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeConfigValue_overload_9">int gxConfig::ChangeConfigValue(char *parm, int value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a modify a configuration file value. <B>NOTE</B>: All parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configuration file parameter. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="FilterComments">void gxConfig::FilterComments()</A></B></FONT>&nbsp;-&nbsp;Public member function used to force the configuration manager to ignore all lines starting with a comment ID when the configuration file is loaded from disk. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetCommentChar">char gxConfig::GetCommentChar()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the character value currently being used by the configuration manager to filter comments from a file.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetDFPValue">double gxConfig::GetDFPValue(char *Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a double precision floating point value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns zero if the parameter name is not found. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetDFPValue_overload_1">double gxConfig::GetDFPValue(const char *Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a double precision floating point value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns zero if the parameter name is not found. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetDFPValue_overload_2">double gxConfig::GetDFPValue(const gxString &amp;Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a double precision floating point value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns zero if the parameter name is not found. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetFileName">char *gxConfig::GetFileName()</A></B></FONT>&nbsp;-&nbsp;Public member function used to get the name of the current configuration file.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetFloatValue">double gxConfig::GetFloatValue(char *Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a double precision floating point value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns zero if the parameter name is not found. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetFloatValue_overload_1">double gxConfig::GetFloatValue(const char *Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a double precision floating point value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns zero if the parameter name is not found. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetFloatValue_overload_2">double gxConfig::GetFloatValue(const gxString &amp;Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a double precision floating point value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns zero if the parameter name is not found. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetIntValue">int gxConfig::GetIntValue(char *Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read an integer value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns zero if the parameter name is not found. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetIntValue_overload_1">int gxConfig::GetIntValue(const char *Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read an integer value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns zero if the parameter name is not found. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetIntValue_overload_2">int gxConfig::GetIntValue(const gxString &amp;Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read an integer value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns zero if the parameter name is not found.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetLongValue">long gxConfig::GetLongValue(char *Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a long integer value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns zero if the parameter name is not found.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetLongValue_overload_1">long gxConfig::GetLongValue(const char *Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a long integer value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns zero if the parameter name is not found. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetLongValue_overload_2">long gxConfig::GetLongValue(const gxString &amp;Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a long integer value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns zero if the parameter name is not found. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetParmID">char *gxConfig::GetParmID()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the character string currently being used by the configuration manager to identify configurable parameters. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetStrValue">char* gxConfig::GetStrValue(char *Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a string value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns a null value if the parameter name is not found. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetStrValue_overload_1">char* gxConfig::GetStrValue(const char *Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a string value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns a null value if the parameter name is not found. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetStrValue_overload_2">char* gxConfig::GetStrValue(const gxString &amp;Name, int fn=1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a string value from the configurable parameter list loaded in memory by the <A HREF="#Load">gxConfig::Load()</A> function. This function searches for the configurable parameter list based on the "Name" variable and will search using the full name unless the "fn" variable is false. Returns a null value if the parameter name is not found. </P>
<B><FONT COLOR="#000080"><P><A NAME="Load">int gxConfig::Load()</A></B></FONT>&nbsp;-&nbsp;Public member function used to load all the configurable names and values after the configuration file has been named by the gxConfig class constructor or a call to the <A HREF="#SetFileName">gxConfig::SetFileName()</A> function. Returns false if the file cannot be opened or a memory allocation error occurred. </P>
<B><FONT COLOR="#000080"><P><A NAME="Load_overload_1">int gxConfig::Load(char *fname)</A></B></FONT>&nbsp;-&nbsp;Public member function used to load all the configurable names and values from the specified file. Returns false if the file cannot be opened or a memory allocation error occurred. </P>
<B><FONT COLOR="#000080"><P><A NAME="Load_overload_2">int gxConfig::Load(const char *fname)</A></B></FONT>&nbsp;-&nbsp;Public member function used to load all the configurable names and values from the specified file. Returns false if the file cannot be opened or a memory allocation error occurred.</P>
<B><FONT COLOR="#000080"><P><A NAME="Load_overload_3">int gxConfig::Load(const gxString &amp;fname)</A></B></FONT>&nbsp;-&nbsp;Public member function used to load all the configurable names and values from the specified file. Returns false if the file cannot be opened or a memory allocation error occurred. </P>
<B><FONT COLOR="#000080"><P><A NAME="ReLoad">int gxConfig::ReLoad()</A></B></FONT>&nbsp;-&nbsp;Public member function used to reload the configurable names and values after the configuration file has been named by the gxConfig class constructor or a call to the <A HREF="#SetFileName">gxConfig::SetFileName()</A> function. Returns false if the file cannot be opened or a memory allocation error occurred. </P>
<B><FONT COLOR="#000080"><P><A NAME="ReLoad_overload_1">int gxConfig::ReLoad(char *fname)</A></B></FONT>&nbsp;-&nbsp;Public member function used to reload configurable names and values from the specified file. Returns false if the file cannot be opened or a memory allocation error occurred. </P>
<B><FONT COLOR="#000080"><P><A NAME="ReLoad_overload_2">int gxConfig::ReLoad(const char *fname)</A></B></FONT>&nbsp;-&nbsp;Public member function used to reload configurable names and values from the specified file. Returns false if the file cannot be opened or a memory allocation error occurred. </P>
<B><FONT COLOR="#000080"><P><A NAME="ReLoad_overload_3">int gxConfig::ReLoad(const gxString &amp;fname)</A></B></FONT>&nbsp;-&nbsp;Public member function used to reload configurable names and values from the specified file. Returns false if the file cannot be opened or a memory allocation error occurred. </P>
<B><FONT COLOR="#000080"><P><A NAME="ReadComments">void gxConfig::ReadComments()</A></B></FONT>&nbsp;-&nbsp;Public member function used to force the configuration manager to read all lines starting with a comment ID when the configuration file is loaded from disk.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetCommentChar">void gxConfig::SetCommentChar(char c)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the character value used by the configuration manager to identify comment strings in the configuration file.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetFileName">void gxConfig::SetFileName(const gxString &amp;s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the name of the configuration file.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetFileName_overload_1">void gxConfig::SetFileName(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the name of the configuration file. </P>
<B><FONT COLOR="#000080"><P><A NAME="SetFileName_overload_2">void gxConfig::SetFileName(char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the name of the configuration file. </P>
<B><FONT COLOR="#000080"><P><A NAME="SetParmID">void gxConfig::SetParmID(const gxString &amp;s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the string value used by the configuration manager to identify configurable parameters in the configuration file. By default an equal sign will be used as a parameter ID.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetParmID_overload_1">void gxConfig::SetParmID(char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the string value used by the configuration manager to identify configurable parameters in the configuration file. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="SetParmID_overload_2">void gxConfig::SetParmID(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the string value used by the configuration manager to identify configurable parameters in the configuration file. By default an equal sign will be used as a parameter ID. </P>
<B><FONT COLOR="#000080"><P><A NAME="StoreCfgData"><A NAME="UnLoad"></A>void gxConfig::UnLoad()</A></B></FONT>&nbsp;-&nbsp;Public member function used to unload all the configurable names and values from memory. </P>
<B><FONT COLOR="#000080"><P><A NAME="WriteCommentLine">int gxConfig::WriteCommentLine(const gxString &amp;s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a comment line to the configuration file. <B>NOTE</B>: Do not include the comment ID character. The comment ID will by automatically inserted. Returns zero if an error occurs or one to indicate that the line was written successfully.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteCommentLine_overload_1">int gxConfig::WriteCommentLine(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a comment line to the configuration file. <B>NOTE</B>: Do not include the comment ID character. The comment ID will by automatically inserted. Returns zero if an error occurs or one to indicate that the line was written successfully. </P>
<B><FONT COLOR="#000080"><P><A NAME="WriteCommentLine_overload_2">int gxConfig::WriteCommentLine(char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a comment line to the configuration file. <B>NOTE</B>: Do not include the comment ID character. The comment ID will by automatically inserted. Returns zero if an error occurs or one to indicate that the line was written successfully.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteConfigLine">int gxConfig::WriteConfigLine(const gxString &amp;parm, const gxString &amp;value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a line to the configuration file. <B>NOTE</B>: Parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configurable file parameter. By default an equal sign will be used as a parameter ID. Returns zero if an error occurs or one to indicate that the line was written successfully.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteConfigLine_overload_1">int gxConfig::WriteConfigLine(const char *parm, const char *value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a line to the configuration file. <B>NOTE</B>: Parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configurable file parameter. By default an equal sign will be used as a parameter ID. Returns zero if an error occurs or one to indicate that the line was written successfully.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteConfigLine_overload_2">int gxConfig::WriteConfigLine(char *parm, char *value)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a line to the configuration file. <B>NOTE</B>: Parameter values should not contain a parameter ID label at the end of the string. The parameter ID label will be added to mark it as a configurable file parameter. By default an equal sign will be used as a parameter ID. Returns zero if an error occurs or one to indicate that the line was written successfully.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteLine">int gxConfig::WriteLine(const gxString &amp;s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a line of text to the configuration file. Returns zero if an error occurs or one to indicate that the line was written successfully.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteLine_overload_1">int gxConfig::WriteLine(const char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a line of text to the configuration file. Returns zero if an error occurs or one to indicate that the line was written successfully.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteLine_overload_2">int gxConfig::WriteLine(char *s)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a line of text to the configuration file. Returns zero if an error occurs or one to indicate that the line was written successfully.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
