<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:46:35 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>htmldrv class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">HTML Driver</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#Constants">Constants</A><BR>
<A HREF="#Enumerations">Enumerations</A><BR>
<A HREF="#ostreamFunctions">C++ ostream Functions</A><BR>
<A HREF="#HyperTextBase">Hypertext Base Class</A> <BR>
<A HREF="#HyperTextClass">Hypertext Class</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The hypertext driver classes are used to generate HTML documents from within a C++ program. The hypertext driver class is a base class that uses the C++ ostream library to write HTML tags and text to a specified stream. The hypertext class is used to write HTML document templates to a specified stream.</P>
<P><HR></P>
<P><A NAME="Constants"><!-- New Section --><B><FONT SIZE=4>Constants</A></P>
</B></FONT><PRE>const int <B>DefaultPrecision</B> = 2; // Default precision for floating points</PRE>
<P><HR></P>
<P><!-- New Section --><A NAME="Enumerations"><B><FONT SIZE=4>Enumerations</A></B></FONT> </P>
<PRE>// Define some common HTML colors
const int NumHTMLColors = 16;
enum <A NAME="htmCOLORS">htmCOLORS</A> { 
  <B>htmBLACK</B>       = 0x000000,
  <B>htmDARKBLUE</B>    = 0x000080,
  <B>htmBLUE</B>        = 0x0000ff,
  <B>htmGREEN</B>       = 0x008000,
  <B>htmTEAL</B>        = 0x008080,
  <B>htmBRIGHTGREEN</B> = 0x00ff00,
  <B>htmTURQUOISE</B>   = 0x00ffff,
  <B>htmDARKRED</B>     = 0x800000,
  <B>htmVIOLET</B>      = 0x800080,
  <B>htmDARKYELLOW</B>  = 0x808000,
  <B>htmDARKGRAY</B>    = 0x808080,
  <B>htmGRAY</B>        = 0xC0C0C0,
  <B>htmRED</B>         = 0xff0000,
  <B>htmPINK</B>        = 0xff00ff,
  <B>htmYELLOW</B>      = 0xffff00,
  <B>htmWHITE</B>       = 0xffffff
};

// Define some common HTML fonts
const int NumHTMLFonts = 4;
enum <A NAME="htmFONTS">htmFONTS</A> {
  <B>htmARIAL</B>,       // Arial
  <B>htmARIALBLACK</B>,  // Arial Black
  <B>htmARIALNARROW</B>, // Arial Narrow
  <B>htmCOURIER</B>      // Courier New
};</PRE>
<P><HR></P>
<P><!-- New Section --><B><FONT SIZE=4>C++ <A NAME="ostreamFunctions">ostream Functions</A></B></FONT> </P>
<P>The ostream functions are inline functions that operate the same way that the standard I/O manipulators do in C++. This allows you to format the I/O within an I/O statement relative to the text that has special meaning in an HTML document, for example:</P>
<PRE>stream &lt;&lt; center &lt;&lt; "Mytext Document" &lt;&lt; ecenter &lt;&lt; endl;</PRE>
<P>In this example the line of text will be centered in the document. Each HTML manipulator is named after its respective tag in lower case letters and will always end with the letter "e". The following is a list of all the HTML manipulators provided:</P>
<P><A HREF="#SpecialMeaning">Manipulators used to print characters with special meaning</A><BR>
<A HREF="#SpecialCharacters">Manipulators used to print special characters</A><BR>
<A HREF="#HMTLtags">Manipulators used to create HMTL tags</A><BR>
<A HREF="#FormattingManipulators">HTML document formatting manipulators</A><BR>
<A HREF="#FontFormattingManipulators">HTML font formatting manipulators</A><BR>
<A HREF="#TableManipulators">HTML table manipulators</A></P>
<U><P><A NAME="SpecialMeaning">Manipulators used to print characters with special meaning</A>:</P>
</U><B><P>lt</B> - Outputs a less then sign<BR>
<B>gt</B> - Outputs a greater then sign<BR>
<B>amp</B> - Outputs an ampersand<BR>
<B>quot</B> - Outputs a double quotation mark</P>
<U><P><A NAME="SpecialCharacters">Manipulators used to print special characters</A>:</P>
</U><B><P>nbsp</B> - Outputs a non-breaking space<BR>
<B>hyphen</B> - Outputs a soft hyphen<BR>
<B>copyright</B> - Outputs a copyright symbol &copy;<BR>
<B>registered</B> - Outputs a registered symbol &reg;</P>
<U><P><A NAME="HMTLtags">Manipulators used to create HMTL tags</A>:</P>
</U><B><P>stag</B> - Starts an HTML tag<BR>
<B>etag</B> - Ends an HTML tag<BR>
<B>ctag</B> - Closes an HTML tag</P>
<U><P><A NAME="FormattingManipulators">HTML document formatting manipulators</A>:</P>
</U><B><P>anchor</B> - Start anchor with no parameters<BR>
<B>eanchor</B> - End anchor<BR>
<B>comment</B> - Start comment<BR>
<B>ecomment</B> - End comment<BR>
<B>body</B> - Start body with no parameters<BR>
<B>ebody</B> - End body<BR>
<B>br</B> - Insert a line break<BR>
<B>head</B> - Start head<BR>
<B>ehead</B> - End head<BR>
<B>html</B> - Start html<BR>
<B>ehtml</B> - End html<BR>
<B>hr</B> - Insert a horizontal rule<BR>
<B>par</B> - Start paragraph<BR>
<B>epar</B> - End paragraph<BR>
<B>pre</B> - Start preformatted text<BR>
<B>epre</B> - End preformatted text<BR>
<B>title</B> - Start title<BR>
<B>etitle</B> - End title</P>
<U><P><A NAME="FontFormattingManipulators">HTML font formatting manipulators</A>:</P>
</U><B><P>bold</B> - Start bold<BR>
<B>ebold</B> - End bold<BR>
<B>center</B> - Start center<BR>
<B>ecenter</B> - End center<BR>
<B>font</B> - Start font with no parameters<BR>
<B>efont</B> - End font<BR>
<B>h1</B> - Start heading<BR>
<B>eh1</B> - End heading<BR>
<B>h2</B> - Start heading<BR>
<B>eh2</B> - End heading<BR>
<B>h3</B> - Start heading<BR>
<B>eh3</B> - End heading<BR>
<B>italic</B> - Start italic<BR>
<B>eitalic</B> - End italic<BR>
<B>underline</B> - Start underline<BR>
<B>eunderline</B> - End underline</P>
<U><P><A NAME="TableManipulators">HTML table manipulators</A>:</P>
</U><B><P>table</B> - Start table with no parameters<BR>
<B>otable</B> - Open a table tag<BR>
<B>etable</B> - End table<BR>
<B>tr</B> - Start table row with no parameters<BR>
<B>etr</B> - End table row<BR>
<B>th</B> - Start table header row with no parameters<BR>
<B>eth</B> - End table header<BR>
<B>td</B> - Start table data with no parameters<BR>
<B>etd</B> - End table data</P>
<P><HR></P>
<P><!-- New Section --><A NAME="HyperTextBase"><B><FONT SIZE=4>Hyper Text Base Class</A></B></FONT> </P>
<P>The hypertext driver class is a base class that uses the C++ ostream library to write HTML tags and text to a specified stream. It has several overloads of the left shift operator relative to the standard C++ I/O and manipulators and the HTML manipulators, as well the C++ built-in data types: char, char *, int, long, float, and double. The hypertext driver base class also includes several HTML tag functions that allows you to specific parameters within the tag. All the tag functions are named after their respective tag in upper case letters.</P>
<P><A HREF="#HypertextBaseClassFunctions">Hypertext driver base class functions</A><BR>
<A HREF="#FunctionsToWriteBuiltInTypes">Functions used to write built-in data types</A><BR>
<A HREF="#HyperTextBaseOverloadedOperators">Overloaded operators</A><BR>
<A HREF="#HyperTextBaseFormatting">HTML document formatting functions</A><BR>
<A HREF="#HyperTextBaseFFormatting">HTML font formatting functions</A><BR>
<A HREF="#HyperTextBaseTableFunctions">HTML table functions</A></P>
<B><U><P><A NAME="HypertextBaseClassFunctions">Hypertext driver base class functions</A>:</U> </P>
<FONT COLOR="#000080"><P>HyperTextDrv::HyperTextDrv(ostream &amp;s) </B></FONT>- Class constructor responsible for setting a pointer the specified output stream. Also sets the default precision for floating point values and the interpretation of spaces. </P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::WriteString(const char *s) </B></FONT>- Used to write a single line of text to the stream, filtering all the characters that have special meaning in HTML documents. This function is implemented as a virtual function so that a derived class can define its own version if needed. </P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::WriteChar(const unsigned char c) const </B></FONT>- Used to write a single character to the stream, filtering all the characters that have special meaning in HTML documents. This function is implemented as a virtual function so that a derived class can define its own version if needed. </P>
<B><U><P><A NAME="FunctionsToWriteBuiltInTypes">Functions used to write built-in data types</A>:</U> </P>
<FONT COLOR="#000080"><P>void HyperTextDrv::Write </B></FONT>- There are several overloads of the Write() function used to write any of the C++ built-in data types to the output stream. Overloads of the Write() function include signed and unsigned, constant and non-constant versions for: char, char *, int, long, float, and double.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::precision(int p) </B></FONT>- This function is used to set the decimal precision for floating point values. By default a decimal precision of two is used.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::eat_space() </B></FONT>- This function set the space interpretation which will cause all spaces to be treated a non-breaking spaces. </P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::put_space() </B></FONT>- This function is used to reset the space interpretation which will cause all spaces to be treated as normal. By default all spaces are treated as normal.</P>
<B><U><P><A NAME="HyperTextBaseOverloadedOperators">Overloaded operators</A>:</U> </P>
</B><P>Several overloads of the left shift operator relative to the standard C++ I/O manipulators and the HTML manipulators, as well the C++ built-in data types are provided. The overloaded left shift operator allows you to use hypertext text objects just like ostream objects:</P>
<PRE>HyperTextDrv htm(stream);
htm &lt;&lt; center &lt;&lt; "Some document text" &lt;&lt; ecenter &lt;&lt; endl;
htm &lt;&lt; par &lt;&lt; endl;
htm &lt;&lt; "First Amount = " &lt;&lt; 1.28 &lt;&lt; endl;</PRE>
<B><U><P><A NAME="HyperTextBaseFormatting">HTML document formatting functions</A>:</P>
</U><FONT COLOR="#000080"><P>void HyperTextDrv::ANCHOR(const char *s) </B></FONT>- Write anchor tag with parameters.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::BODY(const char *s) </B></FONT>- Write body tag with parameters.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::COMMENT(const char *s) </B></FONT>- Write a comment.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::PAR(const char *s) </B></FONT>- Write paragraph tag with parameters.</P>
<B><U><P><A NAME="HyperTextBaseFFormatting">HTML font formatting functions</A>:</U> </P>
<FONT COLOR="#000080"><P>void HyperTextDrv::BOLD(const char *s) </B></FONT>- Write string in bold letters.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::CENTER(const char *s) </B></FONT>- Center a string.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::FONT(const char *s) </B></FONT>- Write a font tag with parameters.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::H1(const char *s) </B></FONT>- Write a text heading.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::H2(const char *s) </B></FONT>- Write a text heading.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::H3(const char *s) </B></FONT>- Write a text heading.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::ITALIC(const char *s) </B></FONT>- Write a string in italics.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::UNDERLINE(const char *s) </B></FONT>- Under line a string.</P>
<B><U><P><A NAME="HyperTextBaseTableFunctions">HTML table functions</A>:</U> </P>
<FONT COLOR="#000080"><P>void HyperTextDrv::TABLE(const char *s) </B></FONT>- Write a table tag with parameters.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::TD(const char *s) </B></FONT>- Start a table data tag with parameters.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::TH(const char *s) </B></FONT>- Start a table header with parameters.</P>
<B><FONT COLOR="#000080"><P>void HyperTextDrv::TR(const char *s) </B></FONT>- Start a table row with parameters.</P>
<P><HR></P>
<P><A NAME="HyperTextClass"><!-- New Section --><B><FONT SIZE=4>Hyper Text Class</A></P>
</B></FONT><P>The hypertext class is used to write HTML document templates to a specified stream. This class inherits all the functionality of the hypertext drive class and adds additional functions to create HTML documents.</P>
<P><A HREF="#HyperTextFunctions">Hypertext driver class functions</A><BR>
<A HREF="#HyperTextHTMLDocTemps">Functions used to create HTML document templates</A><BR>
<A HREF="#HyperTextTableFunctions">Table Functions</A><BR>
<A HREF="#HyperTextReportingFunctions">Reporting functions</A></P>
<B><U><P><A NAME="HyperTextFunctions">Hypertext driver class functions</A>:</P>
</B></U><P>&nbsp;<B><FONT COLOR="#000080">HyperText::HyperText(ostream &amp;s) </B></FONT>- Class constructor responsible for setting a pointer the specified output stream.</P>
<B><U><P><A NAME="HyperTextHTMLDocTemps">Functions used to create HTML document templates</A>:</B></U> </P>
<B><FONT COLOR="#000080"><P>void HyperText::Prologue(const char *doc_title = 0) </B></FONT>- Used to create an HTML document prologue. If no document title is specified a default on will be provided. </P>
<B><FONT COLOR="#000080"><P>void HyperText::StartBody(const char *parameters = 0) </B></FONT>- Used to start the body of an HTML document. You can specify body parameters such as a background color or image.</P>
<B><FONT COLOR="#000080"><P>void HyperText::StartBody(htmCOLORS color) </B></FONT>- Used to start the body of an HTML document specifying a specific background color. <A HREF="#htmCOLORS">htmCOLORS</A> is an enumeration used to set the background to one of several standard colors.</P>
<B><FONT COLOR="#000080"><P>void HyperText::Epilogue() </B></FONT>- Used to end the HTML document.</P>
<B><FONT COLOR="#000080"><P>void HyperText::DocHeader(const char *doc_title = 0) </B></FONT>- Used to write a document header. If no document title is specified a default one will be provided.</P>
<B><FONT COLOR="#000080"><P>void HyperText::DocTrailer() </B></FONT>- Used to write a document trailer.</P>
<B><U><P><A NAME="HyperTextTableFunctions">Table Functions</A>:</B></U> </P>
<B><FONT COLOR="#000080"><P>void HyperText::GenTable(int cell_spacing = 1, int cell_padding = 4, int width = 75, int border = 1, htmCOLORS bordercolor = htmBLACK) </B></FONT>- Used to start an HTML table specifying the cell spacing, cell padding, table width, border size and color. <A HREF="#htmCOLORS">htmCOLORS</A> is an enumeration used to set the border to one of several standard colors.</P>
<B><FONT COLOR="#000080"><P>void HyperText::StartTableRow() </B></FONT>- Used to start a table row.</P>
<B><FONT COLOR="#000080"><P>void HyperText::EndTableRow() </B></FONT>- Used to end a table row.</P>
<B><FONT COLOR="#000080"><P>void HyperText::TableHeader(char *valign="CENTER", int colspan = 1, int rowspan = 1, int width = 10) </B></FONT>- Used to start a table header specifying the vertical alignment, row span, and width.</P>
<B><FONT COLOR="#000080"><P>void HyperText::EndTableHeader() </B></FONT>- Used to end a table header.</P>
<B><FONT COLOR="#000080"><P>void HyperText::TableData(char *valign="TOP", int colspan = 1, int rowspan = 1, int width = 10) </B></FONT>- Used to start a table data tag specifying the vertical alignment, row span, and width.</P>
<B><FONT COLOR="#000080"><P>void HyperText::EndTableData() </B></FONT>- Used to end a table data tag.</P>
<B><FONT COLOR="#000080"><P>void HyperText::EndTable() </B></FONT>- Used to end the table.</P>
<B><U><P><A NAME="HyperTextReportingFunctions">Reporting functions</A>:</B></U> </P>
<B><FONT COLOR="#000080"><P>void HyperText::GetSystemTime(char *s, int full_month_name = 1) </B></FONT>- This function is used to generate a time and date stamp passed back in the "s" variable. By default a full month name will be used. If the "full_month_name" variable is false an abbreviated month name will be used.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
