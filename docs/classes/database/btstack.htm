<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:44:09 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>btstack class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">B-tree Stack Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="gxdbase.htm#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="gxheader.htm#Constants">Constants</A><BR>
<A HREF="gxbtree.htm#TypeDefinitions">Type Definitions</A><BR>
<A HREF="gxheader.htm#Enumerations">Enumerations</A><BR>
<A HREF="#Structs">Data Structures</A> <BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The B-tree stack class is used by the non-recursive B-tree functions in place of the processor stack to store node addresses during non-recursive insertions and deletions. The B-tree stack class is essentially a doubly linked-list with stack and queue functions. The stack size is not fixed and grows according the height of the B-tree.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Structs"><B><FONT SIZE=4>Data Structures</A></B></FONT> </P>
<P>The B-tree stack node type is used to store a signal B-tree node address and pointers to the previous and next nodes in the stack.</P>
<FONT COLOR="#008080"><PRE>struct BtreeStack_t
{
  FAU node_address;   // 32-bit or 64-bit B-tree node address
  BtreeStack_t *next; // Pointer to the next node in the stack
  BtreeStack_t *prev; // Pointer to the previous node in the stack
};</PRE>
</FONT><P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#BtreeStack">BtreeStack::BtreeStack()</A><BR>
<A HREF="#BtreeStackDestructor">BtreeStack::~BtreeStack()</A><BR>
<A HREF="#AllocNode">BtreeStack::AllocNode()</A><BR>
<A HREF="#Clear">BtreeStack::Clear()</A><BR>
<A HREF="#DetachNode">BtreeStack::DetachNode()</A><BR>
<A HREF="#Extract">BtreeStack::Extract()</A><BR>
<A HREF="#FreeNode">BtreeStack::FreeNode()</A><BR>
<A HREF="#GetHead">BtreeStack::GetHead()</A><BR>
<A HREF="#GetTail">BtreeStack::GetTail()</A><BR>
<A HREF="#Insert">BtreeStack::Insert()</A><BR>
<A HREF="#InsertAfter">BtreeStack::InsertAfter()</A><BR>
<A HREF="#InsertBefore">BtreeStack::InsertBefore()</A><BR>
<A HREF="#IsEmpty">BtreeStack::IsEmpty()</A><BR>
<A HREF="#MakeEmpty">BtreeStack::MakeEmpty()</A><BR>
<A HREF="#Pop">BtreeStack::Pop()</A><BR>
<A HREF="#Push">BtreeStack::Push()</A><BR>
<A HREF="#RemoveHead">BtreeStack::RemoveHead()</A><BR>
<A HREF="#RemoveTail">BtreeStack::RemoveTail()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="BtreeStack">BtreeStack::BtreeStack()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="BtreeStackDestructor">BtreeStack::~BtreeStack()</A></B></FONT>&nbsp;-&nbsp;Class destructor responsible for clearing the list when an object is deleted. </P>
<B><FONT COLOR="#000080"><P><A NAME="AllocNode">BtreeStack_t *BtreeStack::AllocNode(FAU node_address)</A></B></FONT>&nbsp;-&nbsp;Private member function used to allocate a new stack node for the specified B-tree node address. <A NAME="Clear">Returns null if memory could not be allocated or a pointer to the stack node if no errors occur.<B><FONT COLOR="#000080"> </P>
<P>void BtreeStack::Clear()</A></B></FONT>&nbsp;-&nbsp;Public member function uses to clear the stack.</P>
<B><FONT COLOR="#000080"><P><A NAME="DetachNode">void BtreeStack::DetachNode(BtreeStack_t *)</A></B></FONT>&nbsp;-&nbsp;Private member function used to detach the specified stack node from its current location</P>
<B><FONT COLOR="#000080"><P><A NAME="Extract">FAU BtreeStack::Extract()</A></B></FONT>&nbsp;-&nbsp;Public queue operation used to extract a B-tree node address from the list. Returns a file pointer to the B-tree node address.</P>
<B><FONT COLOR="#000080"><P><A NAME="FreeNode">FAU BtreeStack::FreeNode(BtreeStack_t *n)</A></B></FONT>&nbsp;-&nbsp;Private member function used to free the memory location of the stack node. Returns a file pointer to the B-tree node address.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetHead">BtreeStack_t *BtreeStack::GetHead()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the head of the list.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetTail">BtreeStack_t *BtreeStack::GetTail()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the tail of the list.</P>
<B><FONT COLOR="#000080"><P><A NAME="Insert">BtreeStack_t *BtreeStack::Insert(FAU node_address)</A></B></FONT>&nbsp;-&nbsp;Public queue operation used to insert a B-tree node address into the list. Returns a pointer to the stack node or a null value if memory for the node could not be allocated.</P>
<B><FONT COLOR="#000080"><P><A NAME="InsertAfter">void BtreeStack::InsertAfter(BtreeStack_t *pos, BtreeStack_t *n)</A></B></FONT>&nbsp;-&nbsp;Private member function used to insert a new or detached stack node after the node residing at the specified location.</P>
<B><FONT COLOR="#000080"><P><A NAME="InsertBefore">void BtreeStack::InsertBefore(BtreeStack_t *pos, BtreeStack_t *n)</A></B></FONT>&nbsp;-&nbsp;Private member function used to insert a new or detached stack node before the node residing at the specified location.</P>
<B><FONT COLOR="#000080"><P><A NAME="IsEmpty">int BtreeStack::IsEmpty()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if the stack is empty.</P>
<B><FONT COLOR="#000080"><P><A NAME="MakeEmpty">void BtreeStack::MakeEmpty()</A></B></FONT>&nbsp;-&nbsp;Private member function used to reset the "head" and "tail" pointers. </P>
<B><FONT COLOR="#000080"><P><A NAME="Pop">FAU BtreeStack::Pop()</A></B></FONT>&nbsp;-&nbsp;Public stack operation used to pop a B-tree node address from the list. Returns a file pointer to the B-tree node address.</P>
<B><FONT COLOR="#000080"><P><A NAME="Push">BtreeStack_t *BtreeStack::Push(FAU node_address)</A></B></FONT>&nbsp;-&nbsp;Public stack operation used to push a B-tree node address into the list. Returns a pointer to the stack node or a null value if memory for the node could not be allocated.</P>
<B><FONT COLOR="#000080"><P><A NAME="RemoveHead">FAU BtreeStack::RemoveHead()</A></B></FONT>&nbsp;-&nbsp;Private member function used to remove the first stack node in the list. Returns a file pointer to the B-tree node address.</P>
<B><FONT COLOR="#000080"><P><A NAME="RemoveTail">FAU BtreeStack::RemoveTail()</A></B></FONT>&nbsp;-&nbsp;Private member function used to remove the last stack node in the list. Returns a file pointer to the B-tree node address.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
