<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:44:30 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>infohog class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">InfoHog</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="gxdbase.htm#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="#Constants">Constants</A><BR>
<A HREF="gxbtree.htm#TypeDefinitions">Type Definitions</A><BR>
<A HREF="gxheader.htm#Enumerations">Enumerations</A><BR>
<A HREF="#Structs">Data Structures</A> <BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>InfoHog is a general-purpose platform interoperable database application used store any type of binary data. InfoHog data is organized in a member array with the first member representing a fixed length primary key. The key type must be defined by the application or derived class when InfoHog objects are constructed. All other array elements can be any built-in or user defined type known to the application or the derived class. The application or the derived class is responsible for type casting the members of the object array to the correct type. The member array is variable in length for both in-memory copies and disk copies of InfoHog objects. This feature allows applications or a derived class to add or subtract fields from database records without having to rebuild the database. Using InfoHog you can rapidly assemble any type of relational or object-oriented database.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Constants"><B><FONT SIZE=4>Constants</A></B></FONT> </P>
<P>InfoHog Constants</P>
<PRE>const unsigned <B>InfoHogMinMembers</B> = 1;   // Minimum number of members
const unsigned <B>InfoHogDefMembers</B> = 9;   // Default number of members
const unsigned <B>InfoHogMaxMembers</B> = 255; // Maximum number of members
const unsigned <B>InfoHogNameLength</B> = 256; // Default name lengths

// Default number of keys per tree node
const BtreeNodeOrder_t <B>InfoHogNodeOrder</B> = 11; 

// Default Class ID for InfoHog objects
const gxClassID <B>ClassInfoHogID</B> = (gxClassID)-1; 
                     
// This infohog configuration will allow 255 Btree indexes per index file
// and 255 static data entries per data file.
const int <B>InfoHogNumTrees</B> = 255;   // Max number of Btrees per index file
const int I<B>nfoHogUseIndexFile</B> = 1; // Used to enable the use of index files
const FAU <B>InfoHogStaticArea</B> = FAU_t(255 * 255); // Static data area</PRE>
<P><A HREF="pod.htm#Constants">Persistent Object Database Manager Constants</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Structs"><B><FONT SIZE=4>Data Structures</A></B></FONT> </P>
<P>The InfoHog key type class is used to define the primary key type used by this database.</P>
<FONT COLOR="#008080"><PRE>template&lt;class TYPE&gt;
class InfoHogKey_t
{
public:
  InfoHogKey_t() { }
  ~InfoHogKey_t() { }

public: // Persistent data members
  // NOTE: Do not change the ordering of the data members in order to
  // maintain a uniform byte alignment between the in-memory copy of
  // the object and the copy stored on disk. If the member alignment
  // is changed all database files using this structure will have to
  // be rebuilt.
  TYPE object_name;     // Object name
  gxObjectID object_id; // Object data file address/identification number
  gxClassID class_id;   // Optional object class identification number
};</PRE>
</FONT><P>The InfoHog key class is derived from the <A HREF="dbasekey.htm">DatabaseKeyB</A> base class and defines the primary key class used by this database. </P>
<FONT COLOR="#008080"><PRE>
template&lt;class TYPE&gt;
class InfoHogKey : public DatabaseKeyB
{
public:
  InfoHogKey(int dup_names = 0);
  InfoHogKey(TYPE &amp;name, gxObjectID oid = (gxObjectID_t)0,
&#9;     gxClassID cid = (gxClassID_t)0, int dup_names = 0);
  
public: // Base class interface
  size_t KeySize() { return sizeof(key); }
  int operator==(const DatabaseKeyB&amp; k) const;
  int operator&gt;(const DatabaseKeyB&amp; k) const;

public:
  TYPE &amp;ObjectName() { return key.object_name; }
  gxObjectID ObjectID() const { return key.object_id; }
  gxClassID ClassID() const { return key.class_id; }
  void SetObjectName(const TYPE &amp;name) { key.object_name = name; }
  void SetObjectName(TYPE &amp;name) { key.object_name = name; }
  void SetObjectID(gxObjectID oid) { key.object_id = oid; }
  void SetClassID(gxClassID cid) { key.class_id = cid; }
  void AllowDuplicates() { allow_dup_names = 1; }
  void DisallowDuplicates() { allow_dup_names = 0; }

private: // Non-persistent data members
  int allow_dup_names;

private: // Persistent data members
  InfoHogKey_t&lt;TYPE&gt; key;
};</PRE>
</FONT><P><A NAME="InfoHogKey"><A HREF="#InfoHogKey">InfoHogKey::InfoHogKey()</A><BR>
<A HREF="#AllowDuplicates">InfoHogKey::AllowDuplicates()</A><BR>
<A HREF="#ClassID">InfoHogKey::ClassID()</A><BR>
<A HREF="#DisallowDuplicates">InfoHogKey::DisallowDuplicates()</A><BR>
<A HREF="#KeySize">InfoHogKey::KeySize()</A><BR>
<A HREF="#InfoHogKeyObjectID">InfoHogKey::ObjectID()</A><BR>
<A HREF="#InfoHogKeySetClassID">InfoHogKey::SetClassID()</A><BR>
<A HREF="#InfoHogKeySetObjectID">InfoHogKey::SetObjectID()</A><BR>
<A HREF="#InfoHogKeySetObjectName">InfoHogKey::SetObjectName()</A><BR>
<A HREF="#amp;ObjectName">InfoHogKey::ObjectName()</A></P>
<B><FONT COLOR="#000080"><P>InfoHogKey::InfoHogKey(int dup_names = 0)</A></B></FONT>&nbsp;-&nbsp;Default class constructor. By default duplicate key names are not allowed. </P>
<B><FONT COLOR="#000080"><P><A NAME="InfoHogKey_overload_1">InfoHogKey::InfoHogKey(TYPE &amp;name, gxObjectID oid = </A>(gxObjectID_t)0, gxClassID cid = (gxClassID_t)0, int dup_names = 0)</B></FONT>&nbsp;-&nbsp;Class constructor used to set the key name, object ID, class ID, and enable duplicate names.</P>
<B><FONT COLOR="#000080"><P><A NAME="AllowDuplicates">void InfoHogKey::AllowDuplicates()</A></B></FONT>&nbsp;-&nbsp;Public member function used to enable duplicate names.</P>
<B><FONT COLOR="#000080"><P><A NAME="ClassID">gxClassID InfoHogKey::ClassID()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the class ID of this key.</P>
<B><FONT COLOR="#000080"><P><A NAME="DisallowDuplicates">void InfoHogKey::DisallowDuplicates()</A></B></FONT>&nbsp;-&nbsp;Public member function use to disallow duplicate names.</P>
<B><FONT COLOR="#000080"><P><A NAME="KeySize">size_t InfoHogKey::KeySize()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the key size. </P>
<B><FONT COLOR="#000080"><P><A NAME="InfoHogKeyObjectID">gxObjectID InfoHogKey::ObjectID()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the object ID of this key.</P>
<B><FONT COLOR="#000080"><P><A NAME="InfoHogKeySetClassID">void InfoHogKey::SetClassID(gxClassID cid)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the class ID of this key.</P>
<B><FONT COLOR="#000080"><P><A NAME="InfoHogKeySetObjectID">void InfoHogKey::SetObjectID(gxObjectID oid)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the object ID of this key.</P>
<B><FONT COLOR="#000080"><P><A NAME="InfoHogKeySetObjectName">void InfoHogKey::SetObjectName(const TYPE &amp;name)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the primary key name.</P>
<B><FONT COLOR="#000080"><P><A NAME="amp_ObjectName">TYPE &amp;InfoHogKey::ObjectName()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a reference to the primary key name.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#InfoHog">InfoHog::InfoHog()</A><BR>
<A HREF="#InfoHogDestructor">InfoHog::~InfoHog()</A><BR>
<A HREF="#AllocArray">InfoHog::AllocArray()</A><BR>
<A HREF="#ChangeKeyMember">InfoHog::ChangeKeyMember()</A><BR>
<A HREF="#ChangeMember">InfoHog::ChangeMember()</A><BR>
<A HREF="#ChangeObject">InfoHog::ChangeObject()</A><BR>
<A HREF="#CompareIndex">InfoHog::CompareIndex()</A><BR>
<A HREF="#Copy">InfoHog::Copy()</A><BR>
<A HREF="#Delete">InfoHog::Delete()</A><BR>
<A HREF="#DeleteArray">InfoHog::DeleteArray()</A><BR>
<A HREF="#Find">InfoHog::Find()</A><BR>
<A HREF="#GetClassID">InfoHog::GetClassID()</A><BR>
<A HREF="#GetMember">InfoHog::GetMember()</A><BR>
<A HREF="#GetMemberArray">InfoHog::GetMemberArray()</A><BR>
<A HREF="#GetMemberLen">InfoHog::GetMemberLen()</A><BR>
<A HREF="#GetNumMembers">InfoHog::GetNumMembers()</A><BR>
<A HREF="#GetObjectID">InfoHog::GetObjectID()</A><BR>
<A HREF="#ObjectLength">InfoHog::ObjectLength()</A><BR>
<A HREF="#OverWriteObject">InfoHog::OverWriteObject()</A><BR>
<A HREF="#Read">InfoHog::Read()</A><BR>
<A HREF="#RebuildIndexFile">InfoHog::RebuildIndexFile()</A><BR>
<A HREF="#SetClassID">InfoHog::SetClassID()</A><BR>
<A HREF="#SetMember">InfoHog::SetMember()</A><BR>
<A HREF="#SetObjectID">InfoHog::SetObjectID()</A><BR>
<A HREF="#Write">InfoHog::Write()</A></P>
<P><BR>
<A NAME="InfoHog"><B><FONT COLOR="#000080">InfoHog::InfoHog(POD *pod, unsigned members = InfoHogDefMembers)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to initialize the POD pointer and allocated memory for the InfoHog member array. </P>
<B><FONT COLOR="#000080"><P><A NAME="InfoHog_overload_1">InfoHog::InfoHog(const POD *pod, unsigned members = InfoHogDefMembers)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to initialize the POD pointer and allocated memory for the InfoHog member array. </P>
<B><FONT COLOR="#000080"><P><A NAME="InfoHog_overload_2">InfoHog::InfoHog(POD *pod, const TYPE &amp;key, unsigned members = InfoHogDefMembers)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to initialize the POD pointer, set the key name, and allocated memory for the InfoHog member array.</P>
<B><FONT COLOR="#000080"><P><A NAME="InfoHog_overload_3">InfoHog::InfoHog(const POD *pod, const TYPE &amp;key, unsigned members = InfoHogDefMembers)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to initialize the POD pointer, set the key name, and allocated memory for the InfoHog member array. </P>
<B><FONT COLOR="#000080"><P><A NAME="InfoHog_overload_4">InfoHog::InfoHog()</A></B></FONT>&nbsp;-&nbsp;Default class constructor </P>
<B><FONT COLOR="#000080"><P><A NAME="InfoHog_overload_5">InfoHog::InfoHog(const InfoHog&lt;TYPE&gt; &amp;ob)</A></B></FONT>&nbsp;-&nbsp;Class constructor copy constructor.</P>
<B><FONT COLOR="#000080"><P><A NAME="operator_"><A NAME="InfoHogDestructor">void InfoHog::operator=(const InfoHog&lt;TYPE&gt; &amp;ob)</A></B></FONT>&nbsp;-&nbsp;InfoHog assignment operator.</P>
<B><FONT COLOR="#000080"><P>virtual InfoHog::~InfoHog()</A></B></FONT>&nbsp;-&nbsp;Class destructor responsible for de-allocating memory for the InfoHog member array when an InfoHog object is destroyed.</P>
<B><FONT COLOR="#000080"><P><A NAME="AllocArray">int InfoHog::AllocArray(unsigned num)</A></B></FONT>&nbsp;-&nbsp;Protected member function used to allocate memory for the object array. The length of the member array will be equal to the number of array elements multiplied by the size of a <A HREF="../general/membuf.htm">MemoryBuffer</A> object. <B>NOTE</B>: This function will not allocate memory for the array if the current object array is large enough to hold the number of elements requested. Returns true if allocation is successful or false if a memory allocation error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeKeyMember">int InfoHog::ChangeKeyMember(TYPE &amp;k, int find_object = 1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to change this object's key name. If the "find_object" variable is true this function will obtain the object's data file address and load the object. Returns true if successful or false if the object could not be changed.</P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeMember">int InfoHog::ChangeMember(const void *ob, unsigned len, unsigned index, int find_object = 1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to change the object array member at the specified array index. If the "find_object" variable is true this function will obtain the object's data file address and load the object. Returns true if successful or false if the object could not be changed. </P>
<B><FONT COLOR="#000080"><P><A NAME="ChangeObject">int InfoHog::ChangeObject(InfoHog&lt;TYPE&gt; &amp;ob, int find_object = 1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to change this object. If the "find_object" variable is true this function will obtain the object's data file address and load the object. Returns true if successful or false if the object could not be changed.</P>
<B><FONT COLOR="#000080"><P><A NAME="CompareIndex">int InfoHog::CompareIndex(unsigned index_number)</A></B></FONT>&nbsp;-&nbsp;Public member function used to compare the data file to the specified index file. Returns true if data and index file match.</P>
<B><FONT COLOR="#000080"><P><A NAME="Copy">int InfoHog::Copy(const InfoHog&lt;TYPE&gt; &amp;ob, int copy_pod_vars = 1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to copy the contents of the specified object into this object. If the "copy_pod_vars" variable is true the POD and data file address pointers plus all other POD variables will be copied as well as the object's data members. <B>NOTE</B>: This function assumes that memory has been allocated for the "ob" object array.</P>
<B><FONT COLOR="#000080"><P><A NAME="Delete">int InfoHog::Delete()</A></B></FONT>&nbsp;-&nbsp;Private member function used by the Persistent base class to delete InfoHog objects. Returns true if successful or false if the object could not be deleted.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteArray">void InfoHog::DeleteArray()</A></B></FONT>&nbsp;-&nbsp;Protected member function used to free the memory used for the object array and reset the array variables.</P>
<B><FONT COLOR="#000080"><P><A NAME="Find">int InfoHog::Find()</A></B></FONT>&nbsp;-&nbsp;Private member function used by the Persistent base class to find InfoHog objects. Returns true if successful or false if the object could not be found.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetClassID">gxClassID InfoHog::GetClassID()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the optional class ID of this object.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetMember">unsigned char *InfoHog::GetMember(unsigned index)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a pointer to the specified member of the object array. If the index is out of bounds or no memory has been allocated for the member array this function will return a null value.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetMemberArray">MemoryBuffer *InfoHog::GetMemberArray()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a pointer to the InfoHog object array.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetMemberLen">unsigned InfoHog::GetMemberLen(unsigned index)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the length of the specified member in the object array. If the index is out of bounds or no memory has been allocated for the member array this function will return zero.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetNumMembers">unsigned InfoHog::GetNumMembers()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the number of members this object is currently using.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetObjectID">gxObjectID InfoHog::GetObjectID()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the object ID of the object. <B>NOTE</B>: The object ID also represents the object's data file address, which is guaranteed to be unique for every object.</P>
<B><FONT COLOR="#000080"><P><A NAME="ObjectLength">__UWORD__ InfoHog::ObjectLength()</A></B></FONT>&nbsp;-&nbsp;Private member function used by the Persistent base class to calculate the length of this object based on total number of InfoHog data members: </P>
<PRE>[num_members][len_record*num_members][member_len*num_members]</PRE>
<B><FONT COLOR="#000080"><P><A NAME="OverWriteObject">int InfoHog::OverWriteObject(FAU object_address)</A></B></FONT>&nbsp;-&nbsp;Public member function used to overwrite the object at the specified object address. <B>NOTE</B>: This function assumes that objects are fixed in length and will not overwrite the object's key name. Returns true if successful or false if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="OverWriteObject_overload_1">int InfoHog::OverWriteObject()</A></B></FONT>&nbsp;-&nbsp;Public member function used to overwrite this object. <B>NOTE</B>: This function assumes that objects are fixed in length and will not overwrite the object's key name. Returns true if successful or false if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="Read">gxDatabaseError InfoHog::Read(FAU Address)</A></B></FONT>&nbsp;-&nbsp;Private member function used by the Persistent base class to read InfoHog objects. Returns zero if successful or a non-zero value corresponding to a <A HREF="gxderror.htm#gxDatabaseError">gxDatabaseError</A> enumerated type if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="RebuildIndexFile">int InfoHog::RebuildIndexFile(const char *fname, unsigned index_number,int num_trees, BtreeNodeOrder_t node_order)</A></B></FONT>&nbsp;-&nbsp;Public member function used to rebuild a damaged index file. Returns the total number of members inserted into the new index file or zero if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetClassID">void InfoHog::SetClassID(gxClassID cid)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the optional class ID of this object.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetMember">int InfoHog::SetMember(const void *ob, unsigned len, unsigned index)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set a member of the object array. <B>NOTE</B>: The primary key will always be index number 0. Returns true if the member was set or false if an error occurred.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetObjectID">void InfoHog::SetObjectID(gxObjectID oid)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the object ID of this object. <B>NOTE</B>: The object ID also represents the object's data file address</P>
<B><FONT COLOR="#000080"><P><A NAME="Write">gxDatabaseError InfoHog::Write()</A></B></FONT>&nbsp;-&nbsp;Private member function used by the Persistent base class to write InfoHog objects. Returns zero if successful or a non-zero value corresponding to a <A HREF="gxderror.htm#gxDatabaseError">gxDatabaseError</A> enumerated type if an error occurs.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
