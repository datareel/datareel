<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:45:35 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxdbase class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">32/64-Bit Database Engine</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="#RevisionLevels">Revision Levels</A><BR>
<A HREF="#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="gxheader.htm#Constants">Constants</A><BR>
<A HREF="gxheader.htm#TypeDefinitions">Type Definitions</A><BR>
<A HREF="gxheader.htm#Enumerations">Enumerations</A><BR>
<A HREF="#DataMembers">Data Members</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The gxDatabase engine is a low-level file handler used to manipulate contiguous blocks of binary data. It is composed of an external file system API, platform interoperable integers, and several block manipulation functions. The external file system API defines the basic file system functionality required by the gxDatabase engine and calls the correct native file API function for each supported platform/compiler. Platform interoperable integers are used to achieve database and network interoperability in heterogeneous computing environments. The gxDatabase engine itself defines several low-level block manipulation functions used to build complex database models and navigation functions. The low-level methods are extremely flexible allowing the database engine to support <A HREF="dbmodels.htm#OODBM">object-oriented</A> database models and <A HREF="dbmodels.htm#RDBMS">relational</A> database models.</P>
<P>Low-level methods include read, write, and seek operations, create and open functions, linear navigation, and large file support. Optional methods include CRC checking, file and record locking. The block manipulation functions operate independently of the file system API calls allowing you to use the same interface for large files and proprietary file systems. By default the gxDatabase engine uses 32-bit integers to store header information and represent file offsets. A database file using 32-bit offsets will not be allowed to grow larger then 2.1 GB. When large file support is enabled the gxDatabase engine uses 64-bit signed integers to store header information and represent file offsets. This allows database files to grow larger then 2.1 GB to a maximum size determined by the underlying operating system.</P>
<P>Database files created by the gxDatabase engine are constructed using a file header, a file lock header, an optional static storage area, and a dynamic storage area reserved for contiguous byte sequences marked by block headers. The file header is used to store information needed by the block allocation routines, a signature, and a version number. The lock header is used to lock the entire file during multi-threaded read and write operations. The static data area is used to store static data guaranteed not to be altered by the dynamic allocation routines. Block headers, record lock headers, and block checksums are used to manage data blocks created inside the dynamic data area. The database engine offers best-fit and first-fit block allocation methods to prevent database fragmentation. Optional CRC checking ensures data integrity. Multi-threaded/multi-machine database applications are directly supported using persistent locks at either the file and node level.</P>
<P>The gxDatabase engine includes optional CRC checking and persistent block checksums. Internal CRC checking is used by the database engine to detect any bit errors that occur during data storage operations. In order to minimize executions times relative to file operations internal CRC checking can be disabled within the gxDatabase engine. Persistent block checksums are stored at the end of each block. The use of a block checksum is optional. They are generally used by applications that require persistent checksums to maintain file integrity from one program invocation to the next.</P>
<P>The gxDatabase engine advisory locking scheme enables database files to facilitate optimum operability in multi-threaded/multi-machine environments. Both file and record locking is achieved through the use of persistent lock headers. Lock headers operate independently of the I/O subsystem thus allowing platform interoperable file and record locking. Additionally, the use of advisory file and record locks ensure that database engine will maintain maximum flexibility in both single user and multi-user applications. The absence of a mandatory locking protocol places the responsibility of adherence and enforcement of the locking sub-system on the application and not the database engine itself.</P>
<P><HR></P>
<B><FONT SIZE=4><P><A NAME="RevisionLevels">Revision Levels</A></P>
</B></FONT><P>The 32/64-bit database engine allows you to mix revision letters as needed. This feature was added specifically for large databases where even the slightest bit of overhead could have a tremendous affect on the file size and impact the applications in terms of speed. The version letter will determine the amount of overhead per database block and is set when the file is created:</P>
<PRE>gxDatabaseError gxDatabase::Create(const char *fname, FAU static_size =(FAU_t)0, __SBYTE__ RevisionLetter = gxDatabaseRevisionLetter);</PRE>
<P>The default revision level is set in the "gxd_ver.h" include file. When existing database files are opened 32/64-bit database engine checks the revision level stored in the file header and performs read, write, seek, and search operations accordingly. This allows you to mix the revision levels as needed without worrying about incompatibility with higher or lower revisions.</P>
<P>Revision 0, A, B, or C can be used with the 32/64-bit database engine, version 2000.101 and higher. Revision A, B, and C add features to maintain optimum data protection. Revision 0 offers the least amount of overhead per block.</P>
<P>Revision letter zero (denoted by any of the following: 0, '\0', or ' ') excludes the persistent checksum value and the persistent file and record lock headers.</P>
<P>Revision 'A' reserves space at the end of each block for an optional persistent checksum value and excludes the persistent file and record lock headers. </P>
<P>Revision 'B' includes the persistent checksum value with the addition of a persistent file lock header. </P>
<P>Revision 'C' includes all the features of revision 'A' and 'B' with the addition of persistent record lock headers.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="ConditionalDirectives"><B><FONT SIZE=4>Conditional Directives</A></B></FONT> </P>
<B><P>__CPP_EXCEPTIONS__</B> - Directive used to enable C++ exception handling. <B>NOTE</B>: If this directive is used the database file functions will throw a <A HREF="gxderror.htm#gxCDatabaseException">gxCDatabaseException</A> exception if any errors occur during a file operation. If this directive is not enabled a return value is used to evaluate file errors.</P>
<B><P>NOTE</B>: When you enable the 64-bit preprocessor directives all the database classes including the B-tree class, POD manager, Persistent base class, and InfoHog API will used the 64-bit database engine. Since the file offsets change to 64-bits, 64-bit database files are not compatible with 32-bit database files. So it is important to determine which version of the database engine your project will require before you start building data files.</P>
<B><P>__64_BIT_DATABASE_ENGINE__</B> - Directive used to enable 64-bit file offsets. <B>NOTE</B>: This directive also requires a platform/compiler specific 64-bit integer directive: </P>
<B><P>__WIN32__</B> - Directive used to enable 64-bit integer support on all WIN32 platforms.</P>
<B><P>__MSVC__</B> - Directive used to enable 64-bit integer support using MSVC version 4.2 and higher.</P>
<B><P>__UNIX__</B> - Directive used to enable 64-bit integer support on all UNIX platforms.</P>
<B><P>_LARGEFILE64_SOURCE</B> - Directive used on all UNIX platforms to enable large file support.</P>
<B><P>__LINUX__</B> - Directive used to enable 64-bit integer support on all Linux platforms.</P>
<B><P>__HPUX__</B> - Directive used to enable 64-bit integer support on all HPUX platforms.</P>
<B><P>__SOLARIS__</B> - Directive used to enable 64-bit integer support on all Solaris platforms.</P>
<B><P>__BCC32__</B> - Directive used to enable 64-bit integer support using BCC32 5.5. <B>NOTE</B>: At the time of this publication large file support has not been implemented under BCC 5.5, although the use of 64-bit integers is supported.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="DataMembers"><B><FONT SIZE=4>Public Data Members</A></P>
</B></FONT><P>Static data members used by the gxDatabase class in place of global variables.</P>
<B><FONT COLOR="#000080"><P>static __SBYTE__ gxDatabase::gxSignature[gxSignatureSize]</B></FONT> - Eight or ten byte string used to identify 32-bit or 64-bit database files and the revision level. </P>
<B><FONT COLOR="#000080"><P>static FAU gxDatabase::gxVersion</B></FONT> - Offset value used to represent the current library version number.</P>
<B><FONT COLOR="#000080"><P>static gxUINT32 gxDatabase::gxInternalCheckWord</B></FONT> - 32-bit check word used to mark blocks and maintain synchronization.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxDatabase">gxDatabase::gxDatabase()</A><BR>
<A HREF="#gxDatabaseDestructor">gxDatabase::~gxDatabase()</A><BR>
<A HREF="#Alloc">gxDatabase::Alloc()</A><BR>
<A HREF="#BlockHeaderSize">gxDatabase::BlockHeaderSize()</A><BR>
<A HREF="#BlockLength">gxDatabase::BlockLength()</A><BR>
<A HREF="#CalcChecksum">gxDatabase::CalcChecksum()</A><BR>
<A HREF="#Close">gxDatabase::Close()</A><BR>
<A HREF="#Create">gxDatabase::Create()</A><BR>
<A HREF="#DatabaseExceptionMessage">gxDatabase::DatabaseExceptionMessage()</A><BR>
<A HREF="#DatabaseName">gxDatabase::DatabaseName()</A><BR>
<A HREF="#Delete">gxDatabase::Delete()</A><BR>
<A HREF="#DeleteBlocks">gxDatabase::DeleteBlocks()</A><BR>
<A HREF="#Exists">gxDatabase::Exists()</A><BR>
<A HREF="#FileHeaderSize">gxDatabase::FileHeaderSize()</A><BR>
<A HREF="#FilePosition">gxDatabase::FilePosition()</A><BR>
<A HREF="#FileSize">gxDatabase::FileSize()</A><BR>
<A HREF="#FindFirstBlock">gxDatabase::FindFirstBlock()</A><BR>
<A HREF="#FindFirstObject">gxDatabase::FindFirstObject()</A><BR>
<A HREF="#FindNextBlock">gxDatabase::FindNextBlock()</A><BR>
<A HREF="#FindNextObject">gxDatabase::FindNextObject()</A><BR>
<A HREF="#FindPrevBlock">gxDatabase::FindPrevBlock()</A><BR>
<A HREF="#FindPrevObject">gxDatabase::FindPrevObject()</A><BR>
<A HREF="#Flush">gxDatabase::Flush()</A><BR>
<A HREF="#GetDatabaseError">gxDatabase::GetDatabaseError()</A><BR>
<A HREF="#GetDatabaseFreeSpace">gxDatabase::GetDatabaseFreeSpace()</A><BR>
<A HREF="#GetEOF">gxDatabase::GetEOF()</A><BR>
<A HREF="#GetHeapStart">gxDatabase::GetHeapStart()</A><BR>
<A HREF="#GetHighestBlock">gxDatabase::GetHighestBlock()</A><BR>
<A HREF="#GetRevLetter">gxDatabase::GetRevLetter()</A><BR>
<A HREF="#GetSignature">gxDatabase::GetSignature()</A><BR>
<A HREF="#GetVersion">gxDatabase::GetVersion()</A><BR>
<A HREF="#InitFileHdr">gxDatabase::InitFileHdr()</A><BR>
<A HREF="#InitFileLockHdr">gxDatabase::InitFileLockHdr()</A><BR>
<A HREF="#InitRecordLockHdr">gxDatabase::InitRecordLockHdr()</A><BR>
<A HREF="#IsOK">gxDatabase::IsOK()</A><BR>
<A HREF="#IsOpen">gxDatabase::IsOpen()</A><BR>
<A HREF="#LockFile">gxDatabase::LockFile()</A><BR>
<A HREF="#LockRecord">gxDatabase::LockRecord()</A><BR>
<A HREF="#ObjectLength">gxDatabase::ObjectLength()</A><BR>
<A HREF="#Open">gxDatabase::Open()</A><BR>
<A HREF="#Read">gxDatabase::Read()</A><BR>
<A HREF="#ReadBlockHdr">gxDatabase::ReadBlockHdr()</A><BR>
<A HREF="#ReadFileHdr">gxDatabase::ReadFileHdr()</A><BR>
<A HREF="#ReadFileLockHdr">gxDatabase::ReadFileLockHdr()</A><BR>
<A HREF="#ReadForReading">gxDatabase::ReadForReading()</A><BR>
<A HREF="#ReadObjectChecksum">gxDatabase::ReadObjectChecksum()</A><BR>
<A HREF="#ReadRecordLockHdr">gxDatabase::ReadRecordLockHdr()</A><BR>
<A HREF="#ReadyForWriting">gxDatabase::ReadyForWriting()</A><BR>
<A HREF="#ReclaimBestFit">gxDatabase::ReclaimBestFit()</A><BR>
<A HREF="#ReclaimFirstFit">gxDatabase::ReclaimFirstFit()</A><BR>
<A HREF="#Remove">gxDatabase::Remove()</A><BR>
<A HREF="#ResetDatabaseError">gxDatabase::ResetDatabaseError()</A><BR>
<A HREF="#ResetFileLock">gxDatabase::ResetFileLock()</A><BR>
<A HREF="#ResetRecordLock">gxDatabase::ResetRecordLock()</A><BR>
<A HREF="#Seek">gxDatabase::Seek()</A><BR>
<A HREF="#SeekTo">gxDatabase::SeekTo()</A><BR>
<A HREF="#SetDatabaseError">gxDatabase::SetDatabaseError()</A><BR>
<A HREF="#SetRevisionLetter">gxDatabase::SetRevisionLetter()</A><BR>
<A HREF="#StaticArea">gxDatabase::StaticArea()</A><BR>
<A HREF="#TestFileHeader">gxDatabase::TestFileHeader()</A><BR>
<A HREF="#TotalBlocks">gxDatabase::TotalBlocks()</A><BR>
<A HREF="#UnDelete">gxDatabase::UnDelete()</A><BR>
<A HREF="#UnlockFile">gxDatabase::UnlockFile()</A><BR>
<A HREF="#UnlockRecord">gxDatabase::UnlockRecord()</A><BR>
<A HREF="#Write">gxDatabase::Write()</A><BR>
<A HREF="#WriteBlockHdr">gxDatabase::WriteBlockHdr()</A><BR>
<A HREF="#WriteFileHdr">gxDatabase::WriteFileHdr()</A><BR>
<A HREF="#WriteFileLockHdr">gxDatabase::WriteFileLockHdr()</A><BR>
<A HREF="#WriteObjectChecksum">gxDatabase::WriteObjectChecksum()</A><BR>
<A HREF="#WriteRecordLockHdr">gxDatabase::WriteRecordLockHdr()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="gxDatabase">gxDatabase::gxDatabase()</A></B></FONT>&nbsp;-&nbsp;Default class constructor.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxDatabase_overload_1">gxDatabase::gxDatabase(const gxDatabase &amp;ob)</A></B></FONT>&nbsp;-&nbsp;Private copy constructor used to disallow copying to prevent multiple copies of database objects. Forcing pointer semantics to helps to ensure the safe deletion or modification of a database object. </P>
<B><FONT COLOR="#000080"><P><A NAME="operator_">void gxDatabase::operator=(const gxDatabase &amp;ob)</A></B></FONT>&nbsp;-&nbsp;Private assignment operator used to disallow assignment to prevent multiple copies of database objects. Forcing pointer semantics to helps to ensure the safe deletion or modification of a database object.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxDatabaseDestructor">virtual gxDatabase::~gxDatabase()</A></B></FONT>&nbsp;-&nbsp;Virtual class destructor responsible for closing the open file and flushing any disk buffers.</P>
<B><FONT COLOR="#000080"><P><A NAME="Alloc">virtual FAU gxDatabase::Alloc(__ULWORD__ bytes,gxDatabaseReclaimMethod method = gxDBASE_RECLAIM_FIRSTFIT)</A></B></FONT>&nbsp;-&nbsp;Public member function used to allocate a specified number of bytes for a database object. The number of bytes allocated is adjusted to hold a block header, associated overhead, and the object or record. Only the block header is written to the allocated space. The application is responsible for writing the object or record to the block at the file address returned by this function. This function will return a zero if an allocation error occurs. <B>NOTE:</B> The database engine will position the file pointer to the file address where the next write operation should take place after allocating space for the object. The block reclamation method should be set to <B>gxDBASE_RECLAIM_NONE</B> (to extend the file and do not reclaim deleted blocks), <B>gxDBASE_RECLAIM_BESTFIT</B> (to reclaim deleted blocks using the best fit reclamation method ), or <B>gxDBASE _RECLAIM_FIRSTFIT</B> (to reclaim deleted blocks using the first fit reclamation method).</P>
<B><FONT COLOR="#000080"><P><A NAME="BlockHeaderSize">size_t gxDatabase::BlockHeaderSize()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the correct size of the block header plus any overhead according to the revision level. This function should only be used when calculating file offsets and not for determining the actual size of the gxBlockHeader data structure. </P>
<B><FONT COLOR="#000080"><P><A NAME="BlockLength">__ULWORD__ gxDatabase::BlockLength(FAU object_address = gxCurrAddress)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the total length of a block, in bytes, at a specified address. The total length refers to the size of the block header including any block overhead plus the block data.</P>
<B><FONT COLOR="#000080"><P><A NAME="CalcChecksum">__ULWORD__ gxDatabase::CalcChecksum(__ULWORD__ bytes, FAU file_address, int mem_alloc = 1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to calculate a 32-bit CRC checksum base on the Ethernet polynomial of 0x4C11DB7 for a given number of bytes starting at the specified address. Returns a 32-bit CRC value. If the "mem_alloc" variable is true, a buffer equal to the specified number of bytes will be created in memory. If the "mem_alloc" variable is false or memory allocation fails the CRC will be calculated byte by byte starting at the specified address.</P>
<B><FONT COLOR="#000080"><P><A NAME="Close">virtual gxDatabaseError gxDatabase::Close()</A></B></FONT>&nbsp;-&nbsp;Virtual public member function used to close an open database file. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="Create">virtual gxDatabaseError gxDatabase::Create(const char *fname, FAU static_size = (FAU_t)</A> 0, __SBYTE__ RevisionLetter = gxDatabaseRevisionLetter) </B></FONT>-&nbsp;Virtual public member function used to create a new file and truncate the file if it already exists. The "static_size" variable is used to reserve a specified number of bytes that will not be affected by the dynamic allocation routines. The "RevisionLetter" variable is used to select a specific revision letter when the file is created. The revision letter is used to enable or disable specific features that will determine the amount of overhead per block. Returns a non-zero value to indicate an error condition or zero if successful. </P>
<B><FONT COLOR="#000080"><P><A NAME="DatabaseExceptionMessage">const char *gxDatabase::DatabaseExceptionMessage()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a null terminated string, which can be used to log or print the last reported database exception. </P>
<B><FONT COLOR="#000080"><P><A NAME="DatabaseName">const char *gxDatabase::DatabaseName()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the file name of currently opened database file. </P>
<B><FONT COLOR="#000080"><P><A NAME="Delete">int gxDatabase::Delete(FAU object_address, int remove = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to mark a block at the specified object address deleted and leaves the object unchanged, allowing it to be undeleted. If the "remove" variable is true the block is marked removed, indicating that the object cannot be undeleted. Returns true if the block was deleted/removed or false if the block was not deleted/removed. </P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteBlocks">FAU gxDatabase::DeleteBlocks(FAU *d = 0, FAU *r = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the total number of removed and deleted blocks and passes back the number of delete and removed blocks in the "d" and "r" variables. </P>
<B><FONT COLOR="#000080"><P><A NAME="Exists">static int gxDatabase::Exists(const char *fname)</A></B></FONT>&nbsp;-&nbsp;Static public member function that returns true if the "fname" file exists. </P>
<B><FONT COLOR="#000080"><P><A NAME="FileHeaderSize">size_t gxDatabase::FileHeaderSize()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the correct size of the file header plus any overhead according to the revision level. This function should only be used when calculating file offsets and not for determining the actual size of the gxFileHeader data structure.</P>
<B><FONT COLOR="#000080"><P><A NAME="FilePosition">gxStreamPos gxDatabase::FilePosition()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the current file position. Returns the current file position or -1 to indicate an error condition.</P>
<B><FONT COLOR="#000080"><P><A NAME="FileSize">static FAU gxDatabase::FileSize(const char *fname)</A></B></FONT>&nbsp;-&nbsp;Static public member function used to obtain the size of file "fname". Returns the file size or -1 to indicate an error condition. </P>
<B><FONT COLOR="#000080"><P><A NAME="FindFirstBlock">FAU gxDatabase::FindFirstBlock(FAU offset = (FAU_t)</A>0)</B></FONT>&nbsp;-&nbsp;Public member function used to search through the file until a valid block is found. The search begins starts at specified offset. This function will return zero if no valid blocks are found or the end of file is reached.</P>
<B><FONT COLOR="#000080"><P><A NAME="FindFirstObject">FAU gxDatabase::FindFirstObject(FAU offset = (FAU_t)</A>0)</B></FONT>&nbsp;-&nbsp;Public member function used to search through the file until a valid block is found and then return the object's address. If the block is marked deleted or removed, this function will continue searching until the first normal block is found. The search begins starts at specified offset. This function will return zero if no valid blocks are found or the end of file is reached.</P>
<B><FONT COLOR="#000080"><P><A NAME="FindNextBlock">FAU gxDatabase::FindNextBlock(FAU offset = (FAU_t)</A>0)</B></FONT>&nbsp;-&nbsp;Public member function used to search through the file until the next valid block after the first valid block is found. The search begins starts at specified offset. This function will return zero if no valid blocks are found or the end of file is reached.</P>
<B><FONT COLOR="#000080"><P><A NAME="FindNextObject">FAU gxDatabase::FindNextObject(FAU offset = (FAU_t)</A>0)</B></FONT>&nbsp;-&nbsp;Public member function used to search through the file until the next valid block after the first valid block is found and then return the object's address. If the block is marked deleted or removed, this function will continue searching until the next normal block is found. The search begins starts at specified offset. This function will return zero if no valid blocks are found or the end of file is reached.</P>
<B><FONT COLOR="#000080"><P><A NAME="FindPrevBlock">FAU gxDatabase::FindPrevBlock(FAU offset)</A></B></FONT>&nbsp;-&nbsp;Public member function used to search backwards through the database until a valid block is found and then return the block's address. If the block is marked deleted this function continue searching until the first normal block is found. The search starts at the specified offset. Returns 0 if no valid block is found in the file or the start of file is reached.</P>
<B><FONT COLOR="#000080"><P><A NAME="FindPrevObject">FAU gxDatabase::FindPrevObject(FAU offset)</A></B></FONT>&nbsp;-&nbsp;Public member function used to search backwards through the database until a valid block is found and then return the object's address. If the block is marked deleted this function will continue searching until the first normal block is found. The search starts at the specified offset. Returns 0 if no valid block is found in the file or the start of file is reached.</P>
<B><FONT COLOR="#000080"><P><A NAME="Flush">virtual gxDatabaseError gxDatabase::Flush()</A></B></FONT>&nbsp;-&nbsp;Public member function used flush the file header and any open disk buffers. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetDatabaseError">gxDatabaseError gxDatabase::GetDatabaseError()</A></B></FONT>&nbsp;-&nbsp;Public member function the returns an error code representing the last reported database error.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetDatabaseFreeSpace">FAU gxDatabase::GetDatabaseFreeSpace()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the file address to the starting address of the free space list. This function returns zero if no blocks have been deleted or removed.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetEOF">FAU gxDatabase::GetEOF()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the "end of file" marker stored in the file header. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetHeapStart">FAU gxDatabase::GetHeapStart()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the file address where the dynamic data area starts. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetHighestBlock">FAU gxDatabase::GetHighestBlock()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the file address of the highest allocated block. </P>
<B><FONT COLOR="#000080"><P><A NAME="GetRevLetter">char gxDatabase::GetRevLetter()</A></B></FONT>&nbsp;-&nbsp;Returns the current database revision letter which will be used to perform compatibility checks to ensure compatibility with all file revisions.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetSignature">const char *gxDatabase::GetSignature()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the file signature stored in the file header.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetVersion">FAU gxDatabase::GetVersion()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the library version number stored in the file header.</P>
<B><FONT COLOR="#000080"><P><A NAME="InitFileHdr">gxDatabaseError gxDatabase::InitFileHdr()</A></B></FONT>&nbsp;-&nbsp;Protected member function used initialize the file header with default values and write it to disk. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="InitFileLockHdr">void gxDatabase::InitFileLockHdr(gxFileLockHeader &amp;hdr)</A></B></FONT>&nbsp;-&nbsp;Public member function used to initialize a the lock header for a newly constructed file lock header.</P>
<B><FONT COLOR="#000080"><P><A NAME="InitRecordLockHdr">void gxDatabase::InitRecordLockHdr(gxRecordLockHeader &amp;hdr)</A></B></FONT>&nbsp;-&nbsp;Public member function used to initialize a the lock header for a newly constructed record lock header. </P>
<B><FONT COLOR="#000080"><P><A NAME="IsOK">int gxDatabase::IsOK()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns false if a fatal error condition has been reached.</P>
<B><FONT COLOR="#000080"><P><A NAME="IsOpen">int gxDatabase::IsOpen()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if a database file is open.</P>
<B><FONT COLOR="#000080"><P><A NAME="LockFile">int gxDatabase::LockFile(gxDatabaseLockType l_type = gxDBASE_WRITELOCK)</A></B></FONT>&nbsp;-&nbsp;Public member function used to lock the entire database file during a multi-threaded read or write operation. The "l_type" variable should be set to <B>gxDBASE_WRITELOCK</B> for exclusive file locks owned by a single thread or to <B>gxDBASE_READLOCK</B> for shared file locks owned by multiple threads. Returns a non-zero value if the file cannot be locked or the lock variable cannot be changed because it is exclusive or another thread is currently updating it.</P>
<B><FONT COLOR="#000080"><P><A NAME="LockRecord">int gxDatabase::LockRecord(gxDatabaseLockType l_type = gxDBASE_WRITELOCK,FAU block_address = gxCurrAddress)</A></B></FONT>&nbsp;-&nbsp;Public member function used to a single node at the specified block address during a multi-threaded read or write operation. The "l_type" variable should be set to <B>gxDBASE_WRITELOCK</B> for exclusive record locks owned by a single thread or to <B>gxDBASE_READLOCK</B> for shared record locks owned by multiple threads. Returns a non-zero value if the node cannot be locked or the lock variable cannot be changed because it is exclusive or another thread is currently updating it.</P>
<B><FONT COLOR="#000080"><P><A NAME="ObjectLength">__ULWORD__ gxDatabase::ObjectLength(FAU object_address = gxCurrAddress)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the object's length, in bytes, at a specified object address. </P>
<B><FONT COLOR="#000080"><P><A NAME="Open">virtual gxDatabaseError gxDatabase::Open(const char *fname, gxDatabaseAccessMode mode = gxDBASE_READWRITE)</A></B></FONT>&nbsp;-&nbsp;Virtual public member function used to open an existing file. The "mode" variable determines if the file is opened for read only or read/write access. This function will check and record the database revision letter each time an existing file is opened. Returns a non-zero value to indicate an error condition or zero if successful. This version of the open functions will only accept: <B>gxDBASE_READONLY</B> or <B>gxDBASE_READWRITE</B> access modes.</P>
<B><FONT COLOR="#000080"><P><A NAME="Read">gxDatabaseError gxDatabase::Read(void *buf, __ULWORD__ bytes, FAU file_address = gxCurrAddress)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a specified number of bytes from the specified file offset or the current file position into a memory buffer. Returns a non-zero value to indicate an error condition or zero if successful. </P>
<B><FONT COLOR="#000080"><P><A NAME="ReadBlockHdr">gxDatabaseError gxDatabase::ReadBlockHdr(gxBlockHeader &amp;hdr, FAU block_address = gxCurrAddress)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read a block header and tests the block's check word to ensure that this is a valid block. Returns a non-zero value to indicate an error condition or zero if successful. </P>
<B><FONT COLOR="#000080"><P><A NAME="ReadFileHdr">gxDatabaseError gxDatabase::ReadFileHdr()</A></B></FONT>&nbsp;-&nbsp;Public member function used to read the database file header. Returns a non-zero value to indicate an error condition or zero if successful. </P>
<B><FONT COLOR="#000080"><P><A NAME="ReadFileLockHdr">gxDatabaseError gxDatabase::ReadFileLockHdr(gxFileLockHeader &amp;hdr)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read the lock header from the file. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadForReading">int gxDatabase::ReadForReading()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if the file is ready for reading.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadObjectChecksum">int gxDatabase::ReadObjectChecksum(FAU object_address, __ULWORD__ *object_crc = 0,__ULWORD__ *calc_crc = 0)</A></B></FONT>&nbsp;-&nbsp;Used by an application to test the object's CRC value stored on disk against the actual CRC of the bytes stored on disk. The Address variable must be set to the file address of the block data, not the block header. This function assumes that the data has already been written to the block. Returns true if the object's CRC test good or false if the CRC tests bad. Passes back the object's CRC stored on disk in the "object_crc" variable and the calculated CRC value in the "calc_crc" variable.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadRecordLockHdr">gxDatabaseError gxDatabase::ReadRecordLockHdr(gxRecordLockHeader &amp;hdr, FAU block_address = gxCurrAddress)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read the block's record lock header. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadyForWriting">int gxDatabase::ReadyForWriting()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if the file is ready for writing or false if this is a read only file.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReclaimBestFit">FAU gxDatabase::ReclaimBestFit(__ULWORD__ bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used by the dynamic allocation routines to search for a block that can be reused. This function will search the free space list for an "exact-fit" first and then try to find the "best-fit" for the number of bytes requested. <B>NOTE</B>: The byte size will be adjusted by the dynamic allocation routine to allocate space for the block header plus any block overhead. An exact-fit is a block that matches the exact number of bytes requested. If an exact-fit cannot be found, the next block big enough to hold number of bytes requested plus a block header with overhead and at least one byte left over becomes a "best-fit" block. A "best-fit" search continues until a block with the least number of unused bytes is found. The unused bytes in a "best-fit" block are used to create a new block that will be put back on the free space list. This "best-fit" method is specifically designed to keep the gaps between blocks as small as possible, with the smallest gap being as large as a single block header plus one byte. The "best-fit" method will prevent fragmentation as much as possible but it can be very costly in terms of speed. Returns address of the reclaimed space, or zero if a deleted or removed block of the appropriate size is not found</P>
<B><FONT COLOR="#000080"><P><A NAME="ReclaimFirstFit">FAU gxDatabase::ReclaimFirstFit(__ULWORD__ bytes)</A></B></FONT>&nbsp;-&nbsp;Public member function used by the dynamic allocation routines to search a for block that can be reused. This function will search the free space list for the first deleted block large enough to hold the number of bytes requested. A "first-fit" search continues until the first block big enough to hold the number of bytes requested plus the size a block header with overhead and at least one byte left over is returned. The unused bytes in a "first-fit" block are used to create a new block that will be put back on the free space list. The "first-fit" method will not prevent fragmentation as well as the "best-fit" method but offers a tremendous speed advantage. Returns address of the reclaimed space, or zero if a deleted or removed block of the appropriate size is not found</P>
<B><FONT COLOR="#000080"><P><A NAME="Remove">int gxDatabase::Remove(FAU object_address)</A></B></FONT>&nbsp;-&nbsp;Public member function used to mark a database block removed indicating that the object cannot be undeleted. Returns true if the block was or removed or false if the block was not removed.</P>
<B><FONT COLOR="#000080"><P><A NAME="ResetDatabaseError">gxDatabaseError gxDatabase::ResetDatabaseError()</A></B></FONT>&nbsp;-&nbsp;Public member function used to reset the last reported database error. </P>
<B><FONT COLOR="#000080"><P><A NAME="ResetFileLock">gxDatabaseError gxDatabase::ResetFileLock()</A></B></FONT>&nbsp;-&nbsp;Public member function used to reset the database file lock header. <B>NOTE</B>: This function will clear all the file lock fields without testing the lock or the lock protect. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="ResetRecordLock">gxDatabaseError gxDatabase::ResetRecordLock(FAU block_address = gxCurrAddress)</A></B></FONT>&nbsp;-&nbsp;Public member function used to reset the block's record lock. <B>NOTE</B>: This function will clear all the record lock fields without testing the lock or the lock protect. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="Seek">gxDatabaseError gxDatabase::Seek(FAU offset, gxDatabaseSeekMode mode = gxDBASE_SEEK_BEG)</A></B></FONT>&nbsp;-&nbsp;Public member function used to seek to the specified offset starting at the beginning of the file (<B>gxDBASE_SEEK_BEG</B>), the end of the file (<B>gxDBASE_SEEK_END</B>) or current offset (<B>gxDBASE_SEEK_CUR</B>). Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="SeekTo">FAU gxDatabase::SeekTo(FAU file_address)</A></B></FONT>&nbsp;-&nbsp;Public member function used to seek to the specified address, optimizing the seek operation by moving the file position indicator based on the current stream position. Returns the current file position after performing the seek operation.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetDatabaseError">gxDatabaseError gxDatabase::SetDatabaseError(gxDatabaseError err)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the last reported database error. This function is used to inform the database engine of a fatal error condition. Redundantly returns the "err" value to allow this function to be used as a return value.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetRevisionLetter">void gxDatabase::SetRevisionLetter(__SBYTE__ RevisionLetter)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the database revision letter to a specified value. If a valid revision is not specified the current revision letter will be used. The function is used to detect revision letter errors when new database files are created. </P>
<B><FONT COLOR="#000080"><P><A NAME="StaticArea">FAU gxDatabase::StaticArea()</A></B></FONT>&nbsp;-&nbsp;Public member that returns the size of the pre-allocated static data area. </P>
<B><FONT COLOR="#000080"><P><A NAME="TestFileHeader">int gxDatabase::TestFileHeader()</A></B></FONT>&nbsp;-&nbsp;Public member function used to ensure that the in-memory copy of the file header and the disk copy stay in sync during multiple file access. This function will return zero if no errors are found, or return the number of errors encountered during the test. If any errors are encountered the file header will be re-read from disk. </P>
<B><FONT COLOR="#000080"><P><A NAME="TotalBlocks">FAU gxDatabase::TotalBlocks()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the total number of normal, deleted, and removed blocks. </P>
<B><FONT COLOR="#000080"><P><A NAME="UnDelete">int gxDatabase::UnDelete(FAU object_address)</A></B></FONT>&nbsp;-&nbsp;Public member function used to undelete a secified object if the block has not been removed or reclaimed.</P>
<B><FONT COLOR="#000080"><P><A NAME="UnlockFile">int gxDatabase::UnlockFile(gxDatabaseLockType l_type = gxDBASE_WRITELOCK)</A></B></FONT>&nbsp;-&nbsp;Public member function used to unlock the file following a multi-threaded read or write operation. The "l_type" variable should be set to <B>gxDBASE_WRITELOCK</B> for exclusive file locks owned by a single thread or to <B>gxDBASE_READLOCK</B> for shared file locks owned by multiple threads. Returns a non-zero value if the file cannot be unlocked or the lock variable cannot be changed because it is exclusive or another thread is currently updating it.</P>
<B><FONT COLOR="#000080"><P><A NAME="UnlockRecord">int gxDatabase::UnlockRecord(gxDatabaseLockType l_type = gxDBASE_WRITELOCK,FAU block_address = gxCurrAddress)</A></B></FONT>&nbsp;-&nbsp;Public member function used to unlock a specific node following a multi-threaded read or write operation. The "l_type" variable should be set to <B>gxDBASE_WRITELOCK</B> for exclusive record locks owned by a single thread or to <B>gxDBASE_READLOCK</B> for shared record locks owned by multiple threads. Returns a non-zero value if the record cannot be unlocked or the lock variable cannot be changed because it is exclusive or another thread is currently updating it. </P>
<B><FONT COLOR="#000080"><P><A NAME="Write">gxDatabaseError gxDatabase::Write(const void *buf, __ULWORD__ bytes, FAU file_address = gxCurrAddress,int flush = 1, int bit_test = 1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write a specific number of bytes from a memory buffer to a specified file offset. If the "flush" variable is true, the file buffers will be flushed to disk with each write operation. If the "bit_test" variable if true, the CRC of the buffer will be compared to the CRC of the actual bytes written to disk. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteBlockHdr">gxDatabaseError gxDatabase::WriteBlockHdr(const gxBlockHeader &amp;hdr, FAU block_address = gxCurrAddress)</A></B></FONT>&nbsp;-&nbsp;Public member function to write a block header to the specified block address. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteFileHdr">gxDatabaseError gxDatabase::WriteFileHdr()</A></B></FONT>&nbsp;-&nbsp;Public member function used to write the database file header. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteFileLockHdr">gxDatabaseError gxDatabase::WriteFileLockHdr(const gxFileLockHeader &amp;hdr)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write the lock header to the file. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteObjectChecksum">gxUINT32 gxDatabase::WriteObjectChecksum(FAU object_address)</A></B></FONT>&nbsp;-&nbsp;Used by an application to write a 32-bit checksum for the object at the end of a block. The Address variable must be set to the file address of the block data, not the block header. This function assumes that the data has already been written to the block. Returns the 32-bit CRC checksum value for the object stored in the block.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteRecordLockHdr">gxDatabaseError gxDatabase::WriteRecordLockHdr(const gxRecordLockHeader &amp;hdr, FAU block_address = gxCurrAddress)</A></B></FONT>&nbsp;-&nbsp;Public member function used to write the block's record lock header. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
