<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:44:14 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>btnode class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">B-tree Node Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="gxdbase.htm#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="gxheader.htm#Constants">Constants</A><BR>
<A HREF="gxbtree.htm#TypeDefinitions">Type Definitions</A><BR>
<A HREF="gxheader.htm#Enumerations">Enumerations</A><BR>
<A HREF="#DataMemebers">Data Members</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The BtreeNode class is used by the <A HREF="gxbtree.htm">gxBtree</A> class to insert, delete, and search for database keys in a node. Database keys are derived from the <A HREF="dbasekey.htm">DatabaseKeyB</A> class and are kept in sorted order within each B-tree node. Both the BtreeNode and DatabaseKeyB classes operate independently of actual key type. The database key class derived from the DatabaseKeyB defines how the keys are sorted within the B-tree nodes. The number keys per node is determined by the node order which must be set each time a BtreeNode object is constructed. </P>
<P><HR></P>
<P><A NAME="DataMemebers"><!-- New Section --><B><FONT SIZE=4>Public Data Members</A></B></FONT> </P>
<B><FONT COLOR="#000080"><P>BtreeNodeOrder_t BtreeNode::node_order</FONT> - </B>Non-persistent data member used to set the B-tree order</P>
<B><FONT COLOR="#000080"><P>BtreeSize_t BtreeNode::key_size - </B></FONT>Non-persistent data member used to set the size of a key plus overhead.</P>
<B><FONT COLOR="#000080"><P>FAU BtreeNode::node_address</B></FONT> - Non-persistent data member used record the file address of this node.</P>
<B><FONT COLOR="#000080"><P>BtreeKeyCount_t BtreeNode::key_count</B></FONT> - Persistent data member used to count how many keys are in use.</P>
<B><FONT COLOR="#000080"><P>FAU BtreeNode::left_child</B></FONT> - Persistent data member used to record the file offset pointing to this node's left child.</P>
<B><FONT COLOR="#000080"><P>char * BtreeNode::key_entries</B></FONT> - Persistent array of database key entries.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#BtreeNode">BtreeNode::BtreeNode()</A><BR>
<A HREF="#BtreeNodeDestructor">BtreeNode::~BtreeNode()</A><BR>
<A HREF="#AppendDatabaseKey">BtreeNode::AppendDatabaseKey()</A><BR>
<A HREF="#DeleteDatabaseKey">BtreeNode::DeleteDatabaseKey()</A><BR>
<A HREF="#FindKeyLocation">BtreeNode::FindKeyLocation()</A><BR>
<A HREF="#GetBranch">BtreeNode::GetBranch()</A><BR>
<A HREF="#HasFew">BtreeNode::HasFew()</A><BR>
<A HREF="#HasMany">BtreeNode::HasMany()</A><BR>
<A HREF="#HighestKey">BtreeNode::HighestKey()</A><BR>
<A HREF="#InsertDatabaseKey">BtreeNode::InsertDatabaseKey()</A><BR>
<A HREF="#IsEmpty">BtreeNode::IsEmpty()</A><BR>
<A HREF="#IsFull">BtreeNode::IsFull()</A><BR>
<A HREF="#LoadKey">BtreeNode::LoadKey()</A><BR>
<A HREF="#MergeNode">BtreeNode::MergeNode()</A><BR>
<A HREF="#OverWriteDatabaseKey">BtreeNode::OverWriteDatabaseKey()</A><BR>
<A HREF="#SizeOfBtreeNode">BtreeNode::SizeOfBtreeNode()</A><BR>
<A HREF="#SplitNode">BtreeNode::SplitNode()</A></P>
<B><FONT COLOR="#000080"><P><A NAME="BtreeNode">BtreeNode::BtreeNode()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. This constructor will not allocate any memory for the entry key array.</P>
<B><FONT COLOR="#000080"><P><A NAME="BtreeNode_overload_1">BtreeNode::BtreeNode(BtreeSize_t dbkey_size, BtreeNodeOrder_t order)</A></B></FONT>&nbsp;-&nbsp;Class constructor used to set the database key size and the node order for this object. This constructor is responsible for allocating memory for the entry key array based on the key size and node order.</P>
<B><FONT COLOR="#000080"><P><A NAME="BtreeNodeDestructor">BtreeNode::~BtreeNode()</A></B></FONT>&nbsp;-&nbsp;Class destructor responsible for release the memory allocated for the entry key array.</P>
<B><FONT COLOR="#000080"><P><A NAME="AppendDatabaseKey">void BtreeNode::AppendDatabaseKey(DatabaseKeyB &amp;key)</A></B></FONT>&nbsp;-&nbsp;Public member function used to append a database key to the end of this node.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteDatabaseKey">void BtreeNode::DeleteDatabaseKey(BtreeKeyLocation_t key_location)</A></B></FONT>&nbsp;-&nbsp;Public member function used to delete the database key at specified location.</P>
<B><FONT COLOR="#000080"><P><A NAME="FindKeyLocation">int BtreeNode::FindKeyLocation(const DatabaseKeyB &amp;key, DatabaseKeyB &amp;compare_key, BtreeKeyLocation_t &amp;key_location)</A></B></FONT>&nbsp;-&nbsp;Public member function used to find the key location. Returns 0 if an entry for the key already exists, 1 if the specified key is greater then all the entries in this node, or -1 if the specified key is less the all the entries in this node. The key class derived from the abstract DatabaseKeyB base class defines the key methods used by this function to compare the keys. The key location or the branch to keep searching down the tree is passed back in the "key_location" variable. <B>NOTE</B>: The "DatabaseKeyB&amp; compare_key" is a type cast from the derived key class back to a DatabaseKeyB base type and is required to perform the comparison because the comparison operators are not defined in the DatabaseKeyB base class.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetBranch">FAU BtreeNode::GetBranch(BtreeKeyLocation_t key_location)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the node's left or right child based on the specified key location. The -1th branch represents the nodes left child. The right branch of this key will be returned starting from the 0th branch on.</P>
<B><FONT COLOR="#000080"><P><A NAME="HasFew">int BtreeNode::HasFew()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if this node has fewer than the minimum number of entries.</P>
<B><FONT COLOR="#000080"><P><A NAME="HasMany">int BtreeNode::HasMany()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if this node has more than the minimum number of entries required.</P>
<B><FONT COLOR="#000080"><P><A NAME="HighestKey">BtreeKeyLocation_t BtreeNode::HighestKey()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the position of the highest key in the node.</P>
<B><FONT COLOR="#000080"><P><A NAME="InsertDatabaseKey">void BtreeNode::InsertDatabaseKey(DatabaseKeyB &amp;key, BtreeKeyLocation_t key_location)</A></B></FONT>&nbsp;-&nbsp;Public member function used to insert a database key into the node at the specified location.</P>
<B><FONT COLOR="#000080"><P><A NAME="IsEmpty">int BtreeNode::IsEmpty()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if this node is empty.</P>
<B><FONT COLOR="#000080"><P><A NAME="IsFull">int BtreeNode::IsFull()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if this node is full.</P>
<B><FONT COLOR="#000080"><P><A NAME="LoadKey">void BtreeNode::LoadKey(DatabaseKeyB &amp;key, BtreeKeyLocation_t key_location)</A></B></FONT>&nbsp;-&nbsp;Public member function used to copy the key at the specified location into the "key" variable.</P>
<B><FONT COLOR="#000080"><P><A NAME="MergeNode">void BtreeNode::MergeNode(BtreeNode &amp;node)</A></B></FONT>&nbsp;-&nbsp;Public member function used to merge this node with the specified node.</P>
<B><FONT COLOR="#000080"><P><A NAME="OverWriteDatabaseKey">void BtreeNode::OverWriteDatabaseKey(DatabaseKeyB &amp;key,BtreeKeyLocation_t key_location)</A></B></FONT>&nbsp;-&nbsp;Public member function used to overwrite the key at the specified location.</P>
<B><FONT COLOR="#000080"><P><A NAME="SizeOfBtreeNode">size_t BtreeNode::SizeOfBtreeNode()</A></B></FONT>&nbsp;-&nbsp;Public member function that calculates the total size of this Btree node.</P>
<B><FONT COLOR="#000080"><P><A NAME="SplitNode">void BtreeNode::SplitNode(BtreeNode &amp;node, BtreeKeyLocation_t split_location)</A></B></FONT>&nbsp;-&nbsp;Public member function used to split this node by moving the keys, starting at the "split_location", into specified node.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
