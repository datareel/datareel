<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:44:19 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>pod class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Persistent Object Database Manager </H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="gxdbase.htm#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="#Constants">Constants</A><BR>
<A HREF="gxbtree.htm#TypeDefinitions">Type Definitions</A><BR>
<A HREF="gxheader.htm#Enumerations">Enumerations</A><BR>
<A HREF="#Structs">Data Structures</A><BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The POD manager and <A HREF="gpersist.htm">Persistent</A> base class comprise a persistent object framework used to create and maintain persistent objects. The POD (Persistent Object Database) manager is used to manage file pointers to data files and multiple index files. When a POD object is instantiated it automatically creates a data file and index file(s), or opens an existing set of files. Data files are files used to store an object's data to disk. All data files are created by the 32/64-bit <A HREF="gxdbase.htm">database engine</A> and maintained by the Persistent base class. Index files are used to navigate the data file by associating a data key with the address where the object's data can be found in the data file. All index files are created by the 32/64-bit database engine and maintained by the <A HREF="gxbtree.htm">B-tree</A> class. Index files were implemented primarily to increase the speed of search operations and can be omitted if indexed navigation is not required by the application. The
 POD manager allows you to use multiple indexes in a single index file or multiple indexes using multiple files. </P>
<P><HR></P>
<P><!-- New Section --><A NAME="Constants"><B><FONT SIZE=4>Constants</A></B></FONT> </P>
<PRE>const unsigned <B>POD_MAX_INDEX</B> = 255; // Max number of index files per database
&nbsp;
// <B>NOTE</B>: The values are only used if no value is specified
const BtreeNodeOrder_t <B>POD_DEFAULT_ORDER</B> = 29; // Default index file order
const BtreeSize_t <B>POD_DEFAULT_KEY_SIZE</B> = 64;   // Default key size</PRE>
<P><A HREF="gxheader.htm#Constants">Database engine constants</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Structs"><B><FONT SIZE=4>Data Structures</A></B></FONT> </P>
<P>The POD index file type is used to store index file variables specific to each open index file managed by the PODIndexFile class.</P>
<FONT COLOR="#008080"><PRE>struct PODIndexFile_t
{
  gxBtree *btree;         // Pointer to the open index file
  BtreeSize_t dbkey_size; // Size of the entry key used by this index
  BtreeNodeOrder_t order; // Order of the B-tree index
  gxClassID cid;          // Optional class ID
  int use_index;          // True if this index file is being used
  int rebuild_index;      // True if this index needs to be rebuilt
};</PRE>
</FONT><P>The POD index file sub-system class is used by the POD manager to open and close multiple index files.</P>
<FONT COLOR="#008080"><PRE>class PODIndexFile
{
public:
  PODIndexFile(unsigned num_indexes);
  ~PODIndexFile();

public:
  gxDatabaseError Open(const char *ifname, unsigned index_number, 
&#9;&#9;       DatabaseKeyB &amp;key_type,
&#9;&#9;       BtreeNodeOrder_t order = POD_DEFAULT_ORDER,  
&#9;&#9;       gxDatabaseAccessMode mode = gxDBASE_READWRITE,
&#9;&#9;       gxClassID cid = (gxClassID_t)-1);
  gxDatabaseError Close(unsigned index_number);

public:
  PODIndexFile_t *index_file[POD_MAX_INDEX]; // Array of POD index files
  unsigned n_indexes;  // Total number of index files in use by this database
  unsigned curr_index; // Current index file in use
};</PRE>
</FONT><B><FONT COLOR="#000080"><P><A NAME="PODIndexFile">PODIndexFile::PODIndexFile(unsigned num_indexes)</A></B></FONT>&nbsp;-&nbsp;Constructor used to allocate an array large enough the specified number of index files.</P>
<B><FONT COLOR="#000080"><P>PODIndexFile::~PODIndexFile()</B></FONT>&nbsp;-&nbsp;Class destructor responsible for de-allocating memory for the index file array when a PODIndexFile object is destroyed.</P>
<B><FONT COLOR="#000080"><P>gxDatabaseError PODIndexFile::Close(unsigned index_number)</B></FONT>&nbsp;-&nbsp;Public member function used to close an open index file. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P>gxDatabaseError PODIndexFile::Open(const char *ifname, unsigned index_number, DatabaseKeyB &amp;key_type, BtreeNodeOrder_t order = POD_DEFAULT_ORDER, gxDatabaseAccessMode mode = gxDBASE_READWRITE,gxClassID cid = (gxClassID_t)-1);</B></FONT>&nbsp;-&nbsp;Public member function used to open an existing index file or create a new one if the specified file name does not exist. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#POD">POD::POD()</A><BR>
<A HREF="#PODDestructor">POD::~POD()</A><BR>
<A HREF="#Close">POD::Close()</A><BR>
<A HREF="#CloseDataFile">POD::CloseDataFile()</A><BR>
<A HREF="#CloseIndex">POD::CloseIndex()</A><BR>
<A HREF="#CreateDataFile">POD::CreateDataFile()</A><BR>
<A HREF="#CreateIndex">POD::CreateIndex()</A><BR>
<A HREF="#DataFileExceptionMessage">POD::DataFileExceptionMessage()</A><BR>
<A HREF="#DisableIndex">POD::DisableIndex()</A><BR>
<A HREF="#EnableIndex">POD::EnableIndex()</A><BR>
<A HREF="#Exists">POD::Exists()</A><BR>
<A HREF="#GetDataFileError">POD::GetDataFileError()</A><BR>
<A HREF="#GetIndexFileError">POD::GetIndexFileError()</A><BR>
<A HREF="#Index">POD::Index()</A><BR>
<A HREF="#IndexFileExceptionMessage">POD::IndexFileExceptionMessage()</A><BR>
<A HREF="#Open">POD::Open()</A><BR>
<A HREF="#OpenDataFile">POD::OpenDataFile()</A><BR>
<A HREF="#OpenIndex">POD::OpenIndex()</A><BR>
<A HREF="#OpenIndexFile">POD::OpenIndexFile()</A><BR>
<A HREF="#RebuildIndex">POD::RebuildIndex()</A><BR>
<A HREF="#Release">POD::Release()</A><BR>
<A HREF="#ReleaseDataFile">POD::ReleaseDataFile()</A><BR>
<A HREF="#ReleaseIndexFile">POD::ReleaseIndexFile()</A><BR>
<A HREF="#SetDataFileError">POD::SetDataFileError()</A><BR>
<A HREF="#SetIndexFileError">POD::SetIndexFileError()</A><BR>
<A HREF="#UsingIndex">POD::UsingIndex()</A></P>
<P><BR>
<A NAME="POD"><B><FONT COLOR="#000080">POD::POD()</A></B></FONT>&nbsp;-&nbsp;Default class constructor. </P>
<B><FONT COLOR="#000080"><P><A NAME="POD_overload_1">POD::POD(const POD &amp;ob)</A></B></FONT>&nbsp;-&nbsp;Private class constructor used to disallow copying. </P>
<B><FONT COLOR="#000080"><P>void POD::operator=(const POD &amp;ob)</B></FONT>&nbsp;-&nbsp;Private member function used to disallow assignment.</P>
<B><FONT COLOR="#000080"><P><A NAME="PODDestructor">POD::~POD()</A></B></FONT>&nbsp;-&nbsp;Class destructor responsible for closing all open files when a POD object is destroyed.</P>
<B><FONT COLOR="#000080"><P><A NAME="Close">gxDatabaseError POD::Close()</A></B></FONT>&nbsp;-&nbsp;Public member function used to close the database, disconnecting both the data and index files. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="CloseDataFile">gxDatabaseError POD::CloseDataFile()</A></B></FONT>&nbsp;-&nbsp;Public member function used to disconnect the database from the file. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="CloseIndex">gxDatabaseError POD::CloseIndex(unsigned index_number)</A></B></FONT>&nbsp;-&nbsp;Public member function used to disconnects the database from the index file. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="CreateDataFile">gxDatabaseError POD::CreateDataFile(const char *fname, FAU static_size = (FAU_t)</A>0)</B></FONT>&nbsp;-&nbsp;Public member function used to create a new data file. The "static_size" variable is used to reserve a specified number of bytes that will not be affected by the dynamic allocation routines. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="CreateIndex">gxDatabaseError POD::CreateIndex(const char *fname, unsigned index_number, DatabaseKeyB &amp;key_type, BtreeNodeOrder_t order, int num_trees = 1)</A></B></FONT>&nbsp;-&nbsp;Public member function to create a new index file. The "num_trees" variable is used to specify how many trees this index file will contain.</P>
<B><FONT COLOR="#000080"><P><A NAME="DataFileExceptionMessage">const char *POD::DataFileExceptionMessage()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a null terminated string, which can be used to log or print the last reported data file exception. </P>
<B><FONT COLOR="#000080"><P><A NAME="DisableIndex">void POD::DisableIndex()</A></B></FONT>&nbsp;-&nbsp;Public member function used to disable the use of index files. </P>
<B><FONT COLOR="#000080"><P><A NAME="EnableIndex">void POD::EnableIndex()</A></B></FONT>&nbsp;-&nbsp;Public member function used to enable the use of index files after a call to the POD::DisableIndex() function.</P>
<B><FONT COLOR="#000080"><P><A NAME="Exists">int POD::Exists()</A></B></FONT>&nbsp;-&nbsp;Public member function the returns true is the data file exists or false is the data file had to be created during a database open call.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetDataFileError">gxDatabaseError POD::GetDataFileError()</A></B></FONT>&nbsp;-&nbsp;Public member function the returns an error code representing the last reported data file error.</P>
<B><FONT COLOR="#000080"><P><A NAME="GetIndexFileError">gxDatabaseError POD::GetIndexFileError(unsigned index_number = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function the returns an error code representing the last reported index file error.</P>
<B><FONT COLOR="#000080"><P><A NAME="Index">gxBtree *POD::Index(unsigned index_number = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a pointer to the Btree index file for the specified index number or a null pointer if the index number is out of range.</P>
<B><FONT COLOR="#000080"><P><A NAME="IndexFileExceptionMessage">const char *POD::IndexFileExceptionMessage(unsigned index_number = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a null terminated string, which can be used to log or print the last reported index file exception.</P>
<B><FONT COLOR="#000080"><P><A NAME="Open">gxDatabaseError POD::Open(const char *dfname, const char *ifname, DatabaseKeyB &amp;key_type, BtreeNodeOrder_t order = POD_DEFAULT_ORDER, gxDatabaseAccessMode mode = gxDBASE_READWRITE, int use_index = 1, FAU static_size = (FAU_t)</A>0, int num_trees = 1)</B></FONT>&nbsp;-&nbsp;Public member function used to open an existing database or create a new one using a single index file. Returns a non-zero value to indicate an error condition or zero if successful. If the "use_index" variable is false this database will not use an index file.  The "num_trees" variable is used to specify how many trees the index file will contain.</P>
<B><FONT COLOR="#000080"><P><A NAME="Open_overload_1">gxDatabaseError POD::Open(const char *dfname, PODIndexFile *ix_ptr, gxDatabaseAccessMode mode = gxDBASE_READWRITE,FAU static_size = (FAU_t)</A>0)</B></FONT>&nbsp;-&nbsp;Public member function used to open an existing database or create a new one using multiple index files with different key types. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="Open_overload_2">gxDatabaseError POD::Open(const char *dfname, char *ifname[POD_MAX_INDEX], unsigned num_indexes, DatabaseKeyB &amp;key_type, BtreeNodeOrder_t order = POD_DEFAULT_ORDER, gxDatabaseAccessMode mode = gxDBASE_READWRITE, FAU static_size = (FAU_t)</A>0)</B></FONT>&nbsp;-&nbsp;Public member function used to open an existing database or create a new one using multiple index files that use the same key type. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="OpenDataFile">gxDatabaseError POD::OpenDataFile(const char *fname, gxDatabaseAccessMode mode = gxDBASE_READWRITE)</A></B></FONT>&nbsp;-&nbsp;Public member function used to open a data file. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="OpenDataFile_overload_1">gxDatabase *POD::OpenDataFile()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a pointer to the open data file or a null pointer if no data file is currently open.</P>
<B><FONT COLOR="#000080"><P><A NAME="OpenIndex">gxDatabaseError POD::OpenIndex(const char *fname, unsigned index_number, DatabaseKeyB &amp;key_type, BtreeNodeOrder_t order,gxDatabaseAccessMode mode = gxDBASE_READWRITE)</A></B></FONT>&nbsp;-&nbsp;Public member function used to open an index file. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="OpenIndexFile">PODIndexFile *POD::OpenIndexFile()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns a pointer to the open index file array or a null pointer if no index files are currently open.</P>
<B><FONT COLOR="#000080"><P><A NAME="RebuildIndex">int POD::RebuildIndex(unsigned index_number = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if the current index file needs to be rebuilt.</P>
<B><FONT COLOR="#000080"><P><A NAME="Release">void POD::Release()</A></B></FONT>&nbsp;-&nbsp;Public member function used to reset the data file and index file pointers to zero without closing the files or performing any other action. <B>NOTE</B>: This is function used to reset the file pointers when more the one object is referencing this POD database and the database has been closed or the file pointers have been deleted. You can also use the a Release() class to signal that this object is finished with the file pointers and can be deleted without affecting other objects currently using these files.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReleaseDataFile">void POD::ReleaseDataFile()</A></B></FONT>&nbsp;-&nbsp;Public member function used to reset the data file pointer to zero without closing the file or performing any other action. <B>NOTE</B>: This function is used to reset the data file pointer when more the one object is referencing this data file pointer and the file has been closed or the pointer has been deleted.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReleaseIndexFile">void POD::ReleaseIndexFile()</A></B></FONT>&nbsp;-&nbsp;Public member function used to reset the index file pointer to zero without closing the file or performing any other action. <B>NOTE</B>: This function is used to reset the index file pointer when more the one object is referencing this index file pointer and the file has been closed or the pointer has been deleted.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetDataFileError">gxDatabaseError POD::SetDataFileError(gxDatabaseError err)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the last reported data file error. This function is used to inform the database engine of a fatal error condition. Redundantly returns the "err" value to allow this function to be used as a return value.</P>
<B><FONT COLOR="#000080"><P><A NAME="SetIndexFileError">gxDatabaseError POD::SetIndexFileError(gxDatabaseError err, unsigned index_number = 0)</A></B></FONT>&nbsp;-&nbsp;Public member function used to set the last reported index file error. This function is used to inform the database engine of a fatal error condition. Redundantly returns the "err" value to allow this function to be used as a return value. </P>
<B><FONT COLOR="#000080"><P><A NAME="UsingIndex">int POD::UsingIndex()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if this database is using an index file.</P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>

<P ALIGN="CENTER"></P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
