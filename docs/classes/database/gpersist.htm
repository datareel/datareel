<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:43:47 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gpersist class</title>
    </head>
    <body>




<P><!-- HTML file generated by: inc2help version 1034.101 --></P>
<H1 ALIGN="CENTER">Persistent Base Class</H1>
<P><HR></P>
<B><U><FONT SIZE=4><P>Topics</B></U></FONT>:</P>
<P><A HREF="#Overview">Overview</A><BR>
<A HREF="gxdbase.htm#ConditionalDirectives">Conditional Directives</A><BR>
<A HREF="pod.htm#Constants">Constants</A><BR>
<A HREF="gxbtree.htm#TypeDefinitions">Type Definitions</A><BR>
<A HREF="gxheader.htm#Enumerations">Enumerations</A><BR>
<A HREF="#Structs">Data Structures</A> <BR>
<A HREF="#Functions">Functions</A></P>
<P><HR></P>
<P><!-- New Section --><A NAME="Overview"><B><FONT SIZE=4>Overview</A></B></FONT> </P>
<P>The <A HREF="pod.htm">POD</A> manager and Persistent base class comprise a persistent object framework used to create and maintain persistent objects. The Persistent base class is an abstract class used to define the interface that makes an object persistent. A persistent object is an object that saves its state in-between program invocations. Normally an object's data, stored in memory, is lost when the program terminates. Persistent objects store their data both in memory and in a disk file. When the program is terminated and restarted again, the persistent object can restore its last state by loading its data from the disk file. </P>
<P>In order for the objects of a class to become persistent, the class must inherit the Persistent base class, and define the methods needed to store its objects to disk. The Persistent base class will use the methods defined in the derived class to maintain the data file and index file(s) the database is connected to. The POD (Persistent Object Database) manager is used to manage file pointers to data files and multiple index files. Data files are used to store an object's data to disk. All data files are created by the 32/64-bit <A HREF="gxdbase.htm">database engine</A> and maintained by the Persistent base class. Index files are used to navigate the data file by associating a data key with the address where the object's data can be found in the data file. All index files are created by the 32/64-bit database engine and maintained by the <A HREF="gxbtree.htm">B-tree</A> class. </P>
<P>The public member functions of the Persistent base class will become public member functions in the derived class. The protected member functions and data members will become private members of the derived class. Pure virtual functions are used to define the persistent object interface. The derived class must override the pure virtual functions and define its own procedures for reading, writing, deleting, and searching for its objects in the database. This feature allows you to determine which data members of the derived class are stored in disk. </P>
<P>The Persistent base class is designed to work with or without index files. Index files add relational proprieties to the database. They are used to rapidly locate the objects in the data file using a B-tree algorithm. The B-tree nodes are composed of multiple entry keys consisting of a user-defined key type and a right child pointer. The entry keys are initialized and manipulated by the methods defined in the derived class. The Persistent base class provides the derived class with functions to add, remove, and find keys in the index file. The user-defined key type is responsible for associating data file addresses with the data key. This is generally accomplished by embedding an object ID in the data key. An object ID refers to the data file address of the object. Using data file addresses to identify objects ensures that each object will have a unique ID and allows the index file(s) to index duplicate key names.</P>
<P>The Persistent base class provides the derived class with special functions for reading and writing character strings to data files. Strings are stored by writing the length of the string in a 32-bit integer value and then writing the string itself to the file. If the string is zero bytes in length, one byte will be allocated for the string and a null byte is written in place of the zero length string. When reading a string from the data file, the string length stored on disk is used to allocate a memory buffer for the string plus a null byte. The last byte of the memory buffer is null-terminated. <B>NOTE</B>: With the exception of a zero length string, a null byte is never written at the end of the string. A string must always be null-terminated in memory, unless it is being used to represent a pattern of raw bytes.</P>
<P>Methods for reading and writing user defined types, pointers, and references within an object must be defined in the class derived from the Persistent base class. The gxDatabase engine provides its own <A HREF="idtypes.htm">platform interoperable integers</A> to represent 16/32/64 bit signed and unsigned integers and 64 bit double precision floating point values. The persistent object database files will become platform dependent if built-in types such as short, int, long, float, or double are as persistent data members. </P>
<P><HR></P>
<P><!-- New Section --><A NAME="Structs"><B><FONT SIZE=4>Data Structures</A></B></FONT> </P>
<P>The object header data structure is used to represent the object headers. Object headers are an optional method used to identify objects in the data file by a unique class and object identification number. </P>
<FONT COLOR="#008080"><PRE>// Object header use to ID objects in the data file
struct gxObjectHeader
{
  gxClassID ClassID;   // Class Identification number
  gxObjectID ObjectID; // Object Identification number
};</PRE>
</FONT><P>Object headers should always be stored directly after database block headers. The gxObjectHeader structure stores the class identification number and the object identification number for database objects. Unique object ID numbers can easily be obtained by using the data address to identify objects in the data and index file(s). Using the data file address ensures that the identity of each object will be unique and allows duplicate objects to be stored in the database. The class ID number is an arbitrary value used to identify an object in the database as being an object of a particular class. <B>NOTE</B>: Due to portability issues between the various C++ compilers the Persistent base class does not use RTTI (Run Time Type Information) to identify the objects in the database.</P>
<P><HR></P>
<P><!-- New Section --><A NAME="Functions"><B><FONT SIZE=4>Functions</A></B></FONT> </P>
<P><A HREF="#gxPersistent">gxPersistent::gxPersistent()</A><BR>
<A HREF="#AddKey">gxPersistent::AddKey()</A><BR>
<A HREF="#Connect">gxPersistent::Connect()</A><BR>
<A HREF="#Delete">gxPersistent::Delete()</A><BR>
<A HREF="#DeleteKey">gxPersistent::DeleteKey()</A><BR>
<A HREF="#DeleteObject">gxPersistent::DeleteObject()</A><BR>
<A HREF="#Find">gxPersistent::Find()</A><BR>
<A HREF="#FindKey">gxPersistent::FindKey()</A><BR>
<A HREF="#FindObject">gxPersistent::FindObject()</A><BR>
<A HREF="#ObjectAddress">gxPersistent::ObjectAddress()</A><BR>
<A HREF="#ObjectLength">gxPersistent::ObjectLength()</A><BR>
<A HREF="#Read">gxPersistent::Read()</A><BR>
<A HREF="#ReadObject">gxPersistent::ReadObject()</A><BR>
<A HREF="#ReadObjectHeader">gxPersistent::ReadObjectHeader()</A><BR>
<A HREF="#ReadString">gxPersistent::ReadString()</A><BR>
<A HREF="#StringFileLength">gxPersistent::StringFileLength()</A><BR>
<A HREF="#UsingIndex">gxPersistent::UsingIndex()</A><BR>
<A HREF="#Write">gxPersistent::Write()</A><BR>
<A HREF="#WriteObject">gxPersistent::WriteObject()</A><BR>
<A HREF="#WriteObjectHeader">gxPersistent::WriteObjectHeader()</A><BR>
<A HREF="#WriteString">gxPersistent::WriteString()</A></P>
<B><U><P><A NAME="DerivedClassInterface">Derived class interface<A NAME="gxPersistent"></A></B></U>:<BR>
<B><FONT COLOR="#000080">virtual int gxPersistent::Delete()</B></FONT>&nbsp;-&nbsp;Protected pure virtual function that must be defined in the derived class as a private member function. Defines the procedure used to delete an object of the class inheriting the Persistent base class from disk. Must return true if the object was deleted or false if the object could not be deleted. </P>
<B><FONT COLOR="#000080"><P><A NAME="Find">virtual int gxPersistent::Find()</A></B></FONT>&nbsp;-&nbsp;Protected pure virtual function that must be defined in the derived class as a private member function. Used to find an object of the class inheriting the Persistent base class in the database. Must return true if the object was found or false if the object could not be found.</P>
<B><FONT COLOR="#000080"><P><A NAME="ObjectLength">virtual __UWORD__ gxPersistent::ObjectLength()</A></B></FONT>&nbsp;-&nbsp;Protected pure virtual function that must be defined in the derived class as a private member function. Returns the file length of the persistent data members in<A NAME="Read"> the derived class.</P>
<B><FONT COLOR="#000080"><P>virtual gxDatabaseError gxPersistent::Read(FAU object_address)</A></B></FONT>&nbsp;-&nbsp;Protected pure virtual function that must be defined in the derived class as a private member function. Defines the procedure used to read an object of the class inheriting the Persistent base class from disk at the file address specified. Must return zero if successful or a non-zero value corresponding to a <A HREF="gxderror.htm#gxDatabaseError">gxDatabaseError</A> enumerated type if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="Write">virtual gxDatabaseError gxPersistent::Write()</A></B></FONT>&nbsp;-&nbsp;Protected pure virtual function that must be defined in the derived class as a private member function. Defines the procedure used to write an object of the class inheriting the Persistent base class to disk. Must return zero if successful or a non-zero value corresponding to a <A HREF="gxderror.htm#gxDatabaseError">gxDatabaseError</A> enumerated type if an error occurs.</P>
<B><U><P>Member Functions</B></U>:<BR>
<B><FONT COLOR="#000080">gxPersistent::gxPersistent(POD *DB)</A></B></FONT>&nbsp;-&nbsp;Class constructor responsible for connecting the Persistent base class to a POD manager object that represents the open data file and the open index file. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxPersistent_overload_1">gxPersistent::gxPersistent(const POD *DB)</A></B></FONT>&nbsp;-&nbsp;Class constructor responsible for connecting the Persistent base class to a POD manager object that represents the open data file and the open index file.</P>
<B><FONT COLOR="#000080"><P><A NAME="gxPersistent_overload_2">gxPersistent::gxPersistent()</A></B></FONT>&nbsp;-&nbsp;Default constructor used for creating objects that are connected to an open database when initially constructed. </P>
<B><FONT COLOR="#000080"><P><A NAME="gxPersistent_overload_3">gxPersistent::gxPersistent(const gxPersistent &amp;ob)</A></B></FONT>&nbsp;-&nbsp;Private class copy constructor used to disallow copying. </P>
<B><FONT COLOR="#000080"><P>void gxPersistent::operator=(const gxPersistent &amp;ob)</B></FONT>&nbsp;-&nbsp;Private class assignment operator used to disallow assignment.</P>
<B><FONT COLOR="#000080"><P><A NAME="AddKey">int gxPersistent::AddKey(DatabaseKeyB &amp;key, DatabaseKeyB &amp;compare_key, unsigned index_number = 0, int flush = 1)</A></B></FONT>&nbsp;-&nbsp;Protected member function used to insert a key into the index file specified by the "index_number" variable. By default all disk buffers will be flushed following an insertion to maintain synchronization during multiple file access. <B>NOTE</B>: The "DatabaseKeyB&amp; compare_key" is a type cast from the derived key class back to a <A HREF="dbasekey.htm">DatabaseKeyB</A> base type and is required to perform comparisons because the comparison operators are not defined in the DatabaseKeyB base class. Returns true if successful or false if the key could not be inserted.</P>
<B><FONT COLOR="#000080"><P><A NAME="Connect">gxDatabaseError gxPersistent::Connect(POD *DB)</A></B></FONT>&nbsp;-&nbsp;Protected member function used to connect the Persistent base class to a POD manager object that represents the open database.</P>
<B><FONT COLOR="#000080"><P><A NAME="Connect_overload_1">gxDatabaseError gxPersistent::Connect(const POD *DB)</A></B></FONT>&nbsp;-&nbsp;Protected member function used to connect the Persistent base class to a POD manager object that represents the open database.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteKey">int gxPersistent::DeleteKey(DatabaseKeyB &amp;key, DatabaseKeyB &amp;compare_key, unsigned index_number = 0, int flush = 1)</A></B></FONT>&nbsp;-&nbsp;Protected member function used to delete a key from the index file specified by the "index_number" variable. By default all disk buffers will be flushed following an insertion to maintain synchronization during multiple file access. <B>NOTE</B>: The "DatabaseKeyB&amp; compare_key" is a type cast from the derived key class back to a <A HREF="dbasekey.htm">DatabaseKeyB</A> base type and is required to perform comparisons because the comparison operators are not defined in the DatabaseKeyB base class. Returns true if successful or false if the key could not be deleted. </P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteObject">int gxPersistent::DeleteObject(FAU object_address)</A></B></FONT>&nbsp;-&nbsp;Public member function used to delete the object at the specified address according to the method defined in the derived class version of the Persistent::Delete() function. Return true if the object was deleted or false if the object could not be deleted.</P>
<B><FONT COLOR="#000080"><P><A NAME="DeleteObject_overload_1">int gxPersistent::DeleteObject()</A></B></FONT>&nbsp;-&nbsp;Public member function used to delete this object according to the method defined in the derived class version of the Persistent::Delete() function. Return true if the object was deleted or false if the object could not be deleted.</P>
<B><FONT COLOR="#000080"><P><A NAME="FindKey">int gxPersistent::FindKey(DatabaseKeyB &amp;key, DatabaseKeyB &amp;compare_key,unsigned index_number = 0, int test_tree = 1)</A></B></FONT>&nbsp;-&nbsp;Protected member function used find a key in the index file specified by the "index_number" variable. <B>NOTE</B>: The "DatabaseKeyB&amp; compare_key" is a type cast from the derived key class back to a <A HREF="dbasekey.htm">DatabaseKeyB</A> base type and is required to perform comparisons because the comparison operators are not defined in the DatabaseKeyB base class. Returns true if successful or false if the key could not be found.</P>
<B><FONT COLOR="#000080"><P><A NAME="FindObject">int gxPersistent::FindObject()</A></B></FONT>&nbsp;-&nbsp;Public member function used to find this object in the database according to the method defined in the derived class version of the Persistent::Find() function. Returns true if successful or false if the key could not be found.</P>
<B><FONT COLOR="#000080"><P><A NAME="ObjectAddress">FAU gxPersistent::ObjectAddress()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns the data file address of this object or zero if the object address is not known.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadObject">int gxPersistent::ReadObject(FAU object_address)</A></B></FONT>&nbsp;-&nbsp;Public member function used to read an object from the database according to the method defined in the derived class version of the Persistent::Read() function. The object will be read at the specified file address. Returns true if successful or false if the object could not be read.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadObject_overload_1">int gxPersistent::ReadObject()</A></B></FONT>&nbsp;-&nbsp;Public member function used to read this object from the database according to the method defined in the derived class version of the Persistent::Read() function. Returns true if successful or false if the object could not be read.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadObjectHeader">gxDatabaseError gxPersistent::ReadObjectHeader(gxObjectHeader &amp;oh, FAU object_address = (FAU_t)</A>-1)</B></FONT>&nbsp;-&nbsp;Protected member function used to read an object header. Returns zero if successful or a non-zero value corresponding to a <A HREF="gxderror.htm#gxDatabaseError">gxDatabaseError</A> enumerated type if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="ReadString">char *gxPersistent::ReadString(FAU file_address = (FAU_t)</A></B></FONT>&nbsp;-&nbsp;Protected member function used to read a character string from the data file. Returns a pointer to a null terminated string or a null value if an error occurs. <B>NOTE</B>: The calling function must free the memory allocated for this string.</P>
<B><FONT COLOR="#000080"><P><A NAME="StringFileLength">__UWORD__ gxPersistent::StringFileLength(const char *s)</A></B></FONT>&nbsp;-&nbsp;Protected member function used to calculate the total number of bytes to be allocated for a character string in the data file.</P>
<B><FONT COLOR="#000080"><P><A NAME="StringFileLength_overload_1">__UWORD__ gxPersistent::StringFileLength(char *s)</A></B></FONT>&nbsp;-&nbsp;Protected member function used to calculate the total number of bytes to be allocated for a character string in the data file. </P>
<B><FONT COLOR="#000080"><P><A NAME="UsingIndex">int gxPersistent::UsingIndex()</A></B></FONT>&nbsp;-&nbsp;Public member function that returns true if this database if using an index file.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteObject">int gxPersistent::WriteObject(int find = 1)</A></B></FONT>&nbsp;-&nbsp;Public member function used to add a new object to the database according to the method defined in the derived class version of the Persistent::Write() function. By default this function will search the entire index file or data file for the object according to the derived class version of the Persistent::Find() function to determine if the object already exists. If find is false the object will be added without searching the database for duplicate entries. Returns true if successful or false if the object could not be added.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteObjectHeader">gxDatabaseError gxPersistent::WriteObjectHeader(const gxObjectHeader &amp;oh, FAU object_address = (FAU_t)</A></B></FONT>&nbsp;-&nbsp;Protected member function used to write an object header. Returns zero if successful or a non-zero value corresponding to a <A HREF="gxderror.htm#gxDatabaseError">gxDatabaseError</A> enumerated type if an error occurs.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteString">gxDatabaseError gxPersistent::WriteString(const char *s, FAU file_address = (FAU_t)</A></B></FONT>&nbsp;-&nbsp;Protected member function used to write a null terminated character string to the data file. Returns a non-zero value to indicate an error condition or zero if successful.</P>
<B><FONT COLOR="#000080"><P><A NAME="WriteString_overload_1">gxDatabaseError gxPersistent::WriteString(char *s, FAU file_address = (FAU_t)</A></B></FONT>&nbsp;-&nbsp;Protected member function used to write a null terminated character string to the data file. Returns a non-zero value to indicate an error condition or zero if successful. </P>
<P><HR></P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 BORDERCOLOR="#000000">
<TR><TD VALIGN="MIDDLE">
<P ALIGN="CENTER"><B>End Of Document</B></TD>
</TR>
</TABLE>
</CENTER></P>

<P>&nbsp;</P>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
