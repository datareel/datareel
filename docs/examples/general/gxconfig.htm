<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:36:02 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxconfig example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 02/19/1996</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program for the gxConfig class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;stdio.h&gt;
#include "gxconfig.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

<FONT COLOR="#ff0000">// Data structure use to store program gxConfiguration values</FONT>
struct ProgramgxConfig
{
  ProgramgxConfig() { <FONT COLOR="#ff0000">// Set the default values</FONT>
    s_val1 = "YES";
    s_val2 = "NO";
    s_val3 = "TRUE";
    s_val4 = "FALSE";
    i_val = 32768;
    l_val = 2147483647;
    d_val = 1.12345;
  }
  ProgramgxConfig(const ProgramgxConfig &amp;ob) {
    s_val1 = ob.s_val1;
    s_val2 = ob.s_val2;
    s_val3 = ob.s_val3;
    s_val4 = ob.s_val4;
    i_val = ob.i_val; l_val = ob.l_val; d_val = ob.d_val;
  }

  gxString s_val1;
  gxString s_val2;
  gxString s_val3;
  gxString s_val4;
  int i_val;
  long l_val;
  double d_val; 
};

void PausePrg()
{
  cin.get();
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cout &lt;&lt; "\n";
}

void DisplayConfig(gxConfig *CfgData, ProgramgxConfig *cfg)
<FONT COLOR="#ff0000">// Display the program gxConfiguration and load gxConfig values</FONT>
{
  char *s1 = CfgData-&gt;GetStrValue("String1");
  if(!s1) {
    cout &lt;&lt; "String1 section missing from gxConfig file" &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "String1 section of gxConfig file = " &lt;&lt; s1 &lt;&lt; "\n";
    cfg-&gt;s_val1 = s1;
  }

  char *s2 = CfgData-&gt;GetStrValue("String2");
  if(!s2) {
    cout &lt;&lt; "String2 section missing from gxConfig file" &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "String2 section of gxConfig file = " &lt;&lt; s2 &lt;&lt; "\n";
    cfg-&gt;s_val2 = s2;
  }

  char *s3 = CfgData-&gt;GetStrValue("String3");
  if(!s3) {
    cout &lt;&lt; "String3 section missing from gxConfig file" &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "String3 section of gxConfig file = " &lt;&lt; s3 &lt;&lt; "\n";
    cfg-&gt;s_val3 = s3;
  }

  char *s4 = CfgData-&gt;GetStrValue("String4");
  if(!s4) {
    cout &lt;&lt; "String4 section missing from gxConfig file" &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "String4 section of gxConfig file = " &lt;&lt; s4 &lt;&lt; "\n";
    cfg-&gt;s_val4 = s4;
  }

  int i1 = CfgData-&gt;GetIntValue("Int");
  if(!i1) {
    cout &lt;&lt; "Int section missing from gxConfig file" &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "Integer section of gxConfig file = " &lt;&lt; i1 &lt;&lt; "\n";
    cfg-&gt;i_val = i1;
  }

  double d1 = CfgData-&gt;GetFloatValue("Float");
  if(!d1) {
    cout &lt;&lt; "Float section missing from gxConfig file" &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "Floating Point number section of gxConfig file = "
	 &lt;&lt; d1 &lt;&lt; "\n";
    cfg-&gt;d_val = d1;
  }
  
  long l1 = CfgData-&gt;GetLongValue("Long");
  if(!l1) {
    cout &lt;&lt; "Long int section missing from gxConfig file" &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "Long int section of gxConfig file = " &lt;&lt; l1 &lt;&lt; "\n";
    cfg-&gt;l_val = l1;
  }

  cout &lt;&lt; "\n";
}

void MultipleRead(gxConfig *CfgData)
{
  char *ServerName = CfgData-&gt;GetStrValue("ServerName");
  if(!ServerName) {
    cout &lt;&lt; "ServerName value is not set in the gxConfig file" &lt;&lt; "\n";
    return;
  }
  else
    cout &lt;&lt; "Server name = " &lt;&lt; ServerName &lt;&lt; "\n";
  
  char *FullPathName = CfgData-&gt;GetStrValue("FullPathName0");
  if(!FullPathName) {
    cout &lt;&lt; "No path names are set in the gxConfig file" &lt;&lt; "\n";
    return;
  }

  char cfgValue[255];
  long file_num = -1;
  
  while(1) {
    file_num++;
    sprintf(cfgValue, "FullPathName%d", (int)file_num);
    char *buf = CfgData-&gt;GetStrValue(cfgValue);
    if(!buf) break;

    gxString sbuf(buf);
    int offset = 0;
    int index = 0;
    while(1) {
    offset = sbuf.Find("/", offset);
    if(offset != -1) index = offset;
    if(offset == -1) break;
    offset++;
    }
    if(index &gt; 0) sbuf.DeleteAt(0, ++index);

    if(sbuf.length() == 0) {
      cout &lt;&lt; "Invalid file name for " &lt;&lt; cfgValue &lt;&lt; "\n";
      return;
    }
    
    cout &lt;&lt; "Reading: " &lt;&lt; buf &lt;&lt; "\n";
    cout &lt;&lt; "Copying to: " &lt;&lt; sbuf.c_str() &lt;&lt; "\n";

    buf = 0;
    for(int i = 0; i &lt; 255; i++) cfgValue[i] = 0;
  }
  cout &lt;&lt; "\n";
}

void NewParmID(gxConfig *CfgData)
{
  CfgData-&gt;UnLoad();
  CfgData-&gt;SetParmID(":<FONT COLOR="#ff0000">//");</FONT>
  gxString parmName("http");
  CfgData-&gt;ReadComments();
  CfgData-&gt;ReLoad();
  
  gxConfigListNode *ptr = (gxConfigListNode *)CfgData-&gt;GetHead();
  while(ptr) { <FONT COLOR="#ff0000">// Scan until end of list</FONT>
    int offset = 0;
    offset = ptr-&gt;node_data.Find(parmName);
    if(offset != -1) {
      gxConfigListNode *sptr = (gxConfigListNode *)ptr-&gt;next;
      gxString ServerName(sptr-&gt;node_data);
      gxString FullPathName(sptr-&gt;node_data);
      offset = ServerName.Find("/");
      if(offset != -1) {
	ServerName.DeleteAt(offset, (ServerName.length() - offset));
	FullPathName.DeleteAt(0, offset);
	cout &lt;&lt; "Server: " &lt;&lt; ServerName.c_str() &lt;&lt; " Path: "
	     &lt;&lt; FullPathName.c_str() &lt;&lt; "\n";
      }
    }
    ptr = (gxConfigListNode *)ptr-&gt;next;
  }
}

int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  gxConfig *CfgData = new gxConfig;
  ProgramgxConfig *cfg = new ProgramgxConfig;
  int Status;

  <FONT COLOR="#ff0000">// Test for all three overloads</FONT>
  const char *fname = "gxconfig.ini";
  
  cout &lt;&lt; "Loading gxConfig File..." &lt;&lt; "\n";
  Status = CfgData-&gt;Load(fname);
  if(!Status) {
    cout &lt;&lt; "gxConfig file not found!" &lt;&lt; "\n";
    delete CfgData;
    delete cfg;
    return 0;
  }
  else
    cout &lt;&lt; "Processing file: " &lt;&lt; CfgData-&gt;GetFileName() &lt;&lt; "\n";

  DisplayConfig(CfgData, cfg);
  ProgramgxConfig org_gxConfig(*cfg); <FONT COLOR="#ff0000">// Record the original values</FONT>
  
  cout &lt;&lt; "Testing reload function" &lt;&lt; "\n";
  PausePrg();
  CfgData-&gt;ReLoad(fname);
  DisplayConfig(CfgData, cfg);

  cout &lt;&lt; "Writing new values to the file" &lt;&lt; "\n";
  PausePrg();
  CfgData-&gt;ChangeConfigValue("String1", "no");
  CfgData-&gt;ChangeConfigValue("String2", "yes");
  CfgData-&gt;ChangeConfigValue("String3", "false");
  CfgData-&gt;ChangeConfigValue("String4", "true");
  
  CfgData-&gt;ChangeConfigValue("Float", 1.98712);
  CfgData-&gt;ChangeConfigValue("Int", 12345);
  CfgData-&gt;ChangeConfigValue("Long", 23889);
  DisplayConfig(CfgData, cfg);
  
  cout &lt;&lt; "Restoring original values" &lt;&lt; "\n";
  PausePrg();
  CfgData-&gt;ChangeConfigValue("String1", org_gxConfig.s_val1);
  CfgData-&gt;ChangeConfigValue("String2", org_gxConfig.s_val2);
  CfgData-&gt;ChangeConfigValue("String3", org_gxConfig.s_val3);
  CfgData-&gt;ChangeConfigValue("String4", org_gxConfig.s_val4);
  CfgData-&gt;ChangeConfigValue("Int", org_gxConfig.i_val);
  CfgData-&gt;ChangeConfigValue("Float", org_gxConfig.d_val);
  CfgData-&gt;ChangeConfigValue("Long", org_gxConfig.l_val);
  DisplayConfig(CfgData, cfg);

  cout &lt;&lt; "Performing a multiple read and parsing operation" &lt;&lt; "\n";
  PausePrg();
  MultipleRead(CfgData);

  cout &lt;&lt; "Reloading the file with a new parameter ID string" &lt;&lt; "\n";
  PausePrg();
  NewParmID(CfgData);
  
  CfgData-&gt;UnLoad();

  delete CfgData;
  delete cfg;
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
