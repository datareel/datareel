<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:36:08 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxbstree example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 11/07/1996</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program description and details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Test program for the generic binary search tree class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include "gxbstree.h"
#include "bstreei.h"
#include "ustring.h"
#include "dfileb.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

void InputData(UString &amp;sbuf)
<FONT COLOR="#ff0000">// Input a line of text from the console</FONT>
{
  char buf[255];
  cout &lt;&lt; "Input Data: ";
  cin.getline(buf, sizeof(buf));
  sbuf = buf;
}

void ClearInputStream(istream &amp;s)
<FONT COLOR="#ff0000">// Used to clear istream</FONT>
{
  char c;
  s.clear();
  while(s.get(c) &amp;&amp; c != '\n') { ; }
}

int Quit()
<FONT COLOR="#ff0000">// Terminate the program</FONT>
{
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
  return 0;
}

void PausePrg()
<FONT COLOR="#ff0000">// Pause the program </FONT>
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

void Menu(void)
<FONT COLOR="#ff0000">// List the program options</FONT>
{
  cout &lt;&lt; "(A, a)    Add an item to the tree" &lt;&lt; "\n";
  cout &lt;&lt; "(B, b)    Build a tree of strings" &lt;&lt; "\n";
  cout &lt;&lt; "(C, c)    Clear the tree" &lt;&lt; "\n";
  cout &lt;&lt; "(D, d)    Delete an item from the tree" &lt;&lt; "\n";
  cout &lt;&lt; "(E, e)    Extract all the node in sort order" &lt;&lt; "\n";
  cout &lt;&lt; "(F, f)    Find an item in the tree" &lt;&lt; "\n";
  cout &lt;&lt; "(H, h, ?) Help (prints this menu)" &lt;&lt; "\n"; 
  cout &lt;&lt; "(I, i)    Import a dictionary file" &lt;&lt; "\n"; 
  cout &lt;&lt; "(L, l)    List tree items in order" &lt;&lt; "\n";
  cout &lt;&lt; "(Q, q)    Quit this program" &lt;&lt; "\n";
  cout &lt;&lt; "(S, s)    Display the tree statistics" &lt;&lt; "\n";
  cout &lt;&lt; "(R, r)    Extract all the node in reverse order" &lt;&lt; "\n";
  cout &lt;&lt; "(T, t)    Test tree insertion/deletion times" &lt;&lt; "\n";
}

unsigned TreeHeight(gxBStreeNode_t *node)
<FONT COLOR="#ff0000">// Recursive function used to calculate the tree height based</FONT>
<FONT COLOR="#ff0000">// on the maximum of the height of right and left subtrees.</FONT>
{
  unsigned height = 0;
  if(node != 0) {
    unsigned left_height = TreeHeight(node-&gt;left);
    unsigned right_height = TreeHeight(node-&gt;right);
    if(left_height &gt; right_height) {
      height = left_height+1;
    }
    else {
      height = right_height+1;
    }
  }
  return height;
}

void NumNodes(gxBStreeNode_t *node, unsigned &amp;num_nodes)
<FONT COLOR="#ff0000">// Recursive function used to calculate the total number of nodes.</FONT>
{
  while(node) {
    NumNodes(node-&gt;left, num_nodes);
    num_nodes++;
    node = node-&gt;right;
  }
}

void TreeStats(gxBStree&lt;UString&gt; &amp;tree)
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "----- Binary search tree statistics -----" &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  if(tree.IsEmpty()) {
    cout &lt;&lt; "The tree is empty" &lt;&lt; "\n";
    return;
  }
  unsigned num_nodes = 0;
  unsigned height = 0;

  NumNodes(tree.GetRoot(), num_nodes);
  height = TreeHeight(tree.GetRoot());
  
  cout &lt;&lt; "Number of nodes =   " &lt;&lt; num_nodes &lt;&lt; "\n";
  cout &lt;&lt; "Height          =   " &lt;&lt; height &lt;&lt; "\n";

  cout &lt;&lt; "\n";
  UString root, first, last;
  
  cout &lt;&lt; "Root node = " &lt;&lt; tree.GetRoot()-&gt;data &lt;&lt; "\n";
  if(tree.FindFirst(first))
    cout &lt;&lt; "First key = " &lt;&lt; first &lt;&lt; "\n";

  if(tree.FindLast(last))
    cout &lt;&lt; "Last key  = " &lt;&lt; last &lt;&lt; "\n";
  cout &lt;&lt; "\n";
}

void ImportDictionaryFile(gxBStree&lt;UString&gt; &amp;tree)
<FONT COLOR="#ff0000">// Import a list of words in sort order. This function demonstrates</FONT>
<FONT COLOR="#ff0000">// how unbalanced trees are degenerated when a sort ordered list of</FONT>
<FONT COLOR="#ff0000">// items are inserted into the tree.</FONT>
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Importing a dictionary file." &lt;&lt; "\n";

  tree.Clear(); <FONT COLOR="#ff0000">// Clear the tree before importing the file</FONT>
  
  char LineBuffer[df_MAX_LINE_LENGTH];
  int status, key_count = 0;
  UString key;
  UString FileName;
  
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Enter the name of the text file to import" &lt;&lt; "\n";
  InputData(FileName);

  DiskFileB infile(FileName.c_str());
  if(!infile) { <FONT COLOR="#ff0000">// Could not open the istream</FONT>
    cout &lt;&lt; "Could not open file: " &lt;&lt; FileName &lt;&lt; "\n";
    return;
  } 
  
  cout &lt;&lt; "Adding words..." &lt;&lt; "\n";

  <FONT COLOR="#ff0000">// Get CPU clock cycles before entering loop</FONT>
  clock_t begin = clock();

  while(!infile.df_EOF()) {
    if(infile.df_GetLine(LineBuffer, df_MAX_LINE_LENGTH, '\n', 1) != 
       DiskFileB::df_NO_ERROR) {
      break; <FONT COLOR="#ff0000">// Error reading from the disk file</FONT>
    }
    if(strcmp(LineBuffer, "") == 0) continue;
    key = LineBuffer;
    cout &lt;&lt; key.c_str() &lt;&lt; "\n";
    status = tree.Insert(key);
    if(status != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem adding " &lt;&lt; key.c_str() &lt;&lt; "\n";
      return;
    }
    else {
      key_count++;
    }
  }
  
  <FONT COLOR="#ff0000">// Get CPU clock cycles after loop is completed </FONT>
  clock_t end =clock();
  
  <FONT COLOR="#ff0000">// Calculate the elapsed time in seconds. </FONT>
  double elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3); 
  cout &lt;&lt; "Added " &lt;&lt; key_count &lt;&lt; " words in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";

  <FONT COLOR="#ff0000">// Rewind the file</FONT>
  infile.df_Rewind();

  cout &lt;&lt; "Verifying the entries..." &lt;&lt; "\n";
  begin = clock();
  key_count = 0;
  double search_time = 0;

  while(!infile.df_EOF()) {
    if(infile.df_GetLine(LineBuffer, df_MAX_LINE_LENGTH, '\n', 1) != 
       DiskFileB::df_NO_ERROR) {
      break; <FONT COLOR="#ff0000">// Error reading from the disk file</FONT>
    }
    if(strcmp(LineBuffer, "") == 0) continue;

    key = LineBuffer;
    clock_t begin_search = clock();
    status = tree.Find(key);
    clock_t end_search = clock();
    search_time += (double)(end_search - begin_search) / CLOCKS_PER_SEC;

    if (status != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem finding " &lt;&lt; key &lt;&lt; "\n";
      return;
    }
    else {
      key_count++;
    }
  }

  end =clock();
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3);
  cout &lt;&lt; "Verified " &lt;&lt; key_count &lt;&lt; " words in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";
  double avg_search_time = (search_time/(double)key_count) * 1000;
  cout &lt;&lt; "Average search time = " &lt;&lt; avg_search_time &lt;&lt; " milliseconds"
       &lt;&lt; "\n";
  PausePrg();

  <FONT COLOR="#ff0000">// Rewind the file</FONT>
  infile.df_Rewind();

  cout &lt;&lt; "Deleting the entries..." &lt;&lt; "\n";
  begin = clock();
  key_count = 0;
  while(!infile.df_EOF()) {
    if(infile.df_GetLine(LineBuffer, df_MAX_LINE_LENGTH, '\n', 1) != 
       DiskFileB::df_NO_ERROR) {
      break; <FONT COLOR="#ff0000">// Error reading from the disk file</FONT>
    }
    if(strcmp(LineBuffer, "") == 0) continue;

    key = LineBuffer;
    status = tree.Delete(key);

    if (status != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem deleting " &lt;&lt; key &lt;&lt; "\n";
      return;
    }
    else {
      key_count++;
    }
  }

  end =clock();
  cout.precision(3);
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout &lt;&lt; "Deleted " &lt;&lt; key_count &lt;&lt; " words in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";

  <FONT COLOR="#ff0000">// Rewind the file</FONT>
  infile.df_Rewind();

  cout &lt;&lt; "Re-inserting all the words..." &lt;&lt; "\n";
  key_count = 0;
  begin = clock();

  while(!infile.df_EOF()) {
    if(infile.df_GetLine(LineBuffer, df_MAX_LINE_LENGTH, '\n', 1) != 
       DiskFileB::df_NO_ERROR) {
      break; <FONT COLOR="#ff0000">// Error reading from the disk file</FONT>
    }
    if(strcmp(LineBuffer, "") == 0) continue;

    key = LineBuffer;
    status = tree.Insert(key);
    
    if (status != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem adding " &lt;&lt; key &lt;&lt; "\n";
      return;
    }
    else {
      key_count++;
    }
  }
  
  end =clock();
  cout.precision(3);
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout &lt;&lt; "Added " &lt;&lt; key_count &lt;&lt; " words in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";

  infile.df_Close();
  return;
}

void BuildTree(gxBStree&lt;UString&gt; &amp;tree)
<FONT COLOR="#ff0000">// Build a tree of strings.</FONT>
{
  char *aa1 = "dog";
  char *bb1 = "cat";
  char *cc1 = "fish";
  char *dd1 = "mouse";
  char *ee1 = "bird";
  char *ff1 = "pig";
  char *gg1 = "horse";
  char *hh1 = "lion";
  char *ii1 = "snake";
  char *jj1 = "cow";
  char *kk1 = "armadillo";
  char *ll1 = "grouper";
  char *mm1 = "rat";
  char *nn1 = "monkey";
  char *oo1 = "zebra";
  char *pp1 = "starfish";
  char *qq1 = "lizard";
  char *rr1 = "crab";
  char *ss1 = "snail";
  char *tt1 = "gorilla";
  char *uu1 = "lobster";
  char *vv1 = "turkey";
  char *ww1 = "beetle";
  char *xx1 = "shark";
  char *yy1 = "clam";
  char *zz1 = "oyster";

  char *keys[26] = { aa1, bb1, cc1, dd1, ee1, ff1, gg1, hh1, ii1, jj1,
		     kk1, ll1, mm1, nn1, oo1, pp1, qq1, rr1, ss1, tt1,
		     uu1, vv1, ww1, xx1, yy1, zz1 };
  
  const int INSERTIONS = 26; <FONT COLOR="#ff0000">// Number of keys to insert</FONT>
  UString key;
  int i, status;

  tree.Clear();
  
  cout &lt;&lt; "Inserting " &lt;&lt; INSERTIONS &lt;&lt; " keys..." &lt;&lt; "\n";
  for(i = 0; i &lt; INSERTIONS; i++) {
    key = keys[i];  

    status = tree.Insert(key);
    
    if(status != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem adding " &lt;&lt; keys[i] &lt;&lt; " - " &lt;&lt; i &lt;&lt; "\n";
      return;
    }
  }
  TreeStats(tree);
}

void TestTree(gxBStree&lt;UString&gt; &amp;tree)
<FONT COLOR="#ff0000">// Test the tree insertion and deletion times.</FONT>
{
  <FONT COLOR="#ff0000">// Adjust this number to set the number of insertions</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 1 * 1000;       // 1K test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 10 * 1000;      // 10K test</FONT>
  const unsigned long INSERTIONS = 100 * 1000;     <FONT COLOR="#ff0000">// 100K test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 1000 * 1000;    // 1MEG test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 10000 * 1000;   // 10MEG test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 100000 * 1000;  // 100MEG test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 1000000 * 1000; // 1GIG test</FONT>

  cout &lt;&lt; "Inserting " &lt;&lt; INSERTIONS &lt;&lt; " keys..." &lt;&lt; "\n";
  unsigned long i, key_count = 0;
  unsigned long curr_count = 0;
  int status;
  int verify_deletions = 0; <FONT COLOR="#ff0000">// Set to ture to verify all deletions</FONT>
  double insert_time = 0;
  const char *name = "Item";
  char sbuf[255];
  UString key;
  
  <FONT COLOR="#ff0000">// Get CPU clock cycles before entering loop</FONT>
  clock_t begin = clock();

  for(i = 0; i &lt; INSERTIONS; i++) {
    sprintf(sbuf, "%s %d", name, (int)i);
    key = sbuf;
    clock_t begin_insert = clock();
    status = tree.Insert(key);
    clock_t end_insert = clock();
    insert_time += (double)(end_insert - begin_insert) / CLOCKS_PER_SEC;
    key_count++;
    curr_count++;

    if(status != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem adding key - " &lt;&lt; key &lt;&lt; "\n";
      return;
    }
    if(curr_count == 10000) {
      curr_count = 0;
      cout &lt;&lt; "Inserted " &lt;&lt; i &lt;&lt; " keys in " &lt;&lt; insert_time
	   &lt;&lt; " seconds" &lt;&lt; "\n";
    }

  }

  <FONT COLOR="#ff0000">// Get CPU clock cycles after loop is completed </FONT>
  clock_t end =clock();

  <FONT COLOR="#ff0000">// Calculate the elapsed time in seconds. </FONT>
  double elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3); 
  cout &lt;&lt; "Inserted " &lt;&lt; key_count &lt;&lt; " values in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";
  double avg_insert_time = (insert_time/(double)key_count) * 1000;
  cout &lt;&lt; "Average insert time = " &lt;&lt; avg_insert_time &lt;&lt; " milliseconds"  
       &lt;&lt; "\n"; 

  key_count = 0;
  double search_time = 0;
  cout &lt;&lt; "Verifying the insertions..." &lt;&lt; "\n";
  begin = clock();
  for(i = 0; i &lt; INSERTIONS; i++) {
    sprintf(sbuf, "%s %d", name, (int)i);
    key = sbuf;
    clock_t begin_search = clock();
    status = tree.Find(key);
    clock_t end_search = clock();
    key_count++;
    search_time += (double)(end_search - begin_search) / CLOCKS_PER_SEC;
    
    if(status != 1) {
      cout &lt;&lt; "Error finding key - " &lt;&lt; key &lt;&lt; "\n";
      return;
    }
  }

  end =clock();
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3);
  cout &lt;&lt; "Verified " &lt;&lt; key_count &lt;&lt; " values in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";
  double avg_search_time = (search_time/(double)key_count) * 1000;
  cout &lt;&lt; "Average search time = " &lt;&lt; avg_search_time &lt;&lt; " milliseconds"
       &lt;&lt; "\n";

  cout &lt;&lt; "Deleting all the entries..." &lt;&lt; "\n";
  key_count = 0;
  double delete_time = 0;
  begin = clock();
  for(i = 0; i &lt; INSERTIONS; i++) {
    sprintf(sbuf, "%s %d", name, (int)i);
    key = sbuf;
    clock_t begin_delete = clock();
    status = tree.Delete(key);
    clock_t end_delete = clock();
    delete_time += (double)(end_delete - begin_delete) / CLOCKS_PER_SEC;
    key_count++;
    if(status != 1) {
      cout &lt;&lt; "Error deleting key - " &lt;&lt; key &lt;&lt; "\n";
      return;
    }

    if(verify_deletions) { <FONT COLOR="#ff0000">// Verify the remaining key locations</FONT>
      for(unsigned long j = INSERTIONS-1; j != i; j--) {
	sprintf(sbuf, "%s %d", name, (int)j);
	key = sbuf;
	status = tree.Find(key);
	if(status != 1) {
	  cout &lt;&lt; "Error finding key  - " &lt;&lt; j &lt;&lt; "\n";
	  cout &lt;&lt; "After deleting key - " &lt;&lt; i &lt;&lt; "\n";
	  return;
	}
      }
    }
  }

  end =clock();
  cout.precision(3);
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout &lt;&lt; "Deleted " &lt;&lt; key_count &lt;&lt; " values in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";
  double avg_delete_time = (delete_time/(double)key_count) * 1000;
  cout &lt;&lt; "Average delete time = " &lt;&lt; avg_delete_time &lt;&lt; " milliseconds"
       &lt;&lt; "\n";

  cout &lt;&lt; "Re-inserting " &lt;&lt; INSERTIONS &lt;&lt; " keys..." &lt;&lt; "\n";
  key_count = 0;
  insert_time = 0;
  begin = clock();
  for(i = 0; i &lt; INSERTIONS; i++) {
    sprintf(sbuf, "%s %d", name, (int)i);
    key = sbuf;
    clock_t begin_insert = clock();
    status = tree.Insert(key);
    clock_t end_insert = clock();
    insert_time += (double)(end_insert - begin_insert) / CLOCKS_PER_SEC;
    key_count++;
    curr_count++;

    if(status != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem adding key - " &lt;&lt; key &lt;&lt; "\n";
      return;
    }
  }
  end =clock();
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3); 
  cout &lt;&lt; "Inserted " &lt;&lt; key_count &lt;&lt; " values in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";
  avg_insert_time = (insert_time/(double)key_count) * 1000;
  cout &lt;&lt; "Average insert time = " &lt;&lt; avg_insert_time &lt;&lt; " milliseconds"  
       &lt;&lt; "\n"; 
}

void ListInOrder(gxBStree&lt;UString&gt; &amp;tree)
<FONT COLOR="#ff0000">// List all the tree nodes using a tree iterator object.</FONT>
{
  gxBStreeNode&lt;UString&gt; *node = tree.GetRoot();
  gxBStreeIterator tree_iterator(node);
  while((node = (gxBStreeNode&lt;UString&gt; *)tree_iterator.GetNext()) != 0) {
    cout &lt;&lt; node-&gt;data &lt;&lt; "\n";
  }
  cout &lt;&lt; "\n";
}

void ExtractInOrder(gxBStree&lt;UString&gt; &amp;tree)
<FONT COLOR="#ff0000">// Extract all the tree nodes in sort order.</FONT>
{
  UString key;
  while(!tree.IsEmpty()) {
    tree.ExtractFirst(key);
    cout &lt;&lt; key &lt;&lt; "\n";
  }
}

void ExtractInReverseOrder(gxBStree&lt;UString&gt; &amp;tree)
<FONT COLOR="#ff0000">// Extract all the tree nodes in reverse order.</FONT>
{
  UString key;
  while(!tree.IsEmpty()) {
    tree.ExtractLast(key);
    cout &lt;&lt; key &lt;&lt; "\n";
  }
}

int main()
<FONT COLOR="#ff0000">// Test program's main thread of execution</FONT>
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  Menu(); <FONT COLOR="#ff0000">// Display the options menu</FONT>
  
  char key;
  UString key_buf;
  gxBStree&lt;UString&gt; tree;
  int exists;
  int rv = 1;

  while(rv) {
    if (!cin) { 
       ClearInputStream(cin); 
       if (!cin) { 
          cout &lt;&lt; "Input stream error" &lt;&lt; "\n";
          return 0;
       }
    }
    cout &lt;&lt; '&gt;';
    cin &gt;&gt; key;
    if (!cin) continue;
    switch(key) {
      case 'a' : case 'A' :
	ClearInputStream(cin);
	InputData(key_buf);
	tree.Insert(key_buf, &amp;exists);
	if(exists) {
	  cout &lt;&lt; "An entry for " &lt;&lt; key_buf &lt;&lt; " already exists" &lt;&lt; "\n";
	}
	break;

      case 'b' : case 'B' :
	ClearInputStream(cin);
	BuildTree(tree);
	break;

      case 'c' : case 'C' :
	ClearInputStream(cin);
	tree.Clear();
	break;

      case 'd' : case 'D' :
	ClearInputStream(cin);
	InputData(key_buf);
	if(tree.Delete(key_buf)) {
	  cout &lt;&lt; "Removed " &lt;&lt; key_buf &lt;&lt; "\n";
	}
	else {
	  cout &lt;&lt; key_buf &lt;&lt; " does not exists in the tree" &lt;&lt; "\n";
	}
	break;

      case 'e' : case 'E' :
	ClearInputStream(cin);
	ExtractInOrder(tree);
	break;

      case 'r' : case 'R' :
	ClearInputStream(cin);
	ExtractInReverseOrder(tree);
	break;

      case 'f' : case 'F' :
	ClearInputStream(cin);
	InputData(key_buf);
	if(tree.Find(key_buf)) {
	  cout &lt;&lt; "Found entry " &lt;&lt; key_buf &lt;&lt; "\n";
	}
	else {
	  cout &lt;&lt; key_buf &lt;&lt; " does not exists in the tree" &lt;&lt; "\n";
	}
	break;	
      case 'l' : case 'L' : 
	ClearInputStream(cin);
	ListInOrder(tree);
	break;	 

      case 's' : case 'S' :
	ClearInputStream(cin);
	TreeStats(tree);
	break;

      case 'i' : case 'I' :
	ClearInputStream(cin);
	ImportDictionaryFile(tree);
	break;

      case 'q' : case 'Q' :
	tree.Clear();
	rv = Quit();
	break;

      case 't' : case 'T' :
	ClearInputStream(cin);
	TestTree(tree);
	break;

      case '?' : case 'h' : case 'H' :
	ClearInputStream(cin);
	Menu();
	break;

      default:
        cout &lt;&lt; "Unrecognized command" &lt;&lt; "\n";
    }
  }
  
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
