<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:35:14 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>dcache1 example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a simple test program for the device cache class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#include &lt;fstream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "devcache.h"
#include "memblock.h"
#include "membuf.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

<FONT COLOR="#ff0000">// Example class used to create an iostream cache</FONT>
class devCache : public gxDeviceCache
{
public:
  devCache();
  ~devCache() { }

private: <FONT COLOR="#ff0000">// Base class interface</FONT>
  void Read(void *buf, unsigned bytes, gxDeviceTypes dev);
  void Write(const void *buf, unsigned bytes, gxDeviceTypes dev);
};

devCache::devCache()
{ 
  ready_for_writing = 1; 
  ready_for_reading = 1;
}

void devCache::Read(void *buf, unsigned bytes, gxDeviceTypes dev) 
<FONT COLOR="#ff0000">// Derived class buffered read function.</FONT>
{
  switch(dev) {
    case gxDEVICE_CONSOLE:
      if(!cin) {
	ready_for_reading = 0;
	return;
      }
      else {
	ready_for_reading = 1;
      }
      cin.getline((char *)buf, bytes);
      break;

    default:
      break;
  }
}
  
void devCache::Write(const void *buf, unsigned bytes, gxDeviceTypes dev) 
<FONT COLOR="#ff0000">// Derived class buffered write function.</FONT>
{
  switch(dev) {
    case gxDEVICE_CONSOLE:
      if(!cout) {
	ready_for_writing = 0;
	return;
      }
      else {
	ready_for_writing = 1;
      }
      <FONT COLOR="#ff0000">// Write the exact number of bytes allocated during a read operation</FONT>
      <FONT COLOR="#ff0000">// cout.write((char *)buf, bytes);</FONT>

      <FONT COLOR="#ff0000">// In this example "buf" is a null-terminated string</FONT>
      cout &lt;&lt; (char *)buf &lt;&lt; "\n"; 
      break;
      
    default:
      break;
  }
}

void PausePrg()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  devCache device;
  unsigned cache_size = 10;
  gxDeviceBucketCache cache(cache_size);

  if(!cache) {
    cout &lt;&lt; "Could not allocate memory for the cache" &lt;&lt; "\n";
    return 1;
  }
  
  cout &lt;&lt; "Creating a device cache using " &lt;&lt; cache_size 
       &lt;&lt; " cache buckets." &lt;&lt; "\n";
  cout &lt;&lt; "Bucket size = " &lt;&lt; sizeof(gxDeviceBucket) &lt;&lt; "\n";
  cout &lt;&lt; "Reserving " &lt;&lt; (sizeof(gxDeviceBucket) * cache_size) 
       &lt;&lt; " bytes of memory." &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  
  cache.Connect(&amp;device);

  <FONT COLOR="#ff0000">// Setup a pointer to the cache buckets</FONT>
  gxDeviceTypes o_device = gxDEVICE_CONSOLE; <FONT COLOR="#ff0000">// Buffered output device</FONT>
  gxDeviceTypes i_device = gxDEVICE_CONSOLE; <FONT COLOR="#ff0000">// Buffered input device</FONT>
  gxDeviceCachePtr p1(cache, o_device, i_device);

  cout &lt;&lt; "Performing a buffered console read" &lt;&lt; "\n";
  const int num_reads = 5;
  for(int i = 1; i &lt; (num_reads+1); i++) {
    <FONT COLOR="#ff0000">// Prompt the user before performing a buffered console read</FONT>
    cout &lt;&lt; "Enter string #" &lt;&lt; i &lt;&lt; ": ";

    p1.Alloc(255); <FONT COLOR="#ff0000">// Allocate and read cache bucket</FONT>
    if(!p1) {
      cout &lt;&lt; "Error reserving a device cache bucket" &lt;&lt; "\n";
      return 1;
    }
  }
    
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Buckets in use = " &lt;&lt; cache.BucketsInUse() &lt;&lt; "\n";
  cout &lt;&lt; "Flushing the device cache" &lt;&lt; "\n";
  cache.Flush();
  cout &lt;&lt; "Buckets in use = " &lt;&lt; cache.BucketsInUse() &lt;&lt; "\n";
  
  PausePrg();
  
  <FONT COLOR="#ff0000">// Testing the device cache pointer's copy constructor</FONT>
  <FONT COLOR="#ff0000">// and overloaded assignment operator</FONT>
  gxDeviceCachePtr p2(p1);
  gxDeviceCachePtr p3 = p1;
  
  <FONT COLOR="#ff0000">// Construct and initialize some null terminated strings</FONT>
  char *s1 = new char[4];
  char *s2 = new char[4];
  char *s3 = new char[4];
  char *s4 = new char[4];
  strcpy(s1, "CAT"); strcpy(s2, "COW"); strcpy(s3, "DOG"); strcpy(s4, "RAT");
  
  cout &lt;&lt; "Testing the gxDeviceCachePtr overloaded arrow and indirection \
operator" &lt;&lt; "\n";

  <FONT COLOR="#ff0000">// Test the overloaded arrow operator</FONT>
  p2-&gt;Load(s1, 4); <FONT COLOR="#ff0000">// Allocate and load a bucket</FONT>
  if(!p2) {
    cout &lt;&lt; "Error reserving a device cache bucket" &lt;&lt; "\n";
    return 1;
  }
  p2-&gt;Load(s2, 4); <FONT COLOR="#ff0000">// Allocate and load new bucket</FONT>
  p2-&gt;Load(s3, 4);

  <FONT COLOR="#ff0000">// Test the overloaded indirection operator</FONT>
  gxDeviceBucket *b = &amp;(*p3);
  b-&gt;Load(s4, 4);

  cout &lt;&lt; "Flushing the device cache using the bucket cache destructor \
call" &lt;&lt; "\n";  

  <FONT COLOR="#ff0000">// Each bucket stores a unique copy of these memory segments</FONT>
  <FONT COLOR="#ff0000">// so the memory allocated for the strings can safely be deleted</FONT>
  <FONT COLOR="#ff0000">// before the cache is flushed.</FONT>
  delete[] s1;
  delete[] s2;
  delete[] s3;
  delete[] s4;

  return 0; <FONT COLOR="#ff0000">// The bucket cache destructor call will flush the cache</FONT>
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
