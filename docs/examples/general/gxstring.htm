<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:35:46 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxstring example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 11/29/1996  </FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program for the gxString class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "gxstring.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

void PausePrg()
{
#ifndef __AUTORUN_TESTPROG__
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
#endif
}

void ASCIIStringTest()
{
  cout &lt;&lt; "Testing all ASCII string class functions..." &lt;&lt; "\n";
  PausePrg();

  cout &lt;&lt; "Testing constructors..." &lt;&lt; "\n";

  gxString a("The quick brown fox jumps over the lazy dog");
  cout &lt;&lt; a &lt;&lt; "\n";
  
  gxString b;

  gxString c("This is a test");
  cout &lt;&lt; c &lt;&lt; "\n";

  cout &lt;&lt; "Copy constructing a string..." &lt;&lt; "\n";
  gxString d(c);
  cout &lt;&lt; d &lt;&lt; "\n";

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Testing overloaded assignment operators..." &lt;&lt; "\n";
  b = a;
  cout &lt;&lt; b &lt;&lt; "\n";
  b = c;
  cout &lt;&lt; b &lt;&lt; "\n";
  b = "0123456789";
  cout &lt;&lt; b &lt;&lt; "\n";
  
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Testing copy constructor..." &lt;&lt; "\n";
  gxString aa(a);
  cout &lt;&lt; aa &lt;&lt; "\n";
  gxString bb(b);
  cout &lt;&lt; bb &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing overloaded += operator..." &lt;&lt; "\n";
  gxString buf(" 0123456789");
  a += buf;
  cout &lt;&lt; a &lt;&lt; "\n";
  c += " message";
  cout &lt;&lt; c &lt;&lt; "\n";
  c += 'X';
  cout &lt;&lt; c &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing concatenation..." &lt;&lt; "\n";
  gxString s1("String 1"), s2("String 2");
  char *str3 = " and String 3";
  s1.Cat(" and ", 5);
  s1 += s2;
  cout &lt;&lt; s1 &lt;&lt; "\n"; 
  s1.Cat(str3);
  cout &lt;&lt; s1 &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Testing find functions..." &lt;&lt; "\n";
  cout &lt;&lt; s1 &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; "xyz" &lt;&lt; "\n";
  if(s1.Find("xyz") == -1)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Pattern found." &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; str3 &lt;&lt; "\n";
  if(s1.Find(str3, gxstrlen(str3)) == -1)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Pattern found." &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; s2 &lt;&lt; "\n";
  if(s1.Find(s2) == -1)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Pattern found." &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing ifind functions..." &lt;&lt; "\n";
  cout &lt;&lt; s1 &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; "xyz" &lt;&lt; "\n";
  if(s1.IFind("xyz") == -1)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Pattern found." &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; str3 &lt;&lt; "\n";
  if(s1.IFind(str3, gxstrlen(str3)) == -1)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Pattern found." &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; s2 &lt;&lt; "\n";
  if(s1.IFind(s2) == -1)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Pattern found." &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing repeated pattern finding..." &lt;&lt; "\n";
  s1 = "This is a test message";
  cout &lt;&lt; s1 &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; "is" &lt;&lt; "\n";
  int offset = 0;
  while(1) {
    offset = s1.Find("is", offset);
    if (offset == -1) break;
    cout &lt;&lt; "Pattern match found at index: " &lt;&lt; offset &lt;&lt; "\n";
    offset++;
  }

  PausePrg();

  cout &lt;&lt; "Testing delete function..." &lt;&lt; "\n";
  gxString x1("The quick brown fox jumps over the lazy dog");
  cout &lt;&lt; x1 &lt;&lt; "\n";
  char *xx = "fox";
  int Index = x1.Find(xx);
  cout &lt;&lt; "Deleting fox from string..." &lt;&lt; "\n";
  x1.DeleteAt(Index, gxstrlen(xx));
  cout &lt;&lt; x1 &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Testing replace functions..." &lt;&lt; "\n";
  x1 = "The quick brown fox jumps over the lazy dog";
  cout &lt;&lt; x1 &lt;&lt; "\n";
  char *xy = "cat";
  Index = x1.Find(xx);
  cout &lt;&lt; "Replacing fox:" &lt;&lt; "\n";
  x1.ReplaceAt(Index, xy, gxstrlen(xy));  
  cout &lt;&lt; x1 &lt;&lt; "\n";
  cout &lt;&lt; "Replacing jumps:" &lt;&lt; "\n";
  Index = x1.Find("jumps");
  x1.ReplaceAt(Index, "runs ");
  cout &lt;&lt; x1 &lt;&lt; "\n";
  gxString x2("cow");
  cout &lt;&lt; "Replacing dog:" &lt;&lt; "\n";
  Index = x1.Find("dog");
  x1.ReplaceAt(Index, x2);
  cout &lt;&lt; x1 &lt;&lt; "\n";
  
  PausePrg();
  
  cout &lt;&lt; "Testing the insert functions..." &lt;&lt; "\n";
  x1 = "The quick brown fox jumps over the lazy dog";
  cout &lt;&lt; x1 &lt;&lt; "\n";
  char *xz = "and yellow ";
  cout &lt;&lt; "Inserting text into string:" &lt;&lt; "\n";
  Index = x1.Find(xx);
  x1.InsertAt(Index, xz, gxstrlen(xz));
  cout &lt;&lt; x1 &lt;&lt; "\n";
  Index = x1.Find("over");
  x1.InsertAt(Index, "around and ");
  cout &lt;&lt; x1 &lt;&lt; "\n";
  gxString x3("cow and ");
  Index = x1.Find("dog");
  x1.InsertAt(Index, x3);
  cout &lt;&lt; x1 &lt;&lt; "\n";
  
  PausePrg();
  
  cout &lt;&lt; "Testing c_str functions" &lt;&lt; "\n";
  gxString gs("COW");
  const gxString &amp;cs = gs;
  cout &lt;&lt; "String = " &lt;&lt; gs.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Const String = " &lt;&lt; cs.c_str() &lt;&lt; "\n";
  PausePrg();
  
  cout &lt;&lt; "Testing overload subscript operator..." &lt;&lt; "\n";
  char *Message = "This is a test message";
  gxString ss(Message);
  for(unsigned i = 0; i &lt; gxstrlen(Message); i++)
    cout &lt;&lt; ss[i];
  cout &lt;&lt; "\n";
  
  PausePrg();

  cout &lt;&lt; "Testing general-purpose filter functions" &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  
    gxString s("         ?The quick brown fox jumps over the lazy dog\n\r\
0123456789\r\n?~!@#$%^&amp;*()_+&lt;&gt;            ");

  unsigned num;
  cout &lt;&lt; "Original string: " &lt;&lt; "\n";
  cout &lt;&lt; s.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "\n";

  cout &lt;&lt; "Trimming all leading and trailing spaces" &lt;&lt; "\n";
  cout &lt;&lt; "begin" &lt;&lt; s.c_str() &lt;&lt; "end" &lt;&lt; "\n";
  num = s.TrimLeadingSpaces();
  cout &lt;&lt; "Leading spaces = " &lt;&lt; num &lt;&lt; "\n";
  cout &lt;&lt; s.c_str() &lt;&lt; "\n";
  num = s.TrimTrailingSpaces();
  cout &lt;&lt; "Trialing spaces = " &lt;&lt; num &lt;&lt; "\n";
  cout &lt;&lt; s.c_str();
  cout &lt;&lt; "end";

  PausePrg();
  
  cout &lt;&lt; "Changing to upper case" &lt;&lt; "\n";
  if(s.ToUpper()) cout &lt;&lt; s.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Changing to lower case" &lt;&lt; "\n";
  if(s.ToLower()) cout &lt;&lt; s.c_str() &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Replacing carriage returns/line feeds with spaces" &lt;&lt; "\n";
  num = s.ReplaceChar('\r', ' ');
  num = s.ReplaceString("\n", " ");
  cout &lt;&lt; s.c_str() &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Filtering all \'?\' characters" &lt;&lt; "\n";
  num = s.FilterChar('?');
  cout &lt;&lt; s.c_str() &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Filtering the \"he\" string" &lt;&lt; "\n";
  s.FilterString("he");
  cout &lt;&lt; s.c_str() &lt;&lt; "\n";
  
  PausePrg();

  cout &lt;&lt; "Testing overloaded &lt;&lt; operators" &lt;&lt; "\n";
  gxString stream;
  const int i1 = 1; const long i2 = 2; const short i3 = 3;
  int i4 = 255; long i5 =1024; short i6 = 2048;
  unsigned int i7 = 4096; unsigned long i8 = 8192; unsigned short i9 = 16384;
  float f1 = (float)4.22; double f2 = (double)8.092; 
  char c1 = 'A'; char c2 = 'B'; char c3 = 'C'; char c4 = 'D';
  char *str1 = "Output test = "; gxString str2 = "Output test = ";
  
  stream &lt;&lt; "Output test = " &lt;&lt; c1 &lt;&lt; ' ' &lt;&lt; c2 &lt;&lt; ' ' &lt;&lt; c3 &lt;&lt; ' '
	 &lt;&lt; c4 &lt;&lt; "\n";
  cout &lt;&lt; stream;

  stream &lt;&lt; clear &lt;&lt; str1 &lt;&lt; i1 &lt;&lt; " " &lt;&lt; i2 &lt;&lt; " " &lt;&lt; i3 &lt;&lt; " " &lt;&lt; i4 &lt;&lt; " "
	 &lt;&lt; i5 &lt;&lt; " " &lt;&lt; i6 &lt;&lt; " " &lt;&lt; i7 &lt;&lt; " " &lt;&lt; i8 &lt;&lt; " " &lt;&lt; i9 &lt;&lt; "\n";
  cout &lt;&lt; stream;
  
  stream.Clear();
  stream.SetWidth(4); stream.SetFill('0');
  stream &lt;&lt; str2 &lt;&lt; hex &lt;&lt; i1 &lt;&lt; " " &lt;&lt; i2 &lt;&lt; " " &lt;&lt; i3 &lt;&lt; " " 
	 &lt;&lt; i4 &lt;&lt; " " &lt;&lt; i5 &lt;&lt; " " &lt;&lt; i6 &lt;&lt; " " &lt;&lt; i7 &lt;&lt; " " &lt;&lt; i8 
	 &lt;&lt; " " &lt;&lt; i9 &lt;&lt; "\n";
  cout &lt;&lt; stream;

  stream.Clear();
  stream.Precision(2);
  stream &lt;&lt; "Output test = " &lt;&lt; f1 &lt;&lt; " " &lt;&lt; f2 &lt;&lt; "\n";
  stream.Precision(4);
  stream &lt;&lt; "Output test = " &lt;&lt; f1 &lt;&lt; " " &lt;&lt; f2 &lt;&lt; "\n";
  cout &lt;&lt; stream;
  stream &lt;&lt; clear;

  PausePrg();
  cout &lt;&lt; "Testing overloaded &gt;&gt; operators" &lt;&lt; "\n";
  char csbuf[255];
  gxString sb1 = "Input test = ";
  sb1 &lt;&lt; (int)15 &lt;&lt; " " &lt;&lt; (long)25 &lt;&lt; " " &lt;&lt; (short)35 &lt;&lt; " " 
      &lt;&lt; (unsigned int)45 &lt;&lt; " " &lt;&lt; (unsigned long)55 &lt;&lt; " "
      &lt;&lt; (unsigned short)65 &lt;&lt; " " &lt;&lt; (double)1.5 &lt;&lt; " "
      &lt;&lt; (float)2.5 &lt;&lt; " " &lt;&lt; 'A' &lt;&lt; 'B' &lt;&lt; 'C' &lt;&lt; "\n";

  sb1 &gt;&gt; csbuf;
  cout &lt;&lt; csbuf;

  gxString sb2, sb3, sb4, sb5, sb6, sb7, sb8, sb9, sb10, sb11, sb12;
  sb2 &lt;&lt; (int)15; sb3 &lt;&lt; (long)25; sb4 &lt;&lt; (short)35; 
  sb5 &lt;&lt; (unsigned int)45; sb6 &lt;&lt; (unsigned long)55; 
  sb7 &lt;&lt; (unsigned short)65; sb8 &lt;&lt; (double)1.5; 
  sb9 &lt;&lt; (float)2.5; sb10 &lt;&lt; 'A'; sb11 &lt;&lt; 'B'; sb12 &lt;&lt; 'C'; 

  cout &lt;&lt; "Input test = " &lt;&lt; sb2 &lt;&lt; " " &lt;&lt; sb3 &lt;&lt; " " &lt;&lt; sb4 &lt;&lt; " "
       &lt;&lt; sb5 &lt;&lt; " " &lt;&lt; sb6 &lt;&lt; " " &lt;&lt; sb7 &lt;&lt; " " &lt;&lt;  sb8 &lt;&lt; " " &lt;&lt; sb9
       &lt;&lt; " " &lt;&lt; sb10 &lt;&lt; sb11 &lt;&lt; sb12 &lt;&lt; "\n";

  int ib2 = 0; long ib3 = 0; short ib4 = 0; unsigned int ib5 = 0; 
  unsigned long ib6 = 0; unsigned short ib7 = 0; double ib8 = 0; 
  float ib9 = 0; char ib10 = 0; char ib11 = 0; char ib12 = 0;
  
  sb2 &gt;&gt; ib2;
  sb3 &gt;&gt; ib3;
  sb4 &gt;&gt; ib4;
  sb5 &gt;&gt; ib5;
  sb6 &gt;&gt; ib6;
  sb7 &gt;&gt; ib7;
  sb8 &gt;&gt; ib8;
  sb9 &gt;&gt; ib9;
  sb10 &gt;&gt; ib10;
  sb11 &gt;&gt; ib11;
  sb12 &gt;&gt; ib12;

  cout &lt;&lt; "Input test = " &lt;&lt; ib2 &lt;&lt; " " &lt;&lt; ib3 &lt;&lt; " " &lt;&lt; ib4 &lt;&lt; " "
       &lt;&lt; ib5 &lt;&lt; " " &lt;&lt; ib6 &lt;&lt; " " &lt;&lt; ib7 &lt;&lt; " " &lt;&lt;  ib8 &lt;&lt; " " &lt;&lt; ib9
       &lt;&lt; " " &lt;&lt; ib10 &lt;&lt; ib11 &lt;&lt; ib12 &lt;&lt; "\n";

#if defined (__64_BIT_DATABASE_ENGINE__)
  PausePrg();

  cout &lt;&lt; "Testing overloaded &gt;&gt; and &lt;&lt; 64-bit operators" &lt;&lt; "\n";
  __LLWORD__ LL1 = (__LLWORD__)255; 
  const __LLWORD__ LL2 = (__LLWORD__)1024;
  __ULLWORD__ LL3 = (__ULLWORD__)2048; 
  const __ULLWORD__ LL4 = (__LLWORD__)4096;

  stream &lt;&lt; clear &lt;&lt; "64-bit test = " &lt;&lt; LL1 &lt;&lt; " " &lt;&lt; LL2 &lt;&lt; " " &lt;&lt; LL3 
	 &lt;&lt; " " &lt;&lt; LL4 &lt;&lt; "\n";

  stream &gt;&gt; csbuf;
  cout &lt;&lt; csbuf;

  stream.Clear();
  stream.SetWidth(4); stream.SetFill('0');
  stream &lt;&lt; "64-bit test = " &lt;&lt; hex &lt;&lt; LL1 &lt;&lt; " " &lt;&lt; LL2 &lt;&lt; " " 
	 &lt;&lt; LL3 &lt;&lt; " " &lt;&lt; LL4 &lt;&lt; "\n";

  cout &lt;&lt; stream;

  gxString sb64_1, sb64_2, sb64_3, sb64_4;
  sb64_1 &lt;&lt; LL1;
  sb64_2 &lt;&lt; LL2;
  sb64_3 &lt;&lt; LL3;
  sb64_4 &lt;&lt; LL4;

  __LLWORD__ LLn1, LLn2;
  __ULLWORD__ LLn3, LLn4;

  sb64_1 &gt;&gt; LLn1;
  sb64_2 &gt;&gt; LLn2;
  sb64_3 &gt;&gt; LLn3;
  sb64_4 &gt;&gt; LLn4;

  cout &lt;&lt; "64-bit test = " &lt;&lt; (int)LLn1 &lt;&lt; " " &lt;&lt; (int)LLn2 &lt;&lt; " " 
       &lt;&lt; (int)LLn3 &lt;&lt; " " &lt;&lt; (int) LLn4 &lt;&lt; "\n";
#endif

  PausePrg();

  cout &lt;&lt; "Testing escape sequence conversion function" &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  gxString esc_string("This%20is%20a%20test%20for%20%%%20escape%20chars");
  cout &lt;&lt; esc_string.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Converting escape sequences" &lt;&lt; "\n";
  int num_esc = esc_string.ConvertEscapeSeq('%');
  cout &lt;&lt; "Found " &lt;&lt; num_esc &lt;&lt; " escape sequences" &lt;&lt; "\n"; 
  cout &lt;&lt; esc_string.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "\n";

  esc_string = "This#0020is#0020a#0020test#0020for#0020###0020escape\
#0020chars";
  cout &lt;&lt; esc_string.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Converting escape sequences" &lt;&lt; "\n";
  num_esc = esc_string.ConvertEscapeSeq('#', 4);
  cout &lt;&lt; "Found " &lt;&lt; num_esc &lt;&lt; " escape sequences" &lt;&lt; "\n"; 
  cout &lt;&lt; esc_string.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "\n";

  esc_string = "This;020is;020a;020test;020for;020;;;020escape;020chars";
  cout &lt;&lt; esc_string.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Converting escape sequences" &lt;&lt; "\n";
  num_esc = esc_string.ConvertEscapeSeq(';', 3);
  cout &lt;&lt; "Found " &lt;&lt; num_esc &lt;&lt; " escape sequences" &lt;&lt; "\n"; 
  cout &lt;&lt; esc_string.c_str() &lt;&lt; "\n";
  
  PausePrg();

  cout &lt;&lt; "Testing the comparison operators" &lt;&lt; "\n";

#ifndef __AUTORUN_TESTPROG__
  gxString acomp(255), bcomp;
  cout &lt;&lt; "Enter string A&gt;"; cin &gt;&gt; acomp;
  cout &lt;&lt; "Enter string B&gt;"; cin &gt;&gt; bcomp;
#else
  <FONT COLOR="#ff0000">// In auto run mode so do not prompt user for any input</FONT>
  gxString acomp("CAT"), bcomp("cat");
  cout &lt;&lt; "String A = CAT, String B = cat" &lt;&lt; "\n";
#endif

  cout &lt;&lt; "String A == B "; acomp == bcomp ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A != B "; acomp != bcomp ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &lt;  B "; acomp &lt; bcomp ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &lt;= B "; acomp &lt;= bcomp ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &gt;  B "; acomp &gt; bcomp ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &gt;= B "; acomp &gt;= bcomp ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  
  PausePrg();

  cout &lt;&lt; "Testing the case insensitive comparison functions" &lt;&lt; "\n";
  cout &lt;&lt; "String A == B "; 
  acomp.StringICompare(bcomp) == 0 ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A != B "; 
  acomp.StringICompare(bcomp) != 0 ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &lt;  B "; 
  acomp.StringICompare(bcomp) &lt; 0 ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &lt;= B "; 
  acomp.StringICompare(bcomp) &lt;= 0 ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &gt;  B "; 
  acomp.StringICompare(bcomp) &gt; 0 ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &gt;= B "; 
  acomp.StringICompare(bcomp) &gt;= 0 ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing the find last function" &lt;&lt; "\n";
  gxString url("http:<FONT COLOR="#ff0000">//www.example.com:80/docs/index.html");</FONT>
  cout &lt;&lt; "Complete URL: " &lt;&lt; url.c_str() &lt;&lt; "\n"; 
  cout &lt;&lt; "Searching for last \"/\"" &lt;&lt; "\n";
  offset = url.FindLast("/");
  if(offset != -1) {
    cout &lt;&lt; "Found last \"/\" at offset: " &lt;&lt; offset &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "Could not find last \"/\"" &lt;&lt; "\n";
  }
  cout &lt;&lt; "\n";

  cout &lt;&lt; "Testing delete before and after functions" &lt;&lt; "\n";
  gxString ubuf = url;  
  ubuf.DeleteBeforeIncluding(":<FONT COLOR="#ff0000">//");</FONT>
  ubuf.DeleteAfterIncluding(":");
  cout &lt;&lt; "Complete URL: " &lt;&lt; url.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Server: " &lt;&lt; ubuf.c_str() &lt;&lt; "\n";
  ubuf = url;
  ubuf.DeleteAfter("http");
  cout &lt;&lt; "Protocol: " &lt;&lt; ubuf.c_str() &lt;&lt; "\n";
  ubuf = url;
  ubuf.DeleteBeforeLast(":");
  ubuf.DeleteAfterIncluding("/");
  ubuf.DeleteAt(0, 1);
  cout &lt;&lt; "Port: " &lt;&lt; ubuf.c_str() &lt;&lt; "\n";
  ubuf = url;
  ubuf.DeleteBeforeIncluding(":<FONT COLOR="#ff0000">//");</FONT>
  ubuf.DeleteBeforeIncluding("/");
  ubuf.DeleteAfterLastIncluding("/");
  ubuf.InsertAt(0, "/");
  cout &lt;&lt; "Directory: " &lt;&lt; ubuf.c_str() &lt;&lt; "\n";
  ubuf = url;
  ubuf.DeleteBeforeLastIncluding("/");
  cout &lt;&lt; "File: " &lt;&lt; ubuf.c_str() &lt;&lt; "\n";
  ubuf.DeleteBefore(".");
  cout &lt;&lt; "Dot extension: " &lt;&lt; ubuf.c_str() &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing shorthand notation nomenclature" &lt;&lt; "\n";
  long by1 = 519;
  unsigned long by2 = 2133;
  gxString byte_string;
  byte_string &lt;&lt; clear &lt;&lt; "Byte value 1 = " &lt;&lt; shn &lt;&lt; by1 &lt;&lt; " bytes " 
	      &lt;&lt; "Byte value 2 = " &lt;&lt; by2 &lt;&lt; " bytes" &lt;&lt; "\n";
  cout &lt;&lt; byte_string.c_str();
  by1 *= (1000 * 1000);
  by2 *= (1000 * 1000);
  byte_string &lt;&lt; clear &lt;&lt; "Byte value 1 = " &lt;&lt; shn &lt;&lt; by1 &lt;&lt; " bytes " 
	      &lt;&lt; "Byte value 2 = " &lt;&lt; by2 &lt;&lt; " bytes" &lt;&lt; "\n";
  cout &lt;&lt; byte_string.c_str();

#if defined (__64_BIT_DATABASE_ENGINE__)
  __LLWORD__ llby1 = 519;
  __ULLWORD__ llby2 = 2133;
   byte_string &lt;&lt; clear &lt;&lt; "Byte value 1 = " &lt;&lt; shn &lt;&lt; llby1 &lt;&lt; " bytes " 
	      &lt;&lt; "Byte value 2 = " &lt;&lt; llby2 &lt;&lt; " bytes" &lt;&lt; "\n";
  cout &lt;&lt; byte_string.c_str();
  llby1 *= (1000 * 1000);
  llby2 *= (1000 * 1000);
  byte_string &lt;&lt; clear &lt;&lt; "Byte value 1 = " &lt;&lt; shn &lt;&lt; llby1 &lt;&lt; " bytes " 
	      &lt;&lt; "Byte value 2 = " &lt;&lt; llby2 &lt;&lt; " bytes" &lt;&lt; "\n";
  cout &lt;&lt; byte_string.c_str();
  llby1 *= 1000;
  llby2 *= 1000;
  byte_string &lt;&lt; clear &lt;&lt; "Byte value 1 = " &lt;&lt; shn &lt;&lt; llby1 &lt;&lt; " bytes " 
	      &lt;&lt; "Byte value 2 = " &lt;&lt; llby2 &lt;&lt; " bytes" &lt;&lt; "\n";
  cout &lt;&lt; byte_string.c_str();
#endif

  PausePrg();

  cout &lt;&lt; "Testing octal conversion functions" &lt;&lt; "\n";
  gxString o_string;
  int onum1 = 0755;
  int onum2 = 0644;
  int onum3 = 0220;
  o_string &lt;&lt; clear &lt;&lt; oct &lt;&lt; onum1 &lt;&lt; " " &lt;&lt; onum2 &lt;&lt; " " &lt;&lt; onum3 &lt;&lt; "\n";
  cout &lt;&lt; o_string.c_str();

#if defined (__64_BIT_DATABASE_ENGINE__)
  __LLWORD__ lonum1 = 0755;
  __LLWORD__ lonum2 = 0644;
  __LLWORD__ lonum3 = 0220;
  o_string &lt;&lt; clear &lt;&lt; oct &lt;&lt; lonum1 &lt;&lt; " " &lt;&lt; lonum2 &lt;&lt; " " &lt;&lt; lonum3 &lt;&lt; "\n";
  cout &lt;&lt; o_string.c_str();
#endif

  PausePrg();

  cout &lt;&lt; "Testing char trim functions" &lt;&lt; "\n";
  gxString trim_str = "######Test String______";
  cout &lt;&lt; "String = " &lt;&lt; trim_str.c_str() &lt;&lt; "\n";
  trim_str.TrimLeading('#'); trim_str.TrimTrailing('_');
  cout &lt;&lt; "String = " &lt;&lt; trim_str.c_str() &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing substring functions" &lt;&lt; "\n";
  gxString substr("The quick brown fox jumps over the lazy dog");
  cout &lt;&lt; substr.c_str() &lt;&lt; "\n";
  Index = substr.Find("fox");
  cout &lt;&lt; "Testing mid function:" &lt;&lt; "\n";
  gxString Fox = substr.Mid(Index, 3); <FONT COLOR="#ff0000">// 3 characters for fox</FONT>
  cout &lt;&lt; Fox.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Testing left function:" &lt;&lt; "\n";
  gxString The = substr.Left(3); <FONT COLOR="#ff0000">// 3 characters for the</FONT>
  cout &lt;&lt; The.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Testing right function:" &lt;&lt; "\n";
  gxString Dog = substr.Right(3); <FONT COLOR="#ff0000">// 3 characters for dog</FONT>
  cout &lt;&lt; Dog.c_str() &lt;&lt; "\n";

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Exiting ASCII string test" &lt;&lt; "\n";
  PausePrg();
}

void UNICODEStringTest()
{
  cout &lt;&lt; "Testing all Unicode string class functions..." &lt;&lt; "\n";
  PausePrg();

  cout &lt;&lt; "Testing constructors..." &lt;&lt; "\n";

  wchar_t wsbuf[255];

  gxStringw a(gxLTCHAR("The quick brown fox jumps over the lazy dog", wsbuf));
  cout &lt;&lt; a &lt;&lt; "\n";
  
  gxStringw b;
  gxStringw c(gxLTCHAR("This is a test", wsbuf));
  cout &lt;&lt; c &lt;&lt; "\n";
  cout &lt;&lt; "Copy constructing a string..." &lt;&lt; "\n";
  gxStringw d(c);
  cout &lt;&lt; d &lt;&lt; "\n";
  cout &lt;&lt; "\n";


  cout &lt;&lt; "Testing overloaded assignment operators..." &lt;&lt; "\n";
  b = a;
  cout &lt;&lt; b &lt;&lt; "\n";
  b = c;
  cout &lt;&lt; b &lt;&lt; "\n";
  b = gxLTCHAR("0123456789", wsbuf);
  cout &lt;&lt; b &lt;&lt; "\n";

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Testing copy constructor..." &lt;&lt; "\n";
  gxStringw aa(a);
  cout &lt;&lt; aa &lt;&lt; "\n";
  gxStringw bb(b);
  cout &lt;&lt; bb &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing overloaded += operator..." &lt;&lt; "\n";
  gxStringw buf(gxLTCHAR(" 0123456789", wsbuf));

  a += buf;

  cout &lt;&lt; a &lt;&lt; "\n";
  c += gxLTCHAR(" message", wsbuf);
  cout &lt;&lt; c &lt;&lt; "\n";
  c += gxLTCHAR('X', wsbuf);
  cout &lt;&lt; c &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing concatenation..." &lt;&lt; "\n";
  gxStringw s1(gxLTCHAR("String 1", wsbuf)), s2(gxLTCHAR("String 2", wsbuf));
  char *str3 = " and String 3";
  s1.Cat(gxLTCHAR(" and ", wsbuf), 5);
  s1 += s2;
  cout &lt;&lt; s1 &lt;&lt; "\n"; 
  s1.Cat(str3);
  cout &lt;&lt; s1 &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Testing find functions..." &lt;&lt; "\n";
  cout &lt;&lt; s1 &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; "xyz" &lt;&lt; "\n";
  if(s1.Find(gxLTCHAR("xyz", wsbuf)) == -1)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Pattern found." &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; str3 &lt;&lt; "\n";
  if(s1.Find(str3, gxstrlen(str3)) == -1)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Pattern found." &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; s2 &lt;&lt; "\n";
  if(s1.Find(s2) == -1)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Pattern found." &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Testing ifind functions..." &lt;&lt; "\n";
  cout &lt;&lt; s1 &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; "xyz" &lt;&lt; "\n";
  if(s1.IFind(gxLTCHAR("xyz", wsbuf)) == -1)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Pattern found." &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; str3 &lt;&lt; "\n";
  if(s1.IFind(str3, gxstrlen(str3)) == -1)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Pattern found." &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; s2 &lt;&lt; "\n";
  if(s1.IFind(s2) == -1)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Pattern found." &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing repeated pattern finding..." &lt;&lt; "\n";
  s1 = "This is a test message";
  cout &lt;&lt; s1 &lt;&lt; "\n";
  cout &lt;&lt; "Searching for: " &lt;&lt; "is" &lt;&lt; "\n";
  int offset = 0;
  while(1) {
    offset = s1.Find(gxLTCHAR("is", wsbuf), offset);
    if (offset == -1) break;
    cout &lt;&lt; "Pattern match found at index: " &lt;&lt; offset &lt;&lt; "\n";
    offset++;
  }

  PausePrg();

  cout &lt;&lt; "Testing delete function..." &lt;&lt; "\n";
  gxStringw x1(gxLTCHAR("The quick brown fox jumps over the lazy dog", wsbuf));
  cout &lt;&lt; x1 &lt;&lt; "\n";
  wchar_t *xx = gxLTCHAR("fox", wsbuf);
  int Index = x1.Find(xx);
  cout &lt;&lt; "Deleting fox from string..." &lt;&lt; "\n";
  x1.DeleteAt(Index, gxstrlen(xx));
  cout &lt;&lt; x1 &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Testing replace functions..." &lt;&lt; "\n";
  x1 = "The quick brown fox jumps over the lazy dog";
  cout &lt;&lt; x1 &lt;&lt; "\n";
  wchar_t *xy = gxLTCHAR("cat", wsbuf);
  Index = x1.Find(gxLTCHAR("fox", wsbuf));
  cout &lt;&lt; "Replacing fox:" &lt;&lt; "\n";
  x1.ReplaceAt(Index, xy, gxstrlen(xy));  
  cout &lt;&lt; x1 &lt;&lt; "\n";
  cout &lt;&lt; "Replacing jumps:" &lt;&lt; "\n";
  Index = x1.Find(gxLTCHAR("jumps", wsbuf));
  x1.ReplaceAt(Index, gxLTCHAR("runs ", wsbuf));
  cout &lt;&lt; x1 &lt;&lt; "\n";
  gxStringw x2(gxLTCHAR("cow", wsbuf));
  cout &lt;&lt; "Replacing dog:" &lt;&lt; "\n";
  Index = x1.Find(gxLTCHAR("dog", wsbuf));
  x1.ReplaceAt(Index, x2);
  cout &lt;&lt; x1 &lt;&lt; "\n";
  
  PausePrg();
  
  cout &lt;&lt; "Testing the insert functions..." &lt;&lt; "\n";
  x1 = gxLTCHAR("The quick brown fox jumps over the lazy dog", wsbuf);
  cout &lt;&lt; x1 &lt;&lt; "\n";
  cout &lt;&lt; "Inserting text into string:" &lt;&lt; "\n";
  Index = x1.Find(gxLTCHAR("fox", wsbuf));
  x1.InsertAt(Index, gxLTCHAR("and yellow ", wsbuf), gxstrlen("and yellow "));
  cout &lt;&lt; x1 &lt;&lt; "\n";
  Index = x1.Find(gxLTCHAR("over", wsbuf));
  x1.InsertAt(Index, gxLTCHAR("around and ", wsbuf));
  cout &lt;&lt; x1 &lt;&lt; "\n";
  gxStringw x3(gxLTCHAR("cow and ", wsbuf));
  Index = x1.Find(gxLTCHAR("dog", wsbuf));
  x1.InsertAt(Index, x3);
  cout &lt;&lt; x1 &lt;&lt; "\n";
  
  PausePrg();
  
  cout &lt;&lt; "Testing c_str functions" &lt;&lt; "\n";
  char sbuf[255]; <FONT COLOR="#ff0000">// ASCII string buffer for Unicode to ASCII conversion</FONT>
  gxStringw gs(gxLTCHAR("COW", wsbuf));
  const gxStringw &amp;cs = gs;
  cout &lt;&lt; "String = " &lt;&lt; gs.c_str(sbuf) &lt;&lt; "\n";
  cout &lt;&lt; "Const String = " &lt;&lt; cs.c_str(sbuf) &lt;&lt; "\n";
  PausePrg();
  
  cout &lt;&lt; "Testing overload subscript operator..." &lt;&lt; "\n";
  wchar_t *Message = gxLTCHAR("This is a test message", wsbuf);
  gxStringw ss(Message);
  for(unsigned i = 0; i &lt; gxstrlen(Message); i++)
    cout &lt;&lt; (char)ss[i];
  cout &lt;&lt; "\n";
  
  PausePrg();

  cout &lt;&lt; "Testing general-purpose filter functions" &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  
    gxStringw s(gxLTCHAR(\
"         ?The quick brown fox jumps over the lazy dog\n\r\
0123456789\r\n?~!@#$%^&amp;*()_+&lt;&gt;            ", wsbuf));

  unsigned num;
  cout &lt;&lt; "Original string: " &lt;&lt; "\n";
  cout &lt;&lt; s.c_str(sbuf) &lt;&lt; "\n";
  cout &lt;&lt; "\n";

  cout &lt;&lt; "Trimming all leading and trailing spaces" &lt;&lt; "\n";
  cout &lt;&lt; "begin" &lt;&lt; s.c_str(sbuf) &lt;&lt; "end" &lt;&lt; "\n";
  num = s.TrimLeadingSpaces();
  cout &lt;&lt; "Leading spaces = " &lt;&lt; num &lt;&lt; "\n";
  cout &lt;&lt; s.c_str(sbuf) &lt;&lt; "\n";
  num = s.TrimTrailingSpaces();
  cout &lt;&lt; "Trialing spaces = " &lt;&lt; num &lt;&lt; "\n";
  cout &lt;&lt; s.c_str(sbuf);
  cout &lt;&lt; "end";

  PausePrg();
  
  cout &lt;&lt; "Changing to upper case" &lt;&lt; "\n";
  if(s.ToUpper()) cout &lt;&lt; s.c_str(sbuf) &lt;&lt; "\n";
  cout &lt;&lt; "Changing to lower case" &lt;&lt; "\n";
  if(s.ToLower()) cout &lt;&lt; s.c_str(sbuf) &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Replacing carriage returns/line feeds with spaces" &lt;&lt; "\n";
  wchar_t wsbuf2[255];
  num = s.ReplaceChar(gxLTCHAR('\r', wsbuf), gxLTCHAR(' ', wsbuf2));
  num = s.ReplaceString(gxLTCHAR("\n", wsbuf), gxLTCHAR(" ", wsbuf2));
  cout &lt;&lt; s.c_str(sbuf) &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Filtering all \'?\' characters" &lt;&lt; "\n";
  num = s.FilterChar(gxLTCHAR('?', wsbuf));
  cout &lt;&lt; s.c_str(sbuf) &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Filtering the \"he\" string" &lt;&lt; "\n";
  s.FilterString(gxLTCHAR("he", wsbuf));
  cout &lt;&lt; s.c_str(sbuf) &lt;&lt; "\n";
  
  PausePrg();

  cout &lt;&lt; "Testing overloaded &lt;&lt; operators" &lt;&lt; "\n";
  gxStringw stream;
  const int i1 = 1; const long i2 = 2; const short i3 = 3;
  int i4 = 255; long i5 =1024; short i6 = 2048;
  unsigned int i7 = 4096; unsigned long i8 = 8192; unsigned short i9 = 16384;
  float f1 = (float)4.22; double f2 = (double)8.092; 
  char c1 = 'A';  char c2 = 'B'; 
  wchar_t c3 = gxLTCHAR('C', wsbuf);  wchar_t c4 = gxLTCHAR('D', wsbuf2);
  char *str1 = "Output test = "; gxStringw str2 = "Output test = ";
  
  stream &lt;&lt; "Output test = " &lt;&lt; c1 &lt;&lt; ' ' &lt;&lt; c2 &lt;&lt; ' ' &lt;&lt; (char)c3 &lt;&lt; ' '
	 &lt;&lt; (char)c4 &lt;&lt; "\n";
  cout &lt;&lt; stream;

  stream &lt;&lt; clear &lt;&lt; str1 &lt;&lt; i1 &lt;&lt; " " &lt;&lt; i2 &lt;&lt; " " &lt;&lt; i3 &lt;&lt; " " &lt;&lt; i4 &lt;&lt; " "
	 &lt;&lt; i5 &lt;&lt; " " &lt;&lt; i6 &lt;&lt; " " &lt;&lt; i7 &lt;&lt; " " &lt;&lt; i8 &lt;&lt; " " &lt;&lt; i9 &lt;&lt; "\n";
  cout &lt;&lt; stream;
  
  stream.Clear();
  stream.SetWidth(4); stream.SetFill('0');
  stream &lt;&lt; str2 &lt;&lt; hex &lt;&lt; i1 &lt;&lt; " " &lt;&lt; i2 &lt;&lt; " " &lt;&lt; i3 &lt;&lt; " " 
	 &lt;&lt; i4 &lt;&lt; " " &lt;&lt; i5 &lt;&lt; " " &lt;&lt; i6 &lt;&lt; " " &lt;&lt; i7 &lt;&lt; " " &lt;&lt; i8 
	 &lt;&lt; " " &lt;&lt; i9 &lt;&lt; "\n";
  cout &lt;&lt; stream;

  stream.Clear();
  stream.Precision(2);
  stream &lt;&lt; "Output test = " &lt;&lt; f1 &lt;&lt; " " &lt;&lt; f2 &lt;&lt; "\n";
  stream.Precision(4);
  stream &lt;&lt; "Output test = " &lt;&lt; f1 &lt;&lt; " " &lt;&lt; f2 &lt;&lt; "\n";
  cout &lt;&lt; stream;
  stream &lt;&lt; clear;

  PausePrg();
  cout &lt;&lt; "Testing overloaded &gt;&gt; operators" &lt;&lt; "\n";
  char csbuf[255];
  gxStringw sb1 = "Input test = ";
  sb1 &lt;&lt; (int)15 &lt;&lt; " " &lt;&lt; (long)25 &lt;&lt; " " &lt;&lt; (short)35 &lt;&lt; " " 
      &lt;&lt; (unsigned int)45 &lt;&lt; " " &lt;&lt; (unsigned long)55 &lt;&lt; " "
      &lt;&lt; (unsigned short)65 &lt;&lt; " " &lt;&lt; (double)1.5 &lt;&lt; " "
      &lt;&lt; (float)2.5 &lt;&lt; " " &lt;&lt; 'A' &lt;&lt; 'B' &lt;&lt; 'C' &lt;&lt; "\n";

  sb1 &gt;&gt; csbuf;
  cout &lt;&lt; csbuf;

  gxStringw sb2, sb3, sb4, sb5, sb6, sb7, sb8, sb9, sb10, sb11, sb12;
  sb2 &lt;&lt; (int)15; sb3 &lt;&lt; (long)25; sb4 &lt;&lt; (short)35; 
  sb5 &lt;&lt; (unsigned int)45; sb6 &lt;&lt; (unsigned long)55; 
  sb7 &lt;&lt; (unsigned short)65; sb8 &lt;&lt; (double)1.5; 
  sb9 &lt;&lt; (float)2.5; sb10 &lt;&lt; 'A'; sb11 &lt;&lt; 'B'; sb12 &lt;&lt; 'C'; 

  cout &lt;&lt; "Input test = " &lt;&lt; sb2 &lt;&lt; " " &lt;&lt; sb3 &lt;&lt; " " &lt;&lt; sb4 &lt;&lt; " "
       &lt;&lt; sb5 &lt;&lt; " " &lt;&lt; sb6 &lt;&lt; " " &lt;&lt; sb7 &lt;&lt; " " &lt;&lt;  sb8 &lt;&lt; " " &lt;&lt; sb9
       &lt;&lt; " " &lt;&lt; sb10 &lt;&lt; sb11 &lt;&lt; sb12 &lt;&lt; "\n";

  int ib2 = 0; long ib3 = 0; short ib4 = 0; unsigned int ib5 = 0; 
  unsigned long ib6 = 0; unsigned short ib7 = 0; double ib8 = 0; 
  float ib9 = 0; char ib10 = 0; char ib11 = 0; char ib12 = 0;
  
  sb2 &gt;&gt; ib2;
  sb3 &gt;&gt; ib3;
  sb4 &gt;&gt; ib4;
  sb5 &gt;&gt; ib5;
  sb6 &gt;&gt; ib6;
  sb7 &gt;&gt; ib7;
  sb8 &gt;&gt; ib8;
  sb9 &gt;&gt; ib9;
  sb10 &gt;&gt; ib10;
  sb11 &gt;&gt; ib11;
  sb12 &gt;&gt; ib12;

  cout &lt;&lt; "Input test = " &lt;&lt; ib2 &lt;&lt; " " &lt;&lt; ib3 &lt;&lt; " " &lt;&lt; ib4 &lt;&lt; " "
       &lt;&lt; ib5 &lt;&lt; " " &lt;&lt; ib6 &lt;&lt; " " &lt;&lt; ib7 &lt;&lt; " " &lt;&lt;  ib8 &lt;&lt; " " &lt;&lt; ib9
       &lt;&lt; " " &lt;&lt; ib10 &lt;&lt; ib11 &lt;&lt; ib12 &lt;&lt; "\n";

#if defined (__64_BIT_DATABASE_ENGINE__)
  PausePrg();

  cout &lt;&lt; "Testing overloaded &gt;&gt; and &lt;&lt; 64-bit operators" &lt;&lt; "\n";
  __LLWORD__ LL1 = (__LLWORD__)255; 
  const __LLWORD__ LL2 = (__LLWORD__)1024;
  __ULLWORD__ LL3 = (__ULLWORD__)2048; 
  const __ULLWORD__ LL4 = (__LLWORD__)4096;

  stream &lt;&lt; clear &lt;&lt; "64-bit test = " &lt;&lt; LL1 &lt;&lt; " " &lt;&lt; LL2 &lt;&lt; " " &lt;&lt; LL3 
	 &lt;&lt; " " &lt;&lt; LL4 &lt;&lt; "\n";

  stream &gt;&gt; csbuf;
  cout &lt;&lt; csbuf;

  stream.Clear();
  stream.SetWidth(4); stream.SetFill('0');
  stream &lt;&lt; "64-bit test = " &lt;&lt; hex &lt;&lt; LL1 &lt;&lt; " " &lt;&lt; LL2 &lt;&lt; " " 
	 &lt;&lt; LL3 &lt;&lt; " " &lt;&lt; LL4 &lt;&lt; "\n";

  cout &lt;&lt; stream;

  gxStringw sb64_1, sb64_2, sb64_3, sb64_4;
  sb64_1 &lt;&lt; LL1;
  sb64_2 &lt;&lt; LL2;
  sb64_3 &lt;&lt; LL3;
  sb64_4 &lt;&lt; LL4;

  __LLWORD__ LLn1, LLn2;
  __ULLWORD__ LLn3, LLn4;

  sb64_1 &gt;&gt; LLn1;
  sb64_2 &gt;&gt; LLn2;
  sb64_3 &gt;&gt; LLn3;
  sb64_4 &gt;&gt; LLn4;

  cout &lt;&lt; "64-bit test = " &lt;&lt; (int)LLn1 &lt;&lt; " " &lt;&lt; (int)LLn2 &lt;&lt; " " 
       &lt;&lt; (int)LLn3 &lt;&lt; " " &lt;&lt; (int) LLn4 &lt;&lt; "\n";
#endif

  PausePrg();

  cout &lt;&lt; "Testing escape sequence conversion function" &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  gxStringw esc_string(gxLTCHAR(\
"This%20is%20a%20test%20for%20%%%20escape%20chars", wsbuf));
  cout &lt;&lt; esc_string.c_str(sbuf) &lt;&lt; "\n";
  cout &lt;&lt; "Converting escape sequences" &lt;&lt; "\n";
  wchar_t es = gxLTCHAR('%', wsbuf);
  int num_esc = esc_string.ConvertEscapeSeq(es);
  cout &lt;&lt; "Found " &lt;&lt; num_esc &lt;&lt; " escape sequences" &lt;&lt; "\n"; 
  cout &lt;&lt; esc_string.c_str(sbuf) &lt;&lt; "\n";
  cout &lt;&lt; "\n";

  esc_string = gxLTCHAR("This#0020is#0020a#0020test#0020for#0020###0020escape\
#0020chars", wsbuf);
  cout &lt;&lt; esc_string.c_str(sbuf) &lt;&lt; "\n";
  cout &lt;&lt; "Converting escape sequences" &lt;&lt; "\n";
  num_esc = esc_string.ConvertEscapeSeq(gxLTCHAR('#', wsbuf), 4);
  cout &lt;&lt; "Found " &lt;&lt; num_esc &lt;&lt; " escape sequences" &lt;&lt; "\n"; 
  cout &lt;&lt; esc_string.c_str(sbuf) &lt;&lt; "\n";
  cout &lt;&lt; "\n";

  esc_string = gxLTCHAR(\
"This;020is;020a;020test;020for;020;;;020escape;020chars", wsbuf);
  cout &lt;&lt; esc_string.c_str(sbuf) &lt;&lt; "\n";
  cout &lt;&lt; "Converting escape sequences" &lt;&lt; "\n";
  num_esc = esc_string.ConvertEscapeSeq(';', 3);
  cout &lt;&lt; "Found " &lt;&lt; num_esc &lt;&lt; " escape sequences" &lt;&lt; "\n"; 
  cout &lt;&lt; esc_string.c_str(sbuf) &lt;&lt; "\n";
  
  PausePrg();

  cout &lt;&lt; "Testing the comparison operators" &lt;&lt; "\n";

#ifndef __AUTORUN_TESTPROG__
  gxStringw acomp(255), bcomp;
  cout &lt;&lt; "Enter string A&gt;"; cin &gt;&gt; acomp;
  cout &lt;&lt; "Enter string B&gt;"; cin &gt;&gt; bcomp;
#else
  <FONT COLOR="#ff0000">// In auto run mode so do not prompt user for any input</FONT>
  gxStringw acomp(gxLTCHAR("CAT", wsbuf)), bcomp(gxLTCHAR("cat", wsbuf));
  cout &lt;&lt; "String A = CAT, String B = cat" &lt;&lt; "\n";
#endif

  cout &lt;&lt; "String A == B "; acomp == bcomp ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A != B "; acomp != bcomp ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &lt;  B "; acomp &lt; bcomp ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &lt;= B "; acomp &lt;= bcomp ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &gt;  B "; acomp &gt; bcomp ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &gt;= B "; acomp &gt;= bcomp ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  
  PausePrg();

  cout &lt;&lt; "Testing the case insensitive comparison functions" &lt;&lt; "\n";
  cout &lt;&lt; "String A == B "; 
  acomp.StringICompare(bcomp) == 0 ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A != B "; 
  acomp.StringICompare(bcomp) != 0 ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &lt;  B "; 
  acomp.StringICompare(bcomp) &lt; 0 ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &lt;= B "; 
  acomp.StringICompare(bcomp) &lt;= 0 ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &gt;  B "; 
  acomp.StringICompare(bcomp) &gt; 0 ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "String A &gt;= B "; 
  acomp.StringICompare(bcomp) &gt;= 0 ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing the find last function" &lt;&lt; "\n";
  gxStringw url(gxLTCHAR("http:<FONT COLOR="#ff0000">//www.example.com:80/docs/index.html", wsbuf));</FONT>
  cout &lt;&lt; "Complete URL: " &lt;&lt; url.c_str(sbuf) &lt;&lt; "\n"; 
  cout &lt;&lt; "Searching for last \"/\"" &lt;&lt; "\n";
  offset = url.FindLast(gxLTCHAR("/", wsbuf));
  if(offset != -1) {
    cout &lt;&lt; "Found last \"/\" at offset: " &lt;&lt; offset &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "Could not find last \"/\"" &lt;&lt; "\n";
  }
  cout &lt;&lt; "\n";

  cout &lt;&lt; "Testing delete before and after functions" &lt;&lt; "\n";
  gxStringw ubuf = url;
  ubuf.DeleteBeforeIncluding(gxLTCHAR(":<FONT COLOR="#ff0000">//", wsbuf));</FONT>
  ubuf.DeleteAfterIncluding(gxLTCHAR(":", wsbuf));
  cout &lt;&lt; "Complete URL: " &lt;&lt; url.c_str(sbuf) &lt;&lt; "\n";
  cout &lt;&lt; "Server: " &lt;&lt; ubuf.c_str(sbuf) &lt;&lt; "\n";
  ubuf = url;
  ubuf.DeleteAfter(gxLTCHAR("http", wsbuf));
  cout &lt;&lt; "Protocol: " &lt;&lt; ubuf.c_str(sbuf) &lt;&lt; "\n";
  ubuf = url;
  ubuf.DeleteBeforeLast(gxLTCHAR(":", wsbuf));
  ubuf.DeleteAfterIncluding(gxLTCHAR("/", wsbuf));
  ubuf.DeleteAt(0, 1);
  cout &lt;&lt; "Port: " &lt;&lt; ubuf.c_str(sbuf) &lt;&lt; "\n";
  ubuf = url;
  ubuf.DeleteBeforeIncluding(gxLTCHAR(":<FONT COLOR="#ff0000">//", wsbuf));</FONT>
  ubuf.DeleteBeforeIncluding(gxLTCHAR("/", wsbuf));
  ubuf.DeleteAfterLastIncluding(gxLTCHAR("/", wsbuf));
  ubuf.InsertAt(0, gxLTCHAR("/", wsbuf));
  cout &lt;&lt; "Directory: " &lt;&lt; ubuf.c_str(sbuf) &lt;&lt; "\n";
  ubuf = url;
  ubuf.DeleteBeforeLastIncluding(gxLTCHAR("/", wsbuf));
  cout &lt;&lt; "File: " &lt;&lt; ubuf.c_str(sbuf) &lt;&lt; "\n";
  ubuf.DeleteBefore(gxLTCHAR(".", wsbuf));
  cout &lt;&lt; "Dot extension: " &lt;&lt; ubuf.c_str(sbuf) &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing shorthand notation nomenclature" &lt;&lt; "\n";
  long by1 = 519;
  unsigned long by2 = 2133;
  gxStringw byte_string;
  byte_string &lt;&lt; clear &lt;&lt; "Byte value 1 = " &lt;&lt; shn &lt;&lt; by1 &lt;&lt; " bytes " 
	      &lt;&lt; "Byte value 2 = " &lt;&lt; by2 &lt;&lt; " bytes" &lt;&lt; "\n";
  cout &lt;&lt; byte_string.c_str(sbuf);
  by1 *= (1000 * 1000);
  by2 *= (1000 * 1000);
  byte_string &lt;&lt; clear &lt;&lt; "Byte value 1 = " &lt;&lt; shn &lt;&lt; by1 &lt;&lt; " bytes " 
	      &lt;&lt; "Byte value 2 = " &lt;&lt; by2 &lt;&lt; " bytes" &lt;&lt; "\n";
  cout &lt;&lt; byte_string.c_str(sbuf);

#if defined (__64_BIT_DATABASE_ENGINE__)
  __LLWORD__ llby1 = 519;
  __ULLWORD__ llby2 = 2133;
   byte_string &lt;&lt; clear &lt;&lt; "Byte value 1 = " &lt;&lt; shn &lt;&lt; llby1 &lt;&lt; " bytes " 
	      &lt;&lt; "Byte value 2 = " &lt;&lt; llby2 &lt;&lt; " bytes" &lt;&lt; "\n";
  cout &lt;&lt; byte_string.c_str(sbuf);
  llby1 *= (1000 * 1000);
  llby2 *= (1000 * 1000);
  byte_string &lt;&lt; clear &lt;&lt; "Byte value 1 = " &lt;&lt; shn &lt;&lt; llby1 &lt;&lt; " bytes " 
	      &lt;&lt; "Byte value 2 = " &lt;&lt; llby2 &lt;&lt; " bytes" &lt;&lt; "\n";
  cout &lt;&lt; byte_string.c_str(sbuf);
  llby1 *= 1000;
  llby2 *= 1000;
  byte_string &lt;&lt; clear &lt;&lt; "Byte value 1 = " &lt;&lt; shn &lt;&lt; llby1 &lt;&lt; " bytes " 
	      &lt;&lt; "Byte value 2 = " &lt;&lt; llby2 &lt;&lt; " bytes" &lt;&lt; "\n";
  cout &lt;&lt; byte_string.c_str(sbuf);
#endif

  PausePrg();

  cout &lt;&lt; "Testing octal conversion functions" &lt;&lt; "\n";
  gxStringw o_string;
  int onum1 = 0755;
  int onum2 = 0644;
  int onum3 = 0220;
  o_string &lt;&lt; clear &lt;&lt; oct &lt;&lt; onum1 &lt;&lt; " " &lt;&lt; onum2 &lt;&lt; " " &lt;&lt; onum3 &lt;&lt; "\n";
  cout &lt;&lt; o_string.c_str(sbuf);

#if defined (__64_BIT_DATABASE_ENGINE__)
  __LLWORD__ lonum1 = 0755;
  __LLWORD__ lonum2 = 0644;
  __LLWORD__ lonum3 = 0220;
  o_string &lt;&lt; clear &lt;&lt; oct &lt;&lt; lonum1 &lt;&lt; " " &lt;&lt; lonum2 &lt;&lt; " " &lt;&lt; lonum3 &lt;&lt; "\n";
  cout &lt;&lt; o_string.c_str(sbuf);
#endif

  PausePrg();

  cout &lt;&lt; "Testing char trim functions" &lt;&lt; "\n";
  gxStringw trim_str = gxLTCHAR("######Test String______", wsbuf);
  cout &lt;&lt; "String = " &lt;&lt; trim_str.c_str(sbuf) &lt;&lt; "\n";
  trim_str.TrimLeading((wchar_t)'#'); 
  trim_str.TrimTrailing((wchar_t)'_');
  cout &lt;&lt; "String = " &lt;&lt; trim_str.c_str(sbuf) &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing substring functions" &lt;&lt; "\n";
  gxStringw substr(gxLTCHAR("The quick brown fox jumps over the lazy dog", 
			    wsbuf));
  cout &lt;&lt; substr.c_str(sbuf) &lt;&lt; "\n";
  Index = substr.Find(gxLTCHAR("fox", wsbuf));
  cout &lt;&lt; "Testing mid function:" &lt;&lt; "\n";
  gxStringw Fox = substr.Mid(Index, 3); <FONT COLOR="#ff0000">// 3 characters for fox</FONT>
  cout &lt;&lt; Fox.c_str(sbuf) &lt;&lt; "\n";
  cout &lt;&lt; "Testing left function:" &lt;&lt; "\n";
  gxStringw The = substr.Left(3); <FONT COLOR="#ff0000">// 3 characters for the</FONT>
  cout &lt;&lt; The.c_str(sbuf) &lt;&lt; "\n";
  cout &lt;&lt; "Testing right function:" &lt;&lt; "\n";
  gxStringw Dog = substr.Right(3); <FONT COLOR="#ff0000">// 3 characters for dog</FONT>
  cout &lt;&lt; Dog.c_str(sbuf) &lt;&lt; "\n";

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Exiting Unicode string test" &lt;&lt; "\n";
  PausePrg();
}

void MixedStringTest()
{
  cout &lt;&lt; "Testing ASCII and UNICODE string functions..." &lt;&lt; "\n"; 
  PausePrg();

  cout &lt;&lt; "Displaying platform dependent byte alignments" &lt;&lt; "\n";
  cout &lt;&lt; "ASCII byte alignment = " &lt;&lt; sizeof(char) &lt;&lt; "\n";
  cout &lt;&lt; "ASCII bit alignment = " &lt;&lt; (sizeof(char) * 8) &lt;&lt; "\n";
  cout &lt;&lt; "Unicode byte alignment = " &lt;&lt; sizeof(wchar_t) 
       &lt;&lt; "\n";
  cout &lt;&lt; "Unicode bit alignment = " &lt;&lt; (sizeof(wchar_t) * 8) 
       &lt;&lt; "\n";
  cout &lt;&lt; "gxwchar_t byte alignment = " &lt;&lt; sizeof(gxwchar_t) 
       &lt;&lt; "\n";
  cout &lt;&lt; "gxwchar_t bit alignment = " &lt;&lt; (sizeof(gxwchar_t) * 8) 
       &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Constructing ASCII and Unicode strings" &lt;&lt; "\n";
  char sbuf[255];
  wchar_t wsbuf[255];
  const char *mesg = "This is a test";
  wchar_t *umesg = ASCII2Unicode(mesg);
  gxString as(mesg);
  gxStringw wstr1((const wchar_t *)umesg);

  cout &lt;&lt; "ASCII string: " &lt;&lt; as.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Unicode string: " &lt;&lt; wstr1.c_str(sbuf) &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Testing string length functions" &lt;&lt; "\n";
  cout &lt;&lt; "ASCII string length = " &lt;&lt; gxstrlen(as.c_str()) &lt;&lt; "\n";
  cout &lt;&lt; "Unicode string length = " &lt;&lt; gxstrlen(wstr1.c_wstr()) &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing the gxwchar_t strings functions" &lt;&lt; "\n";
  gxwchar_t *gxws_t1 = ASCII2gxwchar_t(mesg);
  gxString gxas = gxws_t1;
  gxStringw gxws = gxws_t1;
  cout &lt;&lt; "gxwchar_t String: " &lt;&lt; (gxStringw)gxws_t1 &lt;&lt; "\n";
  cout &lt;&lt; "gxwchar_t String: " &lt;&lt; (gxString)gxws_t1 &lt;&lt; "\n";
  cout &lt;&lt; "ASCII string: " &lt;&lt; gxas.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Unicode string: " &lt;&lt; gxws.c_str(sbuf) &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Testing string length functions" &lt;&lt; "\n";
  cout &lt;&lt; "ASCII string length = " &lt;&lt; gxstrlen(gxas.c_str()) &lt;&lt; "\n";
  cout &lt;&lt; "Unicode string length = " &lt;&lt; gxstrlen(gxws.c_wstr()) &lt;&lt; "\n";
  cout &lt;&lt; "gxwchar_t string length = " &lt;&lt; gxstrlen(gxws_t1) &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Testing gxwchar_t string copy, cat, and cmp functions" &lt;&lt; endl;
  gxwchar_t gxws_tbuf[255];
  gxwchar_t gxws_t2[255]; gxwchar_t gxws_t3[255]; gxwchar_t gxws_t4[255];
  gxstrcpy(gxws_t2, gxLTCHAR("Cat", gxws_tbuf));
  gxstrcpy(gxws_t3, gxLTCHAR("Dog", gxws_tbuf));
  gxstrcpy(gxws_t4, gxLTCHAR("Cow", gxws_tbuf));
  gxstrcpy(gxws_tbuf, gxws_t2);
  gxstrcat(gxws_tbuf, gxws_t3);
  gxstrcat(gxws_tbuf, gxws_t4);
  cout &lt;&lt; (gxStringw)gxws_tbuf &lt;&lt; "\n";
  cout &lt;&lt; "Comparing \"Cat\" to \"Dog\"" &lt;&lt; "\n";
  cout &lt;&lt; "String compare = " &lt;&lt; gxstrcmp(gxws_t2, gxws_t3); 

  PausePrg();

  cout &lt;&lt; "Testing the string class length functions" &lt;&lt; "\n";
  cout &lt;&lt; "ASCII string length: " &lt;&lt; as.length() &lt;&lt; "\n";
  cout &lt;&lt; "ASCII bytes allocated: " &lt;&lt; as.dlength() &lt;&lt; "\n";
  cout &lt;&lt; "Unicode string length: " &lt;&lt; wstr1.length() &lt;&lt; "\n";
  cout &lt;&lt; "Unicode bytes allocated: " &lt;&lt; wstr1.dlength() &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing standalone string copy functions" &lt;&lt; "\n";
  gxstrcpy(sbuf, as.c_str());
  cout &lt;&lt; sbuf &lt;&lt; "\n";
  gxstrcpy(wsbuf, wstr1.c_wstr());
  cout &lt;&lt; (gxStringw)wsbuf &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing standalone string cat functions" &lt;&lt; "\n";
  const char *s1 = "The quick brown";
  const char *s2 = " fox jumps over";
  const char *s3 = " the lazy dog";
  char *comp = StringCat(s1, s2, s3);
  cout &lt;&lt; comp &lt;&lt; "\n";
  
  wchar_t *ws1 = ASCII2Unicode(s1);
  wchar_t *ws2 = ASCII2Unicode(s2);
  wchar_t *ws3 = ASCII2Unicode(s3);
  wchar_t *wcomp = StringCat(ws1, ws2, ws3);
  cout &lt;&lt; (gxStringw)wcomp &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing the standalone string parser..." &lt;&lt; "\n";
  const char *as_strings = "MOUSE DOG CAT LION FLEA COW HORSE";
  wchar_t *ws_strings = ASCII2Unicode(as_strings);
  char as_words[MAXWORDS][MAXWORDLENGTH];
  wchar_t ws_words[MAXWORDS][MAXWORDLENGTH];
  int num_words;
  char as_sep = ' ';
  wchar_t ws_sep = (wchar_t)as_sep;
  int i;
  int rv = parse(as_strings, as_words, &amp;num_words, as_sep);
  if(rv != 0) {
    cout &lt;&lt; "ASCII parse error" &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "Parsed " &lt;&lt; num_words &lt;&lt; " ASCII words" &lt;&lt; "\n";
    for(i = 0; i &lt; num_words; i++) {
      if(*as_words[i] == 0) break;
      cout &lt;&lt; as_words[i] &lt;&lt; ' ';
    }
    cout &lt;&lt; "\n";
  }

  parse(ws_strings, ws_words, &amp;num_words, ws_sep);
  if(rv != 0) {
    cout &lt;&lt; "Unicode parse error" &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "Parsed " &lt;&lt; num_words &lt;&lt; " Unicode words" &lt;&lt; "\n";
    for(i = 0; i &lt; num_words; i++) {
      if(*ws_words[i] == 0) break;
      cout &lt;&lt; (gxStringw)ws_words[i] &lt;&lt; ' ';
    }
    cout &lt;&lt; "\n";
  }

  PausePrg();

  cout &lt;&lt; "Testing standalone string compare functions" &lt;&lt; "\n";
  char *acomp = "CAT"; char *bcomp = "cat";
  cout &lt;&lt; "String A = CAT, String B = cat" &lt;&lt; "\n";
  wchar_t *wacomp = ASCII2Unicode(acomp);
  wchar_t *wbcomp = ASCII2Unicode(bcomp);
  rv = gxstrcmp(acomp, bcomp);
  cout &lt;&lt; "ASCII case compare = " &lt;&lt; rv &lt;&lt; "\n";
  rv = gxstrcmp(wacomp, wbcomp);
  cout &lt;&lt; "Unicode case compare = " &lt;&lt; rv &lt;&lt; "\n";
  rv = CaseICmp(acomp, bcomp);
  cout &lt;&lt; "ASCII casei compare = " &lt;&lt; rv &lt;&lt; "\n";
  rv = CaseICmp(wacomp, wbcomp);
  cout &lt;&lt; "Unicode casei compare = " &lt;&lt; rv &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing standalone pattern matching functions" &lt;&lt; "\n";
  const char *search_str = "The quick brown fox jumps over the lazy dog";
  wchar_t *wsearch_str = ASCII2Unicode(search_str);
  cout &lt;&lt; "Searching for pattern \"fox\"" &lt;&lt; "\n";
  int offset = FindMatch(search_str, "fox", 0, 0, 0);
  if(offset != -1) {
    cout &lt;&lt; "Found ASCII match at character offset: " &lt;&lt; offset &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "Could not find ASCII match" &lt;&lt; "\n";
  }
  wchar_t *wpattern = ASCII2Unicode("fox");
  offset = FindMatch(wsearch_str, wpattern);
  if(offset != -1) {
    cout &lt;&lt; "Found Unicode match at character offset: " &lt;&lt; offset &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "Could not find Unicode match" &lt;&lt; "\n";
  }
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Search using non-case sensitive pattern match" &lt;&lt; "\n";
  cout &lt;&lt; "Searching for pattern \"FOX\"" &lt;&lt; "\n";
  offset = IFindMatch(search_str, "FOX");
  if(offset != -1) {
    cout &lt;&lt; "Found ASCII match at character offset: " &lt;&lt; offset &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "Could not find ASCII match" &lt;&lt; "\n";
  }
  delete wpattern; <FONT COLOR="#ff0000">// Free memory before calling conversion function again</FONT>
  wpattern = ASCII2Unicode("FOX");
  offset = IFindMatch(wsearch_str, wpattern);
  if(offset != -1) {
    cout &lt;&lt; "Found Unicode match at character offset: " &lt;&lt; offset &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "Could not find Unicode match" &lt;&lt; "\n";
  }

  <FONT COLOR="#ff0000">// Free all memory buffers</FONT>
  delete umesg;
  delete gxws_t1;
  delete comp; delete wcomp;
  delete ws1; delete ws2; delete ws3;
  delete ws_strings;
  delete wacomp; delete wbcomp;
  delete wsearch_str; delete wpattern;
  
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Exiting mixed string test" &lt;&lt; "\n";
  PausePrg();
}

void NULLStringTest()
{
  cout &lt;&lt; "Testing ASCII and UNICODE with NULL strings..." &lt;&lt; "\n"; 
  PausePrg();

  wchar_t wsbuf[255];
  char sbuf[255];

  cout &lt;&lt; "Testing the NULL string class" &lt;&lt; "\n";
  cout &lt;&lt; "Global null char = " &lt;&lt; (int)UStringNULLPtr::UStringNUllChar 
       &lt;&lt; "\n";
  cout &lt;&lt; "Global null wchar_t = " &lt;&lt; UStringNULLPtr::UStringwNUllChar &lt;&lt; "\n";
  cout &lt;&lt; "Global null wchar_t address = " 
       &lt;&lt; &amp;UStringNULLPtr::UStringwNUllChar &lt;&lt; "\n";
  cout &lt;&lt; "Global null string address = " &lt;&lt; &amp;UStringNULLPtr::UStringNUllStr 
       &lt;&lt; "\n";
  cout &lt;&lt; "Global null wstring address = " &lt;&lt; &amp;UStringNULLPtr::UStringwNUllStr 
       &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing NULL string construction and manipulation" &lt;&lt; "\n";
  <FONT COLOR="#ff0000">// Test the constructors and assignment operators</FONT>
  gxString nstr; UString nstr2(""); UString nstr3(gxLTCHAR("", wsbuf));
  UStringw nwstr; UStringw nwstr2(""); UStringw nwstr3(gxLTCHAR("", wsbuf));
  nstr = ""; nstr = nstr2; nstr = nstr3; nstr = nwstr3.c_wstr();
  nstr = gxLTCHAR("", wsbuf);
  nwstr = gxLTCHAR("", wsbuf); nwstr = nwstr2; nwstr = nwstr3;
  nwstr = nstr2.c_str();
  cout &lt;&lt; "ASCII length = " &lt;&lt; nstr.length() &lt;&lt; endl;
  cout &lt;&lt; "ASCII dimensioned length = " &lt;&lt; nstr.dlength() &lt;&lt; endl;
  cout &lt;&lt; "Unicode length = " &lt;&lt; nwstr.length() &lt;&lt; endl;
  cout &lt;&lt; "Unicode dimensioned length = " &lt;&lt; nwstr.dlength() &lt;&lt; endl;

  PausePrg();

  cout &lt;&lt; "Testing for wild pointers and buffer overflows" &lt;&lt; "\n";
  cout &lt;&lt; nstr[100]; cout &lt;&lt; (char)nwstr[100];
  cout &lt;&lt; nstr.c_str(); cout &lt;&lt; gxLTCHAR(nwstr.c_wstr(), sbuf);
  cout &lt;&lt; gxLTCHAR(nstr.c_wstr(wsbuf), sbuf);
  cout &lt;&lt; nwstr.c_str(sbuf);
  nstr.DeleteAt(0, 100);
  nstr += "";
  nstr.ReplaceAt(0, "");
  nstr.InsertAt(0, "");
  nstr.Atoi();
  nstr.Atol();
  nstr.Atof();
  nstr.ToUpper();
  nstr.ToLower();
  nstr.FindLast("");
  nstr.ReplaceChar('\0', '\0');
  nstr.ReplaceString("", "");
  nstr.FilterString("");
  nstr.FilterChar('\0');
  nstr.TrimLeadingSpaces();
  nstr.TrimTrailingSpaces();
  nstr.DeleteAfter("");
  nstr.DeleteBefore("");
  nstr.DeleteAfterIncluding("");
  nstr.DeleteBeforeIncluding("");
  nstr.DeleteAfterLast("");
  nstr.DeleteAfterLastIncluding("");
  nstr.DeleteBeforeLast("");
  nstr.DeleteBeforeLastIncluding("");
  nstr.ConvertEscapeSeq('%');
  nstr.Find("");
  nstr.Find("", 100, 100);
  nstr.IFind("");
  nstr.IFind("", 100, 100);
  nwstr.DeleteAt(0, 100);
  nstr += "";
  nwstr.ReplaceAt(0, "");
  nwstr.InsertAt(0, "");
  nwstr.Atoi();
  nwstr.Atol();
  nwstr.Atof();
  nwstr.ToUpper();
  nwstr.ToLower();
  nwstr.FindLast("");
  nwstr.ReplaceChar('\0', '\0');
  nwstr.ReplaceString("", "");
  nwstr.FilterString("");
  nwstr.FilterChar('\0');
  nwstr.TrimLeadingSpaces();
  nwstr.TrimTrailingSpaces();
  nwstr.DeleteAfter("");
  nwstr.DeleteBefore("");
  nwstr.DeleteAfterIncluding("");
  nwstr.DeleteBeforeIncluding("");
  nwstr.DeleteAfterLast("");
  nwstr.DeleteAfterLastIncluding("");
  nwstr.DeleteBeforeLast("");
  nwstr.DeleteBeforeLastIncluding("");
  nwstr.ConvertEscapeSeq('%');
  nwstr.Find("");
  nwstr.Find("", 100, 100);
  nwstr.IFind("");
  nwstr.IFind("", 100, 100);
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Passed" &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing comparison operator on null strings" &lt;&lt; "\n";
  cout &lt;&lt; "ASCII length = " &lt;&lt; nstr.length() &lt;&lt; endl;
  cout &lt;&lt; "ASCII dimensioned length = " &lt;&lt; nstr.dlength() &lt;&lt; endl;
  cout &lt;&lt; "Unicode length = " &lt;&lt; nwstr.length() &lt;&lt; endl;
  cout &lt;&lt; "Unicode dimensioned length = " &lt;&lt; nwstr.dlength() &lt;&lt; endl;
  cout &lt;&lt; "ASCII String == null "; nstr == "" ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "ASCII String != null "; nstr != "" ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "ASCII String &lt;  null "; nstr &lt; "" ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "ASCII String A &lt;= B "; nstr &lt;= "" ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "ASCII String &gt;  null "; nstr &gt; "" ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "ASCII String &gt;= null "; nstr &gt;= "" ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  
  cout &lt;&lt; "Unicode String == null "; 
  nwstr == gxLTCHAR("", wsbuf) ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Unicode String != null "; 
  nwstr != gxLTCHAR("", wsbuf) ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Unicode String &lt;  null "; 
  nwstr &lt; gxLTCHAR("", wsbuf) ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Unicode String A &lt;= B "; 
  nwstr &lt;= gxLTCHAR("", wsbuf) ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Unicode String &gt;  null "; 
  nwstr &gt; gxLTCHAR("", wsbuf) ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Unicode String &gt;= null "; 
  nwstr &gt;= gxLTCHAR("", wsbuf) ? cout &lt;&lt; 'y' : cout &lt;&lt; 'n';
  cout &lt;&lt; "\n";

  <FONT COLOR="#ff0000">// Test the global pointer reset functions</FONT>
  <FONT COLOR="#ff0000">// NOTE: A reset is only required if the global nulls have</FONT>
  <FONT COLOR="#ff0000">// been accidentally modified.</FONT>
  nstr.ResetGlobalNull();
  nwstr.ResetGlobalNull();

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Exiting NULL string test" &lt;&lt; "\n";
  PausePrg();
}

int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  MixedStringTest();
  NULLStringTest();
  ASCIIStringTest();
  UNICODEStringTest();
  cout &lt;&lt; "All tests complete. Exiting..." &lt;&lt; "\n";
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
