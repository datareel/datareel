<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:36:24 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>dfileb example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 01/25/2000</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program for the DiskFileB class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include "dfileb.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

void PausePrg() 
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

void DirectoryTest()
{
  cout &lt;&lt; "Testing general purpose directory functions" 
       &lt;&lt; "\n";

  const char *dirname = "testdir"; <FONT COLOR="#ff0000">// Directory to be created</FONT>

  <FONT COLOR="#ff0000">// Directory immediately above the current directory position</FONT>
  const char *parentdir = "..";    
  
  DiskFileB dir;
  cout &lt;&lt; "Creating " &lt;&lt; dirname &lt;&lt; " directory" &lt;&lt;"\n";
  if(dir.df_mkdir(dirname) != 0) {
    cout &lt;&lt; dir.df_ExceptionMessage() &lt;&lt; "\n";
    return;
  }

  if((dir.df_Exists(dirname)) &amp;&amp; (dir.df_IsDirectory(dirname))) {
    cout &lt;&lt; "The " &lt;&lt; dirname &lt;&lt; " directory was created" &lt;&lt; "\n";
  }

  cout &lt;&lt; "Changing directory to " &lt;&lt; dirname &lt;&lt; " directory" &lt;&lt;"\n";
  if(dir.df_chdir(dirname) != 0) {
    cout &lt;&lt; dir.df_ExceptionMessage() &lt;&lt; "\n";
    return;
  }

  char *pwd[df_MAX_DIR_LENGTH]; char drive_letter;
  if(dir.df_pwd((char *)pwd) == 0) {
    cout &lt;&lt; "Present working directory: " &lt;&lt; (char *)pwd &lt;&lt; "\n";
    if(dir.df_HasDriveLetter((const char *)pwd, drive_letter)) {
      cout &lt;&lt; "DOS Drive letter = " &lt;&lt; drive_letter &lt;&lt; "\n";
    }
  }

  cout &lt;&lt; "Changing directory to " &lt;&lt; parentdir &lt;&lt; " directory" &lt;&lt;"\n";
  if(dir.df_chdir(parentdir) != 0) {
    cout &lt;&lt; dir.df_ExceptionMessage() &lt;&lt; "\n";
    return;
  }

  if(dir.df_pwd((char *)pwd) == 0) {
    cout &lt;&lt; "Present working directory: " &lt;&lt; (char *)pwd &lt;&lt; "\n";
    if(dir.df_HasDriveLetter((const char *)pwd, drive_letter)) {
      cout &lt;&lt; "DOS Drive letter = " &lt;&lt; drive_letter &lt;&lt; "\n";
    }
  }

  cout &lt;&lt; "Removing " &lt;&lt; dirname &lt;&lt; " directory" &lt;&lt;"\n";
  if(dir.df_rmdir(dirname) != 0) {
    cout &lt;&lt; dir.df_ExceptionMessage() &lt;&lt; "\n";
    return;
  }
}

void FileTest()
{
  cout &lt;&lt; "Testing general purpose file functions"
       &lt;&lt; "\n";

  const char *testfile1 = "testfile1.dat";
  const char *testfile2 = "testfile2.dat";
  const char *testfile3 = "testfile3.dat";
  DiskFileB dfile(testfile1, DiskFileB::df_READWRITE, DiskFileB::df_CREATE); 
  if(!dfile) {
    cout &lt;&lt; "Could not open the " &lt;&lt; testfile1 &lt;&lt; "\n";
    return;
  }

  if((dfile.df_Exists(testfile1)) &amp;&amp; (dfile.df_IsFile(testfile1))) {
    cout &lt;&lt; "The " &lt;&lt; testfile1 &lt;&lt; " file was opened with read/write access"
	 &lt;&lt; "\n";
   }
  
  const char *teststr1 = "The quick brown fox jumps over the lazy dog \
0123456789\r\n";
  
  cout &lt;&lt; "Writing " &lt;&lt; strlen(teststr1) &lt;&lt; " bytes to " &lt;&lt; testfile1 &lt;&lt; "\n";
  if(dfile.df_Write((const char *)teststr1, strlen(teststr1)) != 0) {
    cout &lt;&lt; dfile.df_ExceptionMessage() &lt;&lt; "\n";
    return;
  }
  
  cout &lt;&lt; testfile1 &lt;&lt; " Dynamic file size = " &lt;&lt; (int)dfile.df_GetEOF() 
       &lt;&lt; "\n";
  dfile.df_Flush();
  cout &lt;&lt; testfile1 &lt;&lt; " Static file size  = " 
       &lt;&lt; (int)dfile.df_FileSize(testfile1) &lt;&lt; "\n";
  
  char *sbuf = new char[strlen(teststr1)+1];
  cout &lt;&lt; "Reading the file contents..." &lt;&lt; "\n";
  if(dfile.df_Read((char *)sbuf, strlen(teststr1), (FAU_t)0) != 0) {
    cout &lt;&lt; dfile.df_ExceptionMessage() &lt;&lt; "\n";
    delete[] sbuf;
    return;
  }
  sbuf[strlen(teststr1)] = '\0';
  cout &lt;&lt; sbuf;
  delete[] sbuf;
  
  dfile.df_Close();
  cout &lt;&lt; "Renaming the " &lt;&lt; testfile1 &lt;&lt; " to " &lt;&lt; testfile2 &lt;&lt; "\n";
  if(dfile.df_rename(testfile1, testfile2) != 0) {
    cout &lt;&lt; dfile.df_ExceptionMessage() &lt;&lt; "\n";
    return;
  }
  cout &lt;&lt; "Copying " &lt;&lt; testfile2 &lt;&lt; " to " &lt;&lt; testfile3 &lt;&lt; "\n";
  if(dfile.df_copy(testfile2, testfile3) != 0) {
    cout &lt;&lt; dfile.df_ExceptionMessage() &lt;&lt; "\n";
    return;
  }
  cout &lt;&lt; "Removing " &lt;&lt; testfile2 &lt;&lt; " and " &lt;&lt; testfile3 &lt;&lt; "\n";
  if(dfile.df_remove(testfile2) != 0) {
    cout &lt;&lt; dfile.df_ExceptionMessage() &lt;&lt; "\n";
    return;
  }
  if(dfile.df_remove(testfile3) != 0) {
    cout &lt;&lt; dfile.df_ExceptionMessage() &lt;&lt; "\n";
    return;
  }

  <FONT COLOR="#ff0000">// Add routine to change file attributes/permissions here</FONT>
  <FONT COLOR="#ff0000">// ------------------------------------------------------</FONT>
}

void RandomSeekTest()
{
  struct fileblock {
    unsigned block_length;
  };

  cout &lt;&lt; "Performing random read/write test" &lt;&lt; "\n";

  const char *testfile = "testfile.dat";
  DiskFileB dfile(testfile, DiskFileB::df_READWRITE, DiskFileB::df_CREATE);

  if(!dfile) {
    cout &lt;&lt; "Could not open the " &lt;&lt; testfile &lt;&lt; "\n";
    return;
  }
  
  if((dfile.df_Exists(testfile)) &amp;&amp; (dfile.df_IsFile(testfile))) {
    cout &lt;&lt; "The " &lt;&lt; testfile &lt;&lt; " file was opened with read/write access"
	 &lt;&lt; "\n";
  }
  
  const char *teststr = "The quick brown fox jumps over the lazy dog";

  unsigned i;
  unsigned len = strlen(teststr)+4;
  char *str = new char[len+1];
  for(i = 0; i&lt; len; i++) str[i] = '\0';
  memmove(str, teststr, strlen(teststr));

  const unsigned blocks_to_write = 10;
  FAU_t pos[blocks_to_write];
  fileblock hdr;
  char sbuf[df_MAX_LINE_LENGTH];

  cout &lt;&lt; "Writing " &lt;&lt; blocks_to_write &lt;&lt; " blocks of data..." &lt;&lt; "\n";
  for(i = 0; i &lt; blocks_to_write; i++) {
    pos[i] = dfile.df_Tell();  
    sprintf(sbuf, " %u", i);
    memmove(str+strlen(teststr), sbuf, strlen(sbuf));
    str[strlen(teststr)+strlen(sbuf)] = '\0';
    hdr.block_length = sizeof(fileblock) + (strlen(str)-1);
    dfile.df_Write(&amp;hdr,sizeof(fileblock)); 
    dfile.df_Write((char *)str, hdr.block_length);
  }

  cout &lt;&lt; "Reading back the blocks..." &lt;&lt; "\n";
  PausePrg();

  const int max_lines = 10;
  int lines_printed = 0;
  hdr.block_length = 0;
  int ii;

  for(i = 0; i &lt;  blocks_to_write; i++) {
    for(ii = 0; ii &lt; (int)len; ii++) str[ii] = '\0';
    dfile.df_Read(&amp;hdr, sizeof(fileblock), pos[i]);
    dfile.df_Read((char *)str, hdr.block_length, (pos[i]+sizeof(fileblock)));
    cout &lt;&lt; "Block address = " &lt;&lt; (long)pos[i] &lt;&lt; "\n";
    cout &lt;&lt; "Block size = " &lt;&lt; hdr.block_length &lt;&lt; "\n";
    cout &lt;&lt; "Data = " &lt;&lt; str &lt;&lt; "\n";
    lines_printed++;
    if(lines_printed &gt;= max_lines) {
      PausePrg();
      lines_printed = 0;
    }
  }

  dfile.df_Rewind();
  
  cout &lt;&lt; "Reading back the blocks in reverse order..." &lt;&lt; "\n";
  PausePrg();

  for(ii = (int)blocks_to_write-1; ii &gt;= 0; ii--) {
    for(i = 0; i &lt; len; i++) str[i] = '\0';
    dfile.df_Read((char *)&amp;hdr, sizeof(fileblock), pos[ii]);
    dfile.df_Read((char *)str, hdr.block_length);
    cout &lt;&lt; "Block address = " &lt;&lt; (long)pos[ii] &lt;&lt; "\n";
    cout &lt;&lt; "Block size = " &lt;&lt; hdr.block_length &lt;&lt; "\n";
    cout &lt;&lt; "Data = " &lt;&lt; str &lt;&lt; "\n";
    lines_printed++;
    if(lines_printed &gt;= max_lines) {
      PausePrg();
      lines_printed = 0;
    }
  }

  delete[] str;
  dfile.df_Close();

  cout &lt;&lt; "Removing " &lt;&lt; testfile &lt;&lt; "\n";
  if(dfile.df_remove(testfile) != 0) {
    cout &lt;&lt; dfile.df_ExceptionMessage() &lt;&lt; "\n";
    return;
  }
  return;
}

void GetLineTest()
{
  cout &lt;&lt; "Testing the read line function" &lt;&lt; "\n";

  const char *DOSTextLine = "The quick brown fox jumps over the lazy dog\r\n";
  const char *UNIXTextLine = "The quick brown fox jumps over the lazy dog\n";
  
  cout &lt;&lt; "Creating DOS and UNIX text files" &lt;&lt; "\n";
  const char *fname1 = "dostext.txt";
  const char *fname2 = "unixtext.txt";

  DiskFileB f1(fname1, DiskFileB::df_READWRITE, DiskFileB::df_CREATE);
  if(!f1) {
    cout &lt;&lt; "Error opening text file" &lt;&lt; "\n";
    return; 
  }
  DiskFileB f2(fname2, DiskFileB::df_READWRITE, DiskFileB::df_CREATE);
  if(!f2) {
    cout &lt;&lt; "Error opening text file" &lt;&lt; "\n";
    return; 
  }

  const int num_lines = 10;
  int i;
  cout &lt;&lt; "Writing " &lt;&lt; num_lines &lt;&lt; " lines to the text files" &lt;&lt; "\n";
  for(i = 0; i &lt; num_lines; i++) {
    f1.df_Write(DOSTextLine, strlen(DOSTextLine));
    f2.df_Write(UNIXTextLine, strlen(UNIXTextLine));
    if((f1.df_CheckError()) || (f2.df_CheckError())) {
      cout &lt;&lt; "Error writing to text file" &lt;&lt; "\n";
      return;
    }
  }
  
  cout &lt;&lt; "Reading the DOS text file" &lt;&lt; "\n";
  PausePrg();
  char sbuf[255];
  int line_number = 1;
  f1.df_Rewind(); <FONT COLOR="#ff0000">// Reset the file pointer to the beginning of the stream</FONT>
  while(!f1.df_EOF()) {
    f1.df_GetLine(sbuf, sizeof(sbuf));
    if(f1.df_GetError() != DiskFileB::df_NO_ERROR) {
      cout &lt;&lt; "Error reading from the text file" &lt;&lt; "\n";
      cout &lt;&lt; f1.df_ExceptionMessage() &lt;&lt; "\n";
      break;
    }
    cout &lt;&lt; line_number++ &lt;&lt; ' ' &lt;&lt; sbuf &lt;&lt; "\n";
  } 

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Reading the UNIX text file" &lt;&lt; "\n";
  PausePrg();

  line_number = 1;
  f2.df_Rewind(); <FONT COLOR="#ff0000">// Reset the file pointer to the beginning of the stream</FONT>
  while(!f2.df_EOF()) { <FONT COLOR="#ff0000">// Loop until EOF error</FONT>
    f2.df_GetLine(sbuf, sizeof(sbuf));
    if(f2.df_GetError() != DiskFileB::df_NO_ERROR) {
      cout &lt;&lt; "Error reading from the text file" &lt;&lt; "\n";
      cout &lt;&lt; f2.df_ExceptionMessage() &lt;&lt; "\n";
      break;
    }
    cout &lt;&lt; line_number++ &lt;&lt; ' ' &lt;&lt; sbuf &lt;&lt; "\n";
  }

  <FONT COLOR="#ff0000">// Close and remove the text files</FONT>
  f1.df_Close(); f2.df_Close();
  f1.df_remove(fname1); f2.df_remove(fname2);
}

void OverLoadTest() 
{
  cout &lt;&lt; "Testing overloaded &lt;&lt; and &gt;&gt; operators" &lt;&lt; "\n";
  cout &lt;&lt; "\n";

  const char *fname = "strtest.dat";

  DiskFileB stream(fname, DiskFileB::df_READWRITE, DiskFileB::df_CREATE);
  if(!stream) {
    cout &lt;&lt; "Error opening text file" &lt;&lt; "\n";
    cout &lt;&lt; stream.df_ExceptionMessage() &lt;&lt; "\n";
    return; 
  }  

  const char *s1 = "The quick brown fox jumps over the lazy dog";
  char *s2 = "0123456789";
  char c1 = 'A';
  const char c2 = 'B';
  
  cout &lt;&lt; "Writing some text to the stream" &lt;&lt; "\n";
  stream &lt;&lt; s1 &lt;&lt; ' ' &lt;&lt; s2 &lt;&lt; "\n";
  stream &lt;&lt; c1 &lt;&lt; ' ' &lt;&lt; c2 &lt;&lt; "\n";


  cout &lt;&lt; "Reading back the text from the stream" &lt;&lt; "\n";
  stream.df_Rewind();
  char sbuf1[df_MAX_LINE_LENGTH]; char sbuf2[df_MAX_LINE_LENGTH];
  char ch1, ch2, ch3;
  stream &gt;&gt; sbuf1;
  stream &gt;&gt; ch1; stream &gt;&gt; ch2; stream &gt;&gt; ch3;

  <FONT COLOR="#ff0000">// Echo the text to the console</FONT>
  cout &lt;&lt; sbuf1;
  cout &lt;&lt; ch1 &lt;&lt; ch2 &lt;&lt; ch3 &lt;&lt; "\n";

  cout &lt;&lt; "Writing some integer values to the stream in binary" &lt;&lt; "\n";
  FAU_t stream_pos = stream.df_Tell(); <FONT COLOR="#ff0000">// Record the current position</FONT>
  const short i1 = 1; short i2 = 2;
  const unsigned short i3 = 3; unsigned short i4 = 4;
  const int i5 = 5; int i6 = 6;
  const unsigned int i7 = 7; unsigned int i8 = 8;
  const long i9 = 9; long i10 = 10;
  const unsigned long i11 = 11; unsigned long i12 = 12;

  stream &lt;&lt; i1 &lt;&lt; i2 &lt;&lt; i3 &lt;&lt; i4 &lt;&lt; i5 &lt;&lt; i6 &lt;&lt; i7 &lt;&lt; i8 &lt;&lt; i9
	 &lt;&lt; i10 &lt;&lt; i11 &lt;&lt; i12;

  cout &lt;&lt; "Reading the binary integer values from the stream" &lt;&lt; "\n";
  stream.df_Seek(stream_pos); <FONT COLOR="#ff0000">// Reset the stream position to the first value</FONT>
  short in1, in2; unsigned short in3, in4;
  int in5, in6; unsigned int in7, in8;
  long in9, in10; unsigned long in11, in12;
  
  stream &gt;&gt; in1 &gt;&gt; in2 &gt;&gt; in3 &gt;&gt; in4 &gt;&gt; in5 &gt;&gt; in6 &gt;&gt; in7 &gt;&gt; in8 &gt;&gt; in9
	 &gt;&gt; in10 &gt;&gt; in11 &gt;&gt; in12;

  <FONT COLOR="#ff0000">// Echo the values to the console</FONT>
  cout &lt;&lt; in1 &lt;&lt; " " &lt;&lt; in2 &lt;&lt; " " &lt;&lt; in3 &lt;&lt; " " &lt;&lt; in4 &lt;&lt; " " &lt;&lt; in5 
       &lt;&lt; " " &lt;&lt; in6 &lt;&lt; " " &lt;&lt; in7 &lt;&lt; " " &lt;&lt; in8 &lt;&lt; " " &lt;&lt; in9 
       &lt;&lt; " " &lt;&lt; in10 &lt;&lt; " " &lt;&lt; in11 &lt;&lt; " " &lt;&lt; in12 &lt;&lt; "\n";
  
  cout &lt;&lt; "Writing some integer values to the stream in text mode" &lt;&lt; "\n";
  stream_pos = stream.df_Tell(); <FONT COLOR="#ff0000">// Record the current position</FONT>

  <FONT COLOR="#ff0000">// Use decimal and hex text modes </FONT>
  stream &lt;&lt; text &lt;&lt; i1 &lt;&lt; " " &lt;&lt; i2 &lt;&lt; " " &lt;&lt; i3 &lt;&lt; " " &lt;&lt; i4 &lt;&lt; " " 
	 &lt;&lt; i5 &lt;&lt; " " &lt;&lt; i6 &lt;&lt; " " &lt;&lt; i7 &lt;&lt; " " &lt;&lt; i8 &lt;&lt; " " &lt;&lt; i9 &lt;&lt; " "
	 &lt;&lt; i10 &lt;&lt; " " &lt;&lt; i11 &lt;&lt; " " &lt;&lt; i12 &lt;&lt; "\n" &lt;&lt; flush;

  stream.df_SetWidth(2); stream.df_SetFill('0');
  stream &lt;&lt; hex &lt;&lt; i1 &lt;&lt; " " &lt;&lt; i2 &lt;&lt; " " &lt;&lt; i3 &lt;&lt; " " &lt;&lt; i4 &lt;&lt; " " 
	 &lt;&lt; i5 &lt;&lt; " " &lt;&lt; i6 &lt;&lt; " " &lt;&lt; i7 &lt;&lt; " " &lt;&lt; i8 &lt;&lt; " " &lt;&lt; i9 &lt;&lt; " "
	 &lt;&lt; i10 &lt;&lt; " " &lt;&lt; i11 &lt;&lt; " " &lt;&lt; i12 &lt;&lt; "\n" &lt;&lt; clear;

  cout &lt;&lt; "Reading the text strings from the stream" &lt;&lt; "\n";
  stream.df_Seek(stream_pos); <FONT COLOR="#ff0000">// Reset the stream position to the first value</FONT>

  stream &gt;&gt; sbuf1 &gt;&gt; sbuf2;

  <FONT COLOR="#ff0000">// Echo the text to the console</FONT>
  cout &lt;&lt; sbuf1 &lt;&lt; "\n" &lt;&lt; sbuf2 &lt;&lt; "\n";

  cout &lt;&lt; "Writing some floating point values to the stream in binary" &lt;&lt; "\n";
  stream_pos = stream.df_Tell(); <FONT COLOR="#ff0000">// Record the current position</FONT>
  float f1 = 1.1011; const float f2 = 2.2022;
  double f3 = 3.3033; const double f4 = 4.4044;

  stream &lt;&lt; f1 &lt;&lt; f2 &lt;&lt; f3 &lt;&lt; f4;

  cout &lt;&lt; "Reading the binary floating point values from the stream" &lt;&lt; "\n";
  stream.df_Seek(stream_pos); <FONT COLOR="#ff0000">// Reset the stream position to the first value</FONT>
  float fn1, fn2;
  double fn3, fn4;

  stream &gt;&gt; fn1 &gt;&gt; fn2 &gt;&gt; fn3 &gt;&gt; fn4;

  <FONT COLOR="#ff0000">// Echo the values to the console</FONT>
  cout &lt;&lt; fn1 &lt;&lt; " " &lt;&lt; fn2 &lt;&lt; " " &lt;&lt; fn3 &lt;&lt; " " &lt;&lt; fn4 &lt;&lt; "\n";

  cout &lt;&lt; "Writing some floating point values to the stream in text mode" 
       &lt;&lt; "\n";
  stream_pos = stream.df_Tell(); <FONT COLOR="#ff0000">// Record the current position</FONT>

  stream &lt;&lt; text &lt;&lt; f1 &lt;&lt; " " &lt;&lt; f2 &lt;&lt; " " &lt;&lt; f3 &lt;&lt; " " &lt;&lt; f4 &lt;&lt; "\n";
  stream.df_Precision(4);
  stream &lt;&lt; f1 &lt;&lt; " " &lt;&lt; f2 &lt;&lt; " " &lt;&lt; f3 &lt;&lt; " " &lt;&lt; f4 &lt;&lt; "\n"&lt;&lt; clear;

  cout &lt;&lt; "Reading the text strings from the stream" &lt;&lt; "\n";
  stream.df_Seek(stream_pos); <FONT COLOR="#ff0000">// Reset the stream position to the first value</FONT>

  stream &gt;&gt; sbuf1 &gt;&gt; sbuf2;

  <FONT COLOR="#ff0000">// Echo the text to the console</FONT>
  cout &lt;&lt; sbuf1 &lt;&lt; "\n" &lt;&lt; sbuf2 &lt;&lt; "\n";

#if defined (__64_BIT_DATABASE_ENGINE__)
  PausePrg();

  cout &lt;&lt; "Writing some 64-bit integer values to the stream in binary" &lt;&lt; "\n";
  stream_pos = stream.df_Tell(); <FONT COLOR="#ff0000">// Record the current position</FONT>
  __LLWORD__ LL1 = (__LLWORD__)1; const __LLWORD__ LL2 = (__LLWORD__)2;
  __ULLWORD__ LL3 = (__ULLWORD__)3; const __ULLWORD__ LL4 = (__LLWORD__)4;

  stream &lt;&lt; LL1 &lt;&lt; LL2 &lt;&lt; LL3 &lt;&lt; LL4;

  cout &lt;&lt; "Reading the binary 64-bit integer point values from the stream" 
       &lt;&lt; "\n";
  stream.df_Seek(stream_pos); <FONT COLOR="#ff0000">// Reset the stream position to the first value</FONT>
  __LLWORD__ LLn1, LLn2;
  __ULLWORD__ LLn3, LLn4;

  stream &gt;&gt; LLn1 &gt;&gt; LLn2 &gt;&gt; LLn3 &gt;&gt; LLn4;

  <FONT COLOR="#ff0000">// Echo the values to the console</FONT>
  cout &lt;&lt; (int)LLn1 &lt;&lt; " " &lt;&lt; (int)LLn2 &lt;&lt; " " &lt;&lt; (int)LLn3 &lt;&lt; " " 
       &lt;&lt; (int) LLn4 &lt;&lt; "\n";

  cout &lt;&lt; "Writing some 64-bit integer values to the stream in text mode" 
       &lt;&lt; "\n";
  stream_pos = stream.df_Tell(); <FONT COLOR="#ff0000">// Record the current position</FONT>

  <FONT COLOR="#ff0000">// Use decimal and hex text modes </FONT>
  LL1 = __LLWORD__(9223372036854775808);
  LL3 = __ULLWORD__(18446744073709551615);

  stream &lt;&lt; text &lt;&lt; LL1 &lt;&lt; " " &lt;&lt; LL2 &lt;&lt; " " &lt;&lt; LL3 &lt;&lt; " " &lt;&lt; LL4 &lt;&lt; "\n";

  stream.df_SetWidth(4); stream.df_SetFill('0');
  stream &lt;&lt; hex &lt;&lt; LL1 &lt;&lt; " " &lt;&lt; LL2 &lt;&lt; " " &lt;&lt; LL3 &lt;&lt; " " &lt;&lt; LL4 &lt;&lt; "\n"
	 &lt;&lt; clear;

  cout &lt;&lt; "Reading the text strings from the stream" &lt;&lt; "\n";
  stream.df_Seek(stream_pos); <FONT COLOR="#ff0000">// Reset the stream position to the first value</FONT>

  stream &gt;&gt; sbuf1 &gt;&gt; sbuf2;

  <FONT COLOR="#ff0000">// Echo the text to the console</FONT>
  cout &lt;&lt; sbuf1 &lt;&lt; "\n" &lt;&lt; sbuf2 &lt;&lt; "\n";
#endif <FONT COLOR="#ff0000">// __64_BIT_DATABASE_ENGINE__</FONT>

  <FONT COLOR="#ff0000">// Close and remove the text files</FONT>
  stream.df_Close();
  stream.df_remove(fname);
}

int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  cout &lt;&lt; "\n";

  OverLoadTest();
  PausePrg();

  DirectoryTest();
  PausePrg();

  FileTest();
  PausePrg();

  RandomSeekTest();
  PausePrg();

  GetLineTest();

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
