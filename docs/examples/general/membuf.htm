<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:35:35 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>membuf example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program for the MemoryBuffer class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "membuf.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

void PausePrg()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  cout &lt;&lt; "Testing MemoryBuffer constructors..." &lt;&lt; "\n";
  char *test_pattern = "The quick brown fox jumps over the lazy dog";
  char *test_message = "This is a test...";

  MemoryBuffer a((char *)test_pattern, strlen(test_pattern)+1);
  a[strlen(test_pattern)] = 0; <FONT COLOR="#ff0000">// Null terminate the buffer</FONT>
  cout &lt;&lt; (char *)a &lt;&lt; "\n";
  
  MemoryBuffer b;

  MemoryBuffer c((char *)test_message, strlen(test_message)+1);
  c[strlen(test_message)] = 0; <FONT COLOR="#ff0000">// Null terminate the buffer</FONT>
  cout &lt;&lt; (char *)c &lt;&lt; "\n";
  
  PausePrg();

  cout &lt;&lt; "Testing overloaded assignment operators..." &lt;&lt; "\n";
  b = a;
  cout &lt;&lt; (char *)b &lt;&lt; "\n";
  b = c;
  cout &lt;&lt; (char *)b &lt;&lt; "\n";
  
  PausePrg();

  cout &lt;&lt; "Testing copy constructor..." &lt;&lt; "\n";
  MemoryBuffer aa(a);
  cout &lt;&lt; (char *)aa &lt;&lt; "\n";
  MemoryBuffer bb(b);
  cout &lt;&lt; (char *)bb &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Testing overloaded += operator..." &lt;&lt; "\n";
  char *num_test = " 0123456789";
  MemoryBuffer sbuf((char *)test_pattern, strlen(test_pattern));
  MemoryBuffer buf((char *)num_test, strlen(num_test));
  sbuf += buf;
  sbuf += '\0'; <FONT COLOR="#ff0000">// Null terminate the buffer</FONT>
  cout &lt;&lt; (char *)sbuf &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Testing concatenation..." &lt;&lt; "\n";
  char *s1 = "DOG "; char *s2 = "CAT "; char *s3 = "MOUSE";
  MemoryBuffer m1;
  m1.Load(s1, strlen(s1));
  m1.Cat(s2, strlen(s2));
  m1.Cat(s3, strlen(s3));
  m1.Cat('\0'); <FONT COLOR="#ff0000">// Null terminate the buffer</FONT>
  cout &lt;&lt; (char *)m1 &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing find functions..." &lt;&lt; "\n";
  cout &lt;&lt; "String = " &lt;&lt; (char *)m1 &lt;&lt; "\n";
  if(m1.Find(s2, strlen(s2), 0) == __MEMBUF_NO_MATCH__)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Found pattern: " &lt;&lt; s1 &lt;&lt; "\n";

  if(m1.Find(s3, strlen(s3), 0) == __MEMBUF_NO_MATCH__)
    cout &lt;&lt; "Pattern not found!" &lt;&lt; "\n";
  else
    cout &lt;&lt; "Found pattern: " &lt;&lt; s3 &lt;&lt; "\n";

  cout &lt;&lt; "\n";

  cout &lt;&lt; "Testing repeated pattern finding..." &lt;&lt; "\n";
  MemoryBuffer m2(c);
  cout &lt;&lt; "String = " &lt;&lt; (char *)m2 &lt;&lt; "\n";
  char *s4 = "is";
  unsigned offset = 0;
  while(1) {
    offset = m2.Find((char *)s4, strlen(s4), offset);
    if (offset == __MEMBUF_NO_MATCH__) break;
    cout &lt;&lt; "Found pattern \"" &lt;&lt; s4 &lt;&lt; "\" at index: " &lt;&lt; offset &lt;&lt; "\n";
    offset++;
  }

  PausePrg();

  cout &lt;&lt; "Testing delete function..." &lt;&lt; "\n";
  MemoryBuffer x1(a);
  cout &lt;&lt; (char *)x1 &lt;&lt; "\n";
  char *xx = "fox";
  int Index = x1.Find((char *)xx);
  cout &lt;&lt; "Deleting fox from string..." &lt;&lt; "\n";
  x1.DeleteAt(Index, strlen(xx));
  cout &lt;&lt; (char *)x1 &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing replace functions..." &lt;&lt; "\n";
  MemoryBuffer x2(a);
  cout &lt;&lt; (char *)x2 &lt;&lt; "\n";
  char *xy = "cat";
  Index = x2.Find(xx);
  cout &lt;&lt; "Replacing fox:" &lt;&lt; "\n";
  x2.ReplaceAt(Index, xy, strlen(xy));  
  cout &lt;&lt; (char *)x2 &lt;&lt; "\n";
  cout &lt;&lt; "Replacing jumps:" &lt;&lt; "\n";
  Index = x2.Find((void *)"jumps", strlen("jumps"));
  x2.ReplaceAt(Index, "runs ", strlen("runs "));
  cout &lt;&lt; (char *)x2 &lt;&lt; "\n";

  MemoryBuffer x3((char *)"cow", 3);
  cout &lt;&lt; "Replacing dog:" &lt;&lt; "\n";
  Index = x2.Find((void *)"dog");
  x2.ReplaceAt(Index, x3);
  cout &lt;&lt; (char *)x2 &lt;&lt; "\n";
  
  PausePrg();
  
  cout &lt;&lt; "Testing the insert functions..." &lt;&lt; "\n";
  MemoryBuffer x4(a);
  cout &lt;&lt; (char *)x4 &lt;&lt; "\n";
  char *xz = "and yellow ";
  cout &lt;&lt; "Inserting text into string:" &lt;&lt; "\n";
  Index = x4.Find(xx);
  x4.InsertAt(Index, xz, strlen(xz));
  cout &lt;&lt; (char *)x4 &lt;&lt; "\n";
  Index = x4.Find((void *)"over");
  x4.InsertAt(Index, (char *)"around and ", strlen("around and "));
  cout &lt;&lt; (char *)x4 &lt;&lt; "\n";

  MemoryBuffer x5((char *)"cow and ", strlen("cow and "));
  Index = x4.Find((void *)"dog");
  x4.InsertAt(Index, x5);
  cout &lt;&lt; (char *)x4 &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Testing dynamic allocation functions..." &lt;&lt; "\n";
  MemoryBuffer z(c);
  cout &lt;&lt; "String = " &lt;&lt; (char *)z &lt;&lt; "\n";
  cout &lt;&lt; "Buffer's logical length = " &lt;&lt; z.length() &lt;&lt; "\n";
  cout &lt;&lt; "Buffer's allocated length = " &lt;&lt; z.dlength() &lt;&lt; "\n";
  cout &lt;&lt; "Changing allocated length..." &lt;&lt; "\n";
  z.Realloc(z.length()+16);
  cout &lt;&lt; "Buffer's allocated length = " &lt;&lt; z.dlength() &lt;&lt; "\n";
  cout &lt;&lt; "Destorying the buffer" &lt;&lt; "\n";
  z.Destroy();
  cout &lt;&lt; "Buffer's logical length = " &lt;&lt; z.length() &lt;&lt; "\n";
  cout &lt;&lt; "Buffer's allocated length = " &lt;&lt; z.dlength() &lt;&lt; "\n";
  
  PausePrg();

  cout &lt;&lt; "Testing resizing function" &lt;&lt; "\n";
  MemoryBuffer rs(a);
  cout &lt;&lt; "String = " &lt;&lt; (char *)rs &lt;&lt; "\n";
  cout &lt;&lt; "Buffer's logical length = " &lt;&lt; rs.length() &lt;&lt; "\n";
  cout &lt;&lt; "Buffer's allocated length = " &lt;&lt; rs.dlength() &lt;&lt; "\n";
  cout &lt;&lt; "Resizing the buffer to 24 bytes" &lt;&lt; "\n";
  rs.resize(24);
  cout &lt;&lt; "Buffer's logical length = " &lt;&lt; rs.length() &lt;&lt; "\n";
  cout &lt;&lt; "Buffer's allocated length = " &lt;&lt; rs.dlength() &lt;&lt; "\n";
  cout &lt;&lt; "Freeing unused allocated space..." &lt;&lt; "\n";
  rs.FreeBytes();
  cout &lt;&lt; "Buffer's logical length = " &lt;&lt; rs.length() &lt;&lt; "\n";
  cout &lt;&lt; "Buffer's allocated length = " &lt;&lt; rs.dlength() &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Testing overload subscript operator..." &lt;&lt; "\n";
  char *Message = "This is a test message";
  MemoryBuffer ss((char *)Message, strlen(Message));
  unsigned i;
  for(i = 0; i &lt; strlen(Message); i++)
    cout &lt;&lt; ss[i];
  cout &lt;&lt; "\n";

  PausePrg();
  cout &lt;&lt; "Testing memset function..." &lt;&lt; "\n";
  unsigned bytes = 25;
  MemoryBuffer fill_buf(bytes);
  fill_buf.MemSet('*'); <FONT COLOR="#ff0000">// Fill the entire memory buffer</FONT>
  for(i = 0; i &lt; bytes; i++) cout &lt;&lt; fill_buf[i];
  cout &lt;&lt; "\n";
  <FONT COLOR="#ff0000">// Fill the buffer with 5 bytes starting at zero based offset 10</FONT>
  fill_buf.MemSet('?', 10, 5); 
  for(i = 0; i &lt; bytes; i++) cout &lt;&lt; fill_buf[i];
  cout &lt;&lt; "\n";
  <FONT COLOR="#ff0000">// Set the first and last bytes</FONT>
  fill_buf.MemSet('!', 0, 1); 
  fill_buf.MemSet('!', (bytes-1), 1); 
  for(i = 0; i &lt; bytes; i++) cout &lt;&lt; fill_buf[i];
  cout &lt;&lt; "\n";

  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
