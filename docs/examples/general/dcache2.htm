<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:35:08 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>dcache2 example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program for the device cache classes.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include "dfileb.h"
#include "devcache.h"
#include "memblock.h"
#include "membuf.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

<FONT COLOR="#ff0000">// Example class used to create the device cache</FONT>
class gxFileCache : public gxDeviceCache
{
public:
  gxFileCache(unsigned CacheSize = 1024);
  ~gxFileCache() { }

public:
  void Flush() { cache.Flush(); } <FONT COLOR="#ff0000">// Flush the cache buckets</FONT>
  unsigned BucketsInUse() { return cache.BucketsInUse(); }
  void CloseOutputFile() { infile.df_Close(); }
  void CloseInputFile() { outfile.df_Close(); }
  int OpenInputFile(const char *in);
  int OpenOutputFile(const char *out);
  unsigned LoadFile(gxDeviceCachePtr p);
  int CopyFileToFile(const char *in, const char *out, int *bc = 0);

private: <FONT COLOR="#ff0000">// Base class interface</FONT>
  void Read(void *buf, unsigned Bytes, gxDeviceTypes dev);
  void Write(const void *buf, unsigned Bytes, gxDeviceTypes dev);

private: <FONT COLOR="#ff0000">// Device objects</FONT>
  DiskFileB outfile; <FONT COLOR="#ff0000">// File used to output data</FONT>
  DiskFileB infile;  <FONT COLOR="#ff0000">// File used to input data</FONT>
  
private: <FONT COLOR="#ff0000">// Device cache</FONT>
  gxDeviceBucketCache cache;

public: <FONT COLOR="#ff0000">// Functions used to get the current device cache</FONT>
  gxDeviceBucketCache *GetCache() { return &amp;cache; }
};

gxFileCache::gxFileCache(unsigned CacheSize) : cache(CacheSize) 
{ 
  ready_for_writing = 1; 
  ready_for_reading = 1;
  cache.Connect(this); 
}

void gxFileCache::Read(void *buf, unsigned Bytes, gxDeviceTypes dev) 
{
  switch(dev) {
    case gxDEVICE_DISK_FILE:
      if(!infile) { ready_for_reading = 0; return; }
      else { ready_for_reading = 1; }
      infile.df_Read((char *)buf, Bytes);
      break;

    default:
      break;
  }
}
  
void gxFileCache::Write(const void *buf, unsigned Bytes, gxDeviceTypes dev) 
{
  switch(dev) {
    case gxDEVICE_CONSOLE:
      cout.write((char *)buf, Bytes);
      break;

    case gxDEVICE_DISK_FILE:
      if(!outfile) { ready_for_writing = 0; return; }
      else { ready_for_writing = 1; }
      outfile.df_Write((char *)buf, Bytes);
      break;
      
    default:
      break;
  }
}

int gxFileCache::CopyFileToFile(const char *in, const char *out, int *bc)
{
  if(!OpenInputFile(in)) return 0;
  if(!OpenOutputFile(out)) return 0;

  if(!cache) return 0;
  
  gxDeviceTypes o_device = gxDEVICE_DISK_FILE; <FONT COLOR="#ff0000">// Output device</FONT>
  gxDeviceTypes i_device = gxDEVICE_NULL;      <FONT COLOR="#ff0000">// No input buffering</FONT>

  <FONT COLOR="#ff0000">// Setup a pointer to the cache buckets</FONT>
  gxDeviceCachePtr p(cache, o_device, i_device); 
  *bc = LoadFile(p); <FONT COLOR="#ff0000">// Load the file into the cache </FONT>
  cache.Flush(); <FONT COLOR="#ff0000">// Ensure all the buckets a written to the output device</FONT>
  infile.df_Close();
  outfile.df_Close();
  return 1;
}

unsigned gxFileCache::LoadFile(gxDeviceCachePtr p)
<FONT COLOR="#ff0000">// Load a file from disk into the device cache. Returns the</FONT>
<FONT COLOR="#ff0000">// number bytes read from the file.</FONT>
{
  unsigned byte_count = 0;
  char sbuf[MEMORY_BLOCK_SIZE];

  infile.df_Rewind();

  while(!infile.df_EOF()) {
    if(infile.df_Read(sbuf, MEMORY_BLOCK_SIZE) != DiskFileB::df_NO_ERROR) {
      if(infile.df_GetError() != DiskFileB::df_EOF_ERROR) {
	break;
      }
    }
    p-&gt;Load(sbuf, infile.df_gcount());
    byte_count += infile.df_gcount();
  }

  return  byte_count;
}

int gxFileCache::OpenInputFile(const char *in)
<FONT COLOR="#ff0000">// Open the file if it exists. Returns false</FONT>
<FONT COLOR="#ff0000">// it the file cannot be opened or if it does</FONT>
<FONT COLOR="#ff0000">// not exist.</FONT>
{
  infile.df_Open(in);
  if(!infile) return 0;
  return 1;
}

int gxFileCache::OpenOutputFile(const char *out)
<FONT COLOR="#ff0000">// Open the specified file for writing and truncate</FONT>
<FONT COLOR="#ff0000">// it. Returns false if the file cannot be opened.</FONT>
{
  outfile.df_Create(out);
  if(!outfile) return 0;
  return 1;
}

int main(int argc, char **argv)
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  if(argc &lt; 3) {
    cout &lt;&lt; "\n";
    cout &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " infile outfile" &lt;&lt; "\n";
    cout &lt;&lt; "\n";
    return 0;
  }

  char *in = argv[1];
  char *out = argv[2];

  int cache_size = 1024;
  gxFileCache dev(cache_size); <FONT COLOR="#ff0000">// Device cache used to process a file</FONT>

  cout &lt;&lt; "Creating a device cache using " &lt;&lt; cache_size 
       &lt;&lt; " cache buckets." &lt;&lt; "\n";
  cout &lt;&lt; "Reserving " &lt;&lt; (sizeof(gxDeviceBucket) * cache_size) 
       &lt;&lt; " bytes of memory." &lt;&lt; "\n";

  int byte_count;
  
  if(!dev.CopyFileToFile(in, out, &amp;byte_count)) {
    cout &lt;&lt; "Error copying file." &lt;&lt; "\n";
    return 0;
  }

  cout &lt;&lt; "Finished processing file." &lt;&lt; "\n";
  cout &lt;&lt; "Byte count = " &lt;&lt; byte_count &lt;&lt; "\n";

  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
