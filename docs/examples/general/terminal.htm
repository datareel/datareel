<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:35:24 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>terminal example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 03/21/1997 </FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program for the terminal interface class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

<FONT COLOR="#ff0000">// This directive must be defined to use the terminal I/O class</FONT>
#if !defined (__USE_TERMINAL_IO__)
int main() { return 0; } <FONT COLOR="#ff0000">// No test for native types</FONT>
#else

#include &lt;ctype.h&gt;
#include &lt;string.h&gt;
#include "terminal.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

const int selections = 10;
const int functions = 10;
typedef void (*MF)(); <FONT COLOR="#ff0000">// Function pointer to menu functions</FONT>

void Exit();
void CursorPositionTest(); <FONT COLOR="#ff0000">// Full screen cursor test</FONT>
void Dialogs();            <FONT COLOR="#ff0000">// User interface functions</FONT>
void InputFunctions();     <FONT COLOR="#ff0000">// Test input functions</FONT>
void StatusLine();         <FONT COLOR="#ff0000">// Status line function</FONT>
void Justification();      <FONT COLOR="#ff0000">// Test right, left, and center justification</FONT>
void VideoTest();          <FONT COLOR="#ff0000">// Test video attributes </FONT>
void KBWait();             <FONT COLOR="#ff0000">// Test KBWait function</FONT>
void ScanCodes();          <FONT COLOR="#ff0000">// Display keyboard scan codes</FONT>
void GetTerm();            <FONT COLOR="#ff0000">// Get the terminal type</FONT>

const char *MainMenu[selections] = {
  "(0) - To exit this program",
  "(1) - Cursor position test",
  "(2) - Standard dialog test",
  "(3) - Input function test",
  "(4) - Status line test",
  "(5) - Line justification test",
  "(6) - Video attributes test",
  "(7) - Key board wait test",
  "(8) - Display keyboard scancodes",
  "(9) - Get the terminal type"
};

MF MMFunctions[functions] = {
  &amp;Exit,
  &amp;CursorPositionTest, <FONT COLOR="#ff0000">// Full screen cursor test</FONT>
  &amp;Dialogs,            <FONT COLOR="#ff0000">// User interface functions</FONT>
  &amp;InputFunctions,     <FONT COLOR="#ff0000">// Test input functions</FONT>
  &amp;StatusLine,         <FONT COLOR="#ff0000">// Status line function</FONT>
  &amp;Justification,      <FONT COLOR="#ff0000">// Test right, left, and center justification</FONT>
  &amp;VideoTest,          <FONT COLOR="#ff0000">// Test video attributes </FONT>
  &amp;KBWait,             <FONT COLOR="#ff0000">// Test KBWait function</FONT>
  &amp;ScanCodes,          <FONT COLOR="#ff0000">// Display keyboard scan codes</FONT>
  &amp;GetTerm             <FONT COLOR="#ff0000">// Get the terminal type</FONT>
};

void Menu()
{
  const char *title = "TERMINAL CLASS TEST PROGRAM'S MAIN MENU" ;

  Coords *p = new Coords(0, 0);
  p-&gt;SetX(terminal-&gt;Center(title));
  p-&gt;SetY(terminal-&gt;ScreenCenter(selections));
  terminal-&gt;ClearScreen();
  terminal-&gt;Write(title, p-&gt;XPos(), p-&gt;YPrev());

  for(int i = 0; i &lt; selections; i++)
    terminal-&gt;Write(MainMenu[i], p-&gt;XPos(), p-&gt;YOffset(1));
  
  terminal-&gt;Write((char *)"Press the number of your selection &gt;",
		  p-&gt;XPos(), p-&gt;YOffset(2));
  delete p;
}

void ProcessArgs()
{
  int c;
  while(1) {
    Menu();
    c = terminal-&gt;GetChar();
    switch(tolower(c)) {
      case '0': 
	(*MMFunctions[0]) (); <FONT COLOR="#ff0000">// Call the appropriate menu function</FONT>
	return;
      case '1':
	(*MMFunctions[1]) (); <FONT COLOR="#ff0000">// Call the appropriate menu function</FONT>
	break;
      case '2':
	(*MMFunctions[2]) (); <FONT COLOR="#ff0000">// Call the appropriate menu function</FONT>
	break;
      case '3':
	(*MMFunctions[3]) (); <FONT COLOR="#ff0000">// Call the appropriate menu function</FONT>
	break;
      case '4':
	(*MMFunctions[4]) (); <FONT COLOR="#ff0000">// Call the appropriate menu function</FONT>
	break;
      case '5':
	(*MMFunctions[5]) (); <FONT COLOR="#ff0000">// Call the appropriate menu function</FONT>
	break;
      case '6':
	(*MMFunctions[6]) (); <FONT COLOR="#ff0000">// Call the appropriate menu function</FONT>
	break;
      case '7':
	(*MMFunctions[7]) (); <FONT COLOR="#ff0000">// Call the appropriate menu function</FONT>
	break;
      case '8':
	(*MMFunctions[8]) (); <FONT COLOR="#ff0000">// Call the appropriate menu function</FONT>
	break;
      case '9':
	(*MMFunctions[9]) (); <FONT COLOR="#ff0000">// Call the appropriate menu function</FONT>
	break;
      default:
	break;
    }
  }
}

int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  terminal-&gt;init();   <FONT COLOR="#ff0000">// Initialize the terminal</FONT>

  ProcessArgs();      <FONT COLOR="#ff0000">// Enter main communications loop</FONT>

  terminal-&gt;ClearScreen(); 
  terminal-&gt;finish(); <FONT COLOR="#ff0000">// Restore the terminal before exiting</FONT>
  return 0;
}

void ScanCodes()
{
  char c; int x, y;
  terminal-&gt;ClearScreen();
  x = y = 0;
  terminal-&gt;Write((char *)"Displaying keyboard scan codes...", x, y);
  y = y+2;
  terminal-&gt;Write((char *)"Type keys. Press Esc when finished",x ,y);
  y = y+2;
  terminal-&gt;MoveCursor(x, y);
  while ((c = terminal-&gt;GetChar()) != termEscapeKey) {
    y = y+1;
    terminal-&gt;Write((char *)"The ", x, y);
    terminal-&gt;Write(c);
    terminal-&gt;Write((char *)" key value is: ");
    terminal-&gt;Write((int)c &amp; 255);
    if(y &gt; terminal-&gt;MaxLines()-1) {
      terminal-&gt;ClearScreen();
      terminal-&gt;Write((char *)"Type keys. Press Esc when finished",0 ,0);
      y = 2;
      terminal-&gt;MoveCursor(x, y);
    }
  }
  terminal-&gt;ClearScreen();
}

void CursorPositionTest()
{
  terminal-&gt;ClearScreen();
  
  const char Pop = '*';     <FONT COLOR="#ff0000">// Display cursor position character</FONT>
  short x = 0, y = 0;
  unsigned char lastc = 0;
  unsigned char c = 0;
  char *sl = "U-up, D-down, L-left, R-right, Esc to quit...";
  int len = strlen(sl);
  
  while (c != termEscapeKey) {
    terminal-&gt;StatusLine(sl);
    terminal-&gt;Write((char *)"x: ", len + 5, terminal-&gt;MaxLines()-1);
    terminal-&gt;Write(x);
    terminal-&gt;Write((char *)" y: ");
    terminal-&gt;Write(y);
    terminal-&gt;MoveCursor(x, y);
    c = terminal-&gt;GetChar();
    switch (tolower(c))	{
      case ' ': case '\r':
	terminal-&gt;Write(Pop, x, y);
	terminal-&gt;PutBack(lastc);
	break;
      case 'u': <FONT COLOR="#ff0000">// up cursor</FONT>
	if (y-- == 0) y = terminal-&gt;MaxLines()-1;
	lastc = c;
	break;
      case 'd': <FONT COLOR="#ff0000">// down cursor</FONT>
	if (++y == terminal-&gt;MaxLines()-1) y = 0; <FONT COLOR="#ff0000">// Avoid  status line</FONT>
	lastc = c;
	break;
      case 'l': <FONT COLOR="#ff0000">// left cursor</FONT>
	if (x-- == 0) x = terminal-&gt;MaxCols()-1;
	lastc = c;
	break;
      case 'r': <FONT COLOR="#ff0000">//  right cursor</FONT>
	if (++x == terminal-&gt;MaxCols()) x = 0;
	lastc = c;
	break;
      default:
	break;
    }
  }
  terminal-&gt;ClearScreen();
}

void VideoTest()
{
  int x, y;
  x = y = 0;
  terminal-&gt;ClearScreen();
  terminal-&gt;Write((char *)"Testing video attributes...", x, y);
  y = y+2;
  terminal-&gt;StandOut((char *)"Stand Out video mode", x, y);
  y = y+2;
  terminal-&gt;Write((char *)"Normal text", x, y);
  y = y+2;
  terminal-&gt;AnyKey(x, y);
  terminal-&gt;ClearScreen();
}

void Justification()
{
  terminal-&gt;ClearScreen();
  terminal-&gt;Write((char *)"Testing left, center, and right justification", 0, 0);
  char *fox = "This quick brown fox jumps over the lazy dog";
  char *nums = "0123456789";
  char *alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

  terminal-&gt;Write(nums, 0, 2);
  terminal-&gt;Write(nums, terminal-&gt;Center(nums), 4);
  terminal-&gt;Write(nums, terminal-&gt;Right(nums), 6);

  terminal-&gt;Write(alpha, 0, 8);
  terminal-&gt;Write(alpha, terminal-&gt;Center(alpha), 10);
  terminal-&gt;Write(alpha, terminal-&gt;Right(alpha), 12);

  terminal-&gt;Write(fox, 0, 14);
  terminal-&gt;Write(fox, terminal-&gt;Center(fox), 16);
  terminal-&gt;Write(fox, terminal-&gt;Right(fox), 18);

  terminal-&gt;AnyKey(0, 20);
  terminal-&gt;ClearScreen();
}

void InputFunctions()
{
  terminal-&gt;ClearScreen();
  Coords *pos = new Coords(0, 0);
  terminal-&gt;Write((char *)"Testing input functions...", pos-&gt;XPos(), pos-&gt;YPos());

  terminal-&gt;Write((char *)"Enter a string: ", pos-&gt;XPos(), pos-&gt;YOffset(2)); 
  char buf[81];
  terminal-&gt;GetString(buf);
  terminal-&gt;Write((char *)"You entered: ", pos-&gt;XPos(), pos-&gt;YOffset(2)); 
  terminal-&gt;Write(buf);

  terminal-&gt;Write((char *)"Enter a password: ", pos-&gt;XPos(), pos-&gt;YOffset(2)); 
  terminal-&gt;GetPassword(buf);
  terminal-&gt;Write((char *)"You entered: ", pos-&gt;XPos(), pos-&gt;YOffset(2)); 
  terminal-&gt;Write(buf);

  terminal-&gt;Write((char *)"Enter a number: ", pos-&gt;XPos(), pos-&gt;YOffset(2)); 
  int num = terminal-&gt;GetInt();
  terminal-&gt;Write((char *)"You entered: ", pos-&gt;XPos(), pos-&gt;YOffset(2)); 
  terminal-&gt;Write(num); 

  terminal-&gt;Write((char *)"Enter a floating point number: ",
		  pos-&gt;XPos(), pos-&gt;YOffset(2)); 
  double fp = terminal-&gt;GetFloat();
  terminal-&gt;Write((char *)"You entered: ", pos-&gt;XPos(), pos-&gt;YOffset(2)); 
  terminal-&gt;Write(fp);

  terminal-&gt;AnyKey(pos-&gt;XPos(), pos-&gt;YOffset(2)); 
  terminal-&gt;ClearScreen();
  delete pos;
}

void KBWait()
{
  terminal-&gt;ClearScreen();
  terminal-&gt;Write((char *)"Testing KBWait() function...", 0, 0);
  terminal-&gt;AnyKey(0, 1);
  
  int i, j = 0; 
  for(;;) { <FONT COLOR="#ff0000">// Continue processing until any key is pressed</FONT>
    for(i = 0; i &lt; terminal-&gt;MaxCols(); i++) {
      terminal-&gt;Write('*', i, j);
    }
    j++;
    if(terminal-&gt;KBWait()) break; 
  }
  terminal-&gt;ClearScreen();
}

void Dialogs()
{
  Coords *pos = new Coords(0, 0);
  terminal-&gt;ClearScreen();
  terminal-&gt;Write((char *)"Testing standard dialogs functions...",
		  pos-&gt;XPos(), pos-&gt;YPos()); 

  int yn = terminal-&gt;YesNo(pos-&gt;XPos(), pos-&gt;YOffset(2)); 
  if(yn) 
    terminal-&gt;Write((char *)"You pressed \'y\' to continue",
		    pos-&gt;XPos(), pos-&gt;YOffset(2)); 

  terminal-&gt;MoveCursor(pos-&gt;XPos(), pos-&gt;YOffset(2)); 
  yn = terminal-&gt;YesNo();
  if(!yn) 
    terminal-&gt;Write((char *)"You pressed \'n\' not to continue",
		    pos-&gt;XPos(), pos-&gt;YOffset(2)); 

  terminal-&gt;AnyKey(pos-&gt;XPos(), pos-&gt;YOffset(2)); 

  terminal-&gt;ClearScreen();
  delete pos;
}

void StatusLine()
{
  terminal-&gt;ClearScreen();
  terminal-&gt;Write((char *)"Testing status line functions...",0, 0);
  terminal-&gt;StatusLine((char *)"Normal mode bottom, left justified status line");
  terminal-&gt;AnyKey(0, 2);
  terminal-&gt;ClearScreen();
}

void GetTerm()
{
  terminal-&gt;ClearScreen();
  if(getenv("TERM")) {
    terminal-&gt;Write((char *)"The TERM variable is set: ", 0, 0); 
    terminal-&gt;Write(terminal-&gt;GetTerm());
  }
  else
    terminal-&gt;Write((char *)"The TERM variable is not set.", 0, 0); 

  terminal-&gt;Write((char *)"The maximum number of lines = ", 0, 1);
  terminal-&gt;Write(terminal-&gt;MaxLines());
  terminal-&gt;Write((char *)"The maximum number of columns = ", 0, 2);
  terminal-&gt;Write(terminal-&gt;MaxCols());
  terminal-&gt;AnyKey(0, 4);
  terminal-&gt;ClearScreen();
}

void Exit()
{
  return; 
}

#endif <FONT COLOR="#ff0000">// __USE_TERMINAL_IO__</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
