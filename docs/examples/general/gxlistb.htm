<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:35:57 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxlistb example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 04/05/1996</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Doubly linked list class test program.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include "gxlistb.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

void PausePrg()
{
  <FONT COLOR="#ff0000">// Pause the program until enter is pressed</FONT>
  cout &lt;&lt; endl;
  cout &lt;&lt; "Press Enter to continue..." &lt;&lt; "\n";
  cin.get();
}

void ScrollForward(gxListB &amp;list)
{
  cout &lt;&lt; "Walking through the list..." &lt;&lt; "\n";
  gxListNodeB *ptr = list.GetHead();
  while(ptr) {
    int val = (int)ptr-&gt;data;
    cout &lt;&lt; (char)val &lt;&lt; ' ';
    ptr = ptr-&gt;next;
  } 
  cout &lt;&lt; "\n";
}

void RewindList(gxListB &amp;list)
{
  cout &lt;&lt; "Walking through the list in a backward direction..." &lt;&lt; "\n";
  gxListNodeB *ptr = list.GetTail();

  <FONT COLOR="#ff0000">// Walk through the list in a backward direction</FONT>
  while(ptr) {
    int val = (int)ptr-&gt;data;
    cout &lt;&lt; (char)val &lt;&lt; ' ';
    ptr = ptr-&gt;prev;
  } 

  cout &lt;&lt; "\n";
}

int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  gxListB list;
  gxListNodeB *ptr;

  <FONT COLOR="#ff0000">// Construct some list nodes</FONT>
  cout &lt;&lt; "Loading data elements into linked list..." &lt;&lt; "\n";
  gxListNodeB *na = new gxListNodeB;
  gxListNodeB *nb = new gxListNodeB;
  gxListNodeB *nc = new gxListNodeB;
  gxListNodeB *nd = new gxListNodeB;
  gxListNodeB *n1 = new gxListNodeB;
  gxListNodeB *n2 = new gxListNodeB;
  gxListNodeB *n3 = new gxListNodeB;
  gxListNodeB *n4 = new gxListNodeB;

  <FONT COLOR="#ff0000">// Statically allocated list data</FONT>
  const unsigned num_blocks = 9;
  char buf[num_blocks];
  unsigned i;

  <FONT COLOR="#ff0000">// Load some values into the buffer starting with ASCII character 'A'</FONT>
  for(i = 0; i &lt; num_blocks; i++) buf[i] = (char)(65+i); 
  
  na-&gt;data = (void *)buf[0];
  nb-&gt;data = (void *)buf[1];
  nc-&gt;data = (void *)buf[2];
  nd-&gt;data = (void *)buf[3];

  <FONT COLOR="#ff0000">// Load some list elements</FONT>
  list.InsertAfter(list.GetHead(), na);
  list.InsertAfter(na, nb);
  list.InsertAfter(nb, nc);
  list.InsertAfter(nc, nd);
  
  n1-&gt;data = (void *)buf[4];
  n2-&gt;data = (void *)buf[5];
  n3-&gt;data = (void *)buf[6];
  n4-&gt;data = (void *)buf[7];
  
  <FONT COLOR="#ff0000">// Testing insert functions</FONT>
  list.InsertBefore(na, n1);
  list.InsertBefore(nc, n2);
  list.InsertAfter(nb, n3);
  list.InsertAfter(nd, n4);

  <FONT COLOR="#ff0000">// Reordering the list</FONT>
  list.MoveToBack(na);
  list.MoveAfter(na, nc);
  list.MoveBefore(nc, nb);
  list.MoveAfter(nc, nd);
  list.MoveAfter(nd, n2);
  list.MoveBefore(n2, n1);
  list.MoveAfter(n2, n3);
  list.MoveAfter(n3, n4);
  
  ScrollForward(list);
  RewindList(list);

  PausePrg();

  cout &lt;&lt; "Adding another item to the list..." &lt;&lt; "\n";
  ptr = list.Add((void *)buf[8]);
  ScrollForward(list);

  PausePrg();

  cout &lt;&lt; "Moving list item to the front of the list" &lt;&lt; "\n";
  list.MoveToFront(ptr);
  ScrollForward(list);

  cout &lt;&lt; "Moving item to the back of the list..." &lt;&lt; "\n";
  list.MoveToBack(ptr);
  ScrollForward(list);
  
  PausePrg();
  
  cout &lt;&lt; "Removing the head of the list..." &lt;&lt; "\n";
  ptr = list.GetHead();
  list.Remove(ptr);
  ScrollForward(list);

  cout &lt;&lt; "Removing the tail of the list..." &lt;&lt; "\n";
  ptr = list.GetTail();
  list.Remove(ptr);
  ScrollForward(list);

  <FONT COLOR="#ff0000">// NOTE: A gxListB::ClearList() call is used here to free the memory</FONT>
  <FONT COLOR="#ff0000">// allocated for the node since the node data was statically allocated.</FONT>
  list.ClearList();
  
  PausePrg();
  cout &lt;&lt; "Testing for memory leaks..." &lt;&lt; "\n";
  const char *test_str = "The quick brown fox jumps over the lazy dog"; 
  unsigned len = strlen(test_str);
  const unsigned num_to_allocate = 10 * 100; <FONT COLOR="#ff0000">// 1000 * 1000;</FONT>
  const unsigned mem_bufs = (sizeof(gxListNodeB) + len) * num_to_allocate;
  cout &lt;&lt; "Allocating " &lt;&lt; mem_bufs &lt;&lt; " bytes..." &lt;&lt; "\n";
  
  unsigned count1 = 0;
  unsigned count2 = 0;
  for(i = 0; i &lt; num_to_allocate; i++) {
    char *sbuf = new char[len+1]; <FONT COLOR="#ff0000">// Allocate memory for the string </FONT>
    count1 += sizeof(sbuf);
    if(!sbuf) {
      cout &lt;&lt; "Memory allocation error at " &lt;&lt; (count1+count2) &lt;&lt; " bytes"
	   &lt;&lt; "\n";
      break;
    }
    memmove(sbuf, test_str, len);
    sbuf[len] = 0; <FONT COLOR="#ff0000">// Null terminate the string</FONT>
    count2 += sizeof(gxListNodeB);
    if(!list.Add((void *)sbuf))  {
      cout &lt;&lt; "Memory allocation error at " &lt;&lt; (count1+count2) &lt;&lt; " bytes"
	   &lt;&lt; "\n";
      break;
    }
  }
  cout &lt;&lt; "Done" &lt;&lt; "\n";
  PausePrg();

  cout &lt;&lt; "Releasing memory allocated back to the heap..." &lt;&lt; "\n";
  <FONT COLOR="#ff0000">// NOTE: A gxListB::DestroyList() call will free the memory allocated for</FONT>
  <FONT COLOR="#ff0000">// both the node and its data.</FONT>
  list.DestroyList();
  PausePrg();
  
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>



</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
