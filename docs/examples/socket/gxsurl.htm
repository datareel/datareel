<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:38:34 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxsurl example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 01/25/2000</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This program is used to test gxsURL classes. 
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "gxsurl.h"
#include "gxs_ver.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

<FONT COLOR="#ff0000">// Version number and program name</FONT>
const double ProgramVersionNumber = gxSocketVersion;
const char *ProgramName = "gxsURL test program";

<FONT COLOR="#ff0000">// Author information</FONT>
const char *ProducedBy = "DataReel Software Development";
const char *EmailAddress = "https:<FONT COLOR="#ff0000">//github.com/datareel";</FONT>

<FONT COLOR="#ff0000">// Program globals</FONT>
int parsing_url = 1;

void PrintURLInfo(gxsURLInfo &amp;u)
{
  cout &lt;&lt; "Uniform resource locator information" &lt;&lt; "\n";
  cout &lt;&lt; "-------------------------------------------------------" &lt;&lt; "\n";
  cout &lt;&lt; "Unchanged URL = " &lt;&lt; u.url &lt;&lt; "\n"; 
  cout &lt;&lt; "URL protocol = " &lt;&lt; u.proto &lt;&lt; "\n"; 
  cout &lt;&lt; "Extracted hostname = " &lt;&lt; u.host &lt;&lt; "\n";
  cout &lt;&lt; "Port number = " &lt;&lt; u.port &lt;&lt; "\n";
  cout &lt;&lt; "FTP type = " &lt;&lt; u.ftp_type &lt;&lt; "\n";
  cout &lt;&lt; "Path = " &lt;&lt; u.path &lt;&lt; "\n";
  cout &lt;&lt; "Directory = " &lt;&lt; u.dir &lt;&lt; "\n";
  cout &lt;&lt; "File = " &lt;&lt; u.file &lt;&lt; "\n";
  cout &lt;&lt; "Username = " &lt;&lt; u.user &lt;&lt; "\n";
  cout &lt;&lt; "Password = " &lt;&lt; u.passwd &lt;&lt; "\n"; 
  cout &lt;&lt; "Local filename of the URL document = " &lt;&lt; u.local &lt;&lt; "\n";
  cout &lt;&lt; "Source that requested URI was obtained = " &lt;&lt; u.referer &lt;&lt; "\n";

  if(u.is_dynamic) {
    cout &lt;&lt; "\n";
    cout &lt;&lt; "Dyanmic page information" &lt;&lt; "\n";
    cout &lt;&lt; "-------------------------------------------------------" &lt;&lt; "\n";
    cout &lt;&lt; "Query string = " &lt;&lt; u.query_string.c_str() &lt;&lt; "\n";
    if(!u.dynamic_bin_dir.is_null()) {
      cout &lt;&lt; "Binary dir = " &lt;&lt; u.dynamic_bin_dir.c_str() &lt;&lt; "\n";
    }
    if(!u.dynamic_file_extension.is_null()) {
      cout &lt;&lt; "File extension = " &lt;&lt; u.dynamic_file_extension.c_str() &lt;&lt; "\n";
    }
    cout &lt;&lt; "Local query file = " &lt;&lt; u.local_query_file.c_str() &lt;&lt; "\n";
  }

  if(u.proxy) { <FONT COLOR="#ff0000">// The exact string to pass to proxy server</FONT>
    cout &lt;&lt; "\n";
    cout &lt;&lt; "Proxy server information" &lt;&lt; "\n";
    cout &lt;&lt; "-------------------------------------------------------" &lt;&lt; "\n";
    cout &lt;&lt; "Unchanged URL = " &lt;&lt; u.proxy-&gt;url &lt;&lt; "\n"; 
    cout &lt;&lt; "URL protocol = " &lt;&lt; u.proxy-&gt;proto &lt;&lt; "\n"; 
    cout &lt;&lt; "Extracted hostname = " &lt;&lt; u.proxy-&gt;host &lt;&lt; "\n";
    cout &lt;&lt; "Port number = " &lt;&lt; u.proxy-&gt;port &lt;&lt; "\n";
    cout &lt;&lt; "FTP type = " &lt;&lt; u.proxy-&gt;ftp_type &lt;&lt; "\n";
    cout &lt;&lt; "Path = " &lt;&lt; u.proxy-&gt;path &lt;&lt; "\n";
    cout &lt;&lt; "Directory = " &lt;&lt; u.proxy-&gt;dir &lt;&lt; "\n";
    cout &lt;&lt; "File = " &lt;&lt; u.proxy-&gt;file &lt;&lt; "\n";
    cout &lt;&lt; "Username = " &lt;&lt; u.proxy-&gt;user &lt;&lt; "\n";
    cout &lt;&lt; "Password = " &lt;&lt; u.proxy-&gt;passwd &lt;&lt; "\n"; 
    cout &lt;&lt; "Local filename of the URL document = " &lt;&lt; u.proxy-&gt;local &lt;&lt; "\n";
    cout &lt;&lt; "Source that requested URI was obtained = "
	 &lt;&lt; u.proxy-&gt;referer &lt;&lt; "\n";
  }
  cout &lt;&lt; "\n";
}

void ListSupportedProtocols()
{
  gxsURL url;
  for(int i = 0; i &lt; gxsMAX_PROTOCOL_STRINGS; i++) {
    cout &lt;&lt; url.GetProtocolString(i) &lt;&lt; "<FONT COLOR="#ff0000">//" &lt;&lt; " Port Number - ";</FONT>
    gxString u(url.GetProtocolString(i)); u += "<FONT COLOR="#ff0000">//";</FONT>
    int port; url.GetPortNumber(u, port);
    cout &lt;&lt; port &lt;&lt; "\n";
  }
}

void ParseURL(const char *URL)
{
  gxsURLInfo u;
  gxsURL gxsurl;
  gxString url_buf = URL;
  gxsurl.SetDefaultProto(url_buf);
  
  if(!gxsurl.ParseURL(url_buf, u)) {
    cout &lt;&lt; "Error parsing URL" &lt;&lt; "\n";
    return;
  }
			       
  PrintURLInfo(u);  
}

void HelpMessage(const char *program_name, const double version_number)
{
  cout &lt;&lt; "\n";
  cout.setf(ios::showpoint | ios::fixed);
  cout.precision(3);
  cout &lt;&lt; "\n";
  cout &lt;&lt; program_name &lt;&lt; " version " &lt;&lt; version_number  &lt;&lt; "\n";
  cout &lt;&lt; "Produced by: " &lt;&lt; ProducedBy &lt;&lt; ' ' &lt;&lt; EmailAddress &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Usage: " &lt;&lt; program_name &lt;&lt; " [switches] URL" &lt;&lt; "\n";
  cout &lt;&lt; "Example: " &lt;&lt; program_name &lt;&lt; " -p http:<FONT COLOR="#ff0000">//www.xyz.com/index.html" &lt;&lt; "\n";</FONT>
  cout &lt;&lt; "Switches: " &lt;&lt; "\n";
  cout &lt;&lt; "          -L = List all the protocols supported by this program." 
       &lt;&lt; "\n";
  cout &lt;&lt; "          -p = Parse the specified URL (default)" &lt;&lt; "\n";
  cout &lt;&lt; "\n";
  return;
}

int ProcessArgs(char *arg)
{
  switch(arg[1]) {
    case 'L' :
      parsing_url = 0;
      ListSupportedProtocols();
      return 0;

    case 'p' :
      parsing_url = 1;
      break;

    default:
      cerr &lt;&lt; "\n";
      cerr &lt;&lt; "Unknown switch " &lt;&lt; arg &lt;&lt; "\n";
      cerr &lt;&lt; "Exiting..." &lt;&lt; "\n";
      cerr &lt;&lt; "\n";
      return 0;
  }
  arg[0] = '\0';
  return 1; <FONT COLOR="#ff0000">// All command line arguments were valid</FONT>
}

int main(int argc, char **argv)
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  if(argc &lt; 2) { 
    HelpMessage(ProgramName, ProgramVersionNumber);
    return 0;
  }
  
  <FONT COLOR="#ff0000">// Process command ling arguments and files </FONT>
  int narg;
  char *arg = argv[narg = 1];

  while (narg &lt; argc) {
    if(arg[0] != '\0') {
      if(arg[0] == '-') { <FONT COLOR="#ff0000">// Look for command line arguments</FONT>
	if(!ProcessArgs(arg)) return 0; <FONT COLOR="#ff0000">// Exit if argument is not valid</FONT>
      }
      else { 
	if(parsing_url) {
	  ParseURL((const char *)arg);
	}
      }
      arg = argv[++narg];
    }
  }

  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
