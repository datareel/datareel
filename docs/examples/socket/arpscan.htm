<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:36:29 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>arpscan example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: arpscan.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or

modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Test program used to get the Media Access Control (MAC) addresses
of all the hosts on a specified class C subnet.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
#include &lt;fstream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#include &lt;fstream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include &lt;stdlib.h&gt;
#include "gxsping.h"
#include "gxip32.h"
#include "gxmac48.h"

<FONT COLOR="#ff0000">// Platform specific include files</FONT>
#if defined (__UNIX__)
#include &lt;net/if_arp.h&gt;
#include &lt;sys/ioctl.h&gt;
#endif

#if defined (__WIN32__)
int WIN32GetMAC(const char *ip_address, char *mac_address);
#endif

int GetMacAddress(const char *ip_address, char *eth_dev, char *fname = 0,
		  fstream *outfile = 0)
{
  <FONT COLOR="#ff0000">// Construct a raw socket;</FONT>
  gxSocket raw_socket;
  if(raw_socket.InitSocketLibrary() != 0) {
    cout &lt;&lt; raw_socket.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    if(outfile)
      *(outfile) &lt;&lt; raw_socket.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 0;
  }
  cout &lt;&lt; ip_address &lt;&lt; '\t' &lt;&lt; flush;
  if(outfile) *(outfile) &lt;&lt; ip_address &lt;&lt; '\t' &lt;&lt; flush;
  gxsHostNameInfo *hostnm = raw_socket.GetHostInformation((char *)ip_address);
  if(hostnm) {
    cout &lt;&lt; hostnm-&gt;h_name &lt;&lt; flush;
    if(outfile) *(outfile) &lt;&lt; hostnm-&gt;h_name &lt;&lt; flush;
  }
  else {
    cout &lt;&lt; "no_DNS_entry" &lt;&lt; flush;
   if(outfile) *(outfile) &lt;&lt; "no_DNS_entry" &lt;&lt; flush;
  }
  
  if(raw_socket.InitSocket(AF_INET, SOCK_RAW, IPPROTO_ICMP, 0, 
			   (char *)ip_address) &lt; 0) {
    cout &lt;&lt; raw_socket.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    if(outfile)
      *(outfile) &lt;&lt; raw_socket.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 0;
  }
  
  <FONT COLOR="#ff0000">// Ping with a specified timeout value</FONT>
  gxsPing ping(&amp;raw_socket);
  if(ping.Ping(4) != gxSOCKET_NO_ERROR) {
    if(raw_socket.GetSocketError() == gxSOCKET_REQUEST_TIMEOUT) {
    }
    else {
      cout &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; raw_socket.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
      if(outfile) {
	*(outfile) &lt;&lt; "\n" &lt;&lt; flush;
	*(outfile) &lt;&lt; raw_socket.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
      }
      delete hostnm;
      return 0;
    }
  }

#if defined (__WIN32__)
  char mac_address[255];
  if(!WIN32GetMAC(ip_address, mac_address)) {
    cout &lt;&lt; "\n" &lt;&lt; flush;
    if(outfile) *(outfile) &lt;&lt; "\n" &lt;&lt; flush;
    delete hostnm;
    return 0; <FONT COLOR="#ff0000">// No entry in the arp cache</FONT>
  } 
  gxMAC48 mac(mac_address, '-', 2);
  cout &lt;&lt; '\t' &lt;&lt; mac.c_str(mac_address) &lt;&lt; flush;
  if(outfile) *(outfile) &lt;&lt; '\t' &lt;&lt; mac.c_str(mac_address) &lt;&lt; flush;
#elif defined (__UNIX__)
  arpreq arp_data;
  memset(&amp;arp_data, 0, sizeof(arp_data));
  memcpy(&amp;arp_data.arp_pa, &amp;raw_socket.sin, sizeof(arp_data.arp_pa));         

#if defined (__LINUX__) 
  strcpy(arp_data.arp_dev, eth_dev);
#endif
  
#ifndef SIOCGARP
#error SIOCGARP is not available on this platform
#endif

  if(ioctl(raw_socket.GetSocket(), SIOCGARP, &amp;arp_data) == -1) {
    cout &lt;&lt; "\n" &lt;&lt; flush;
    if(outfile) *(outfile) &lt;&lt; "\n" &lt;&lt; flush; 
    delete hostnm;
    return 0; <FONT COLOR="#ff0000">// No entry in the arp cache</FONT>
  }
  
  char mac_address[255];
  unsigned char *ptr = (unsigned char *)&amp;arp_data.arp_ha.sa_data[0];
  sprintf(mac_address, "%.2X:%.2X:%.2X:%.2X:%.2X:%.2X",*ptr, 
	  *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5));
  
  gxMAC48 mac(mac_address, ':', 2);
  cout &lt;&lt; '\t' &lt;&lt; mac.c_str(mac_address) &lt;&lt; flush;
  if(outfile) *(outfile) &lt;&lt; '\t' &lt;&lt; mac.c_str(mac_address) &lt;&lt; flush;
#else
#error You must define a target platform: __WIN32__ or __UNIX__
#endif

  if(fname) { <FONT COLOR="#ff0000">// Find the vendor information</FONT>
    char name[255];
    char comment[255];
    if(FindVendor((const char *)fname, mac, name, comment)) {
      cout &lt;&lt; '\t' &lt;&lt; name &lt;&lt; flush;
      if(outfile) *(outfile) &lt;&lt; '\t' &lt;&lt; name &lt;&lt; flush;
    }
  }
  cout &lt;&lt; "\n" &lt;&lt; flush;
  if(outfile) *(outfile) &lt;&lt; "\n" &lt;&lt; flush;
  delete hostnm;
  return 1;
}

int main(int argc, char **argv)
{
#ifdef __UNIX__
  <FONT COLOR="#ff0000">// Raw sockets require root access on all UNIX platforms. Programs</FONT>
  <FONT COLOR="#ff0000">// that use raw sockets can be executed by non-root users if the</FONT>
  <FONT COLOR="#ff0000">// effective user ID of the executing process is set to the same as</FONT>
  <FONT COLOR="#ff0000">// the file's owner. In the case root must own the executable and</FONT>
  <FONT COLOR="#ff0000">// the effective User-ID or Group-ID on execution bit must be set</FONT>
  <FONT COLOR="#ff0000">// by root using the chmod command: "chmod u+s" or "chmod 4755"</FONT>
  <FONT COLOR="#ff0000">// Now the effective user ID of the executing process will be set to </FONT>
  <FONT COLOR="#ff0000">// the same user ID of the file's owner. </FONT>
  if(geteuid() != 0) {
    cout &lt;&lt; "You must be root to run this program" &lt;&lt; "\n";
    return 0;
  }
#endif

  <FONT COLOR="#ff0000">// Check the command line arguments</FONT>
#if defined (__WIN32__)
  if(argc &lt; 2) {
    cout &lt;&lt; "\n";
    cout &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " subnet " &lt;&lt; "\n";
    cout &lt;&lt; "Example 1: " &lt;&lt; argv[0] &lt;&lt;" 192.168.0 " &lt;&lt; "\n";
    cout &lt;&lt; "Example 2: " &lt;&lt; argv[0] &lt;&lt;" 192.168.0 maccodes.txt" &lt;&lt; "\n";
    cout &lt;&lt; "Example 3: " &lt;&lt; argv[0] &lt;&lt;" 192.168.0.1 " &lt;&lt; "\n";
    cout &lt;&lt; "Example 4: " &lt;&lt; argv[0] &lt;&lt;" 192.168.0.1 maccodes.txt" &lt;&lt; "\n";
    cout &lt;&lt; "Example 5: " &lt;&lt; argv[0] &lt;&lt;" 192.168.0.255 maccodes.txt \
outfile.txt" &lt;&lt; "\n";
    return 1;
  }
  char *subnet = argv[1];
  char *eth_dev = 0;
  char *fname = 0;
  char *ofname = 0;
  if(argc &gt;= 3) fname = argv[2];
  if(argc == 4) ofname = argv[3];
#elif defined (__UNIX__)
  if(argc &lt; 3) {
    cout &lt;&lt; "\n";
    cout &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " subnet ethernet_device" &lt;&lt; "\n";
    cout &lt;&lt; "Example 1: " &lt;&lt; argv[0] &lt;&lt;" 192.168.0 eth0" &lt;&lt; "\n";
    cout &lt;&lt; "Example 2: " &lt;&lt; argv[0] &lt;&lt;" 192.168.0 eth0 maccodes.txt" 
	 &lt;&lt; "\n";
    cout &lt;&lt; "Example 3: " &lt;&lt; argv[0] &lt;&lt;" 192.168.0.1 eth0" &lt;&lt; "\n";
    cout &lt;&lt; "Example 4: " &lt;&lt; argv[0] &lt;&lt;" 192.168.0.1 eth0 maccodes.txt" 
	 &lt;&lt; "\n";
    cout &lt;&lt; "Example 5: " &lt;&lt; argv[0] &lt;&lt;" 192.168.0.255 eth0 maccodes.txt \
outfile.txt" &lt;&lt; "\n";
    return 1;
  }
  char *subnet = argv[1];
  char *eth_dev = argv[2];
  char *fname = 0;
  char *ofname = 0;
  if(argc &gt;= 4) fname = argv[3];
  if(argc == 5) fname = argv[4];
#else
#error You must define a target platform: __WIN32__ or __UNIX__
#endif

  fstream outfile;
  int out = 0;
  if(ofname) {
    <FONT COLOR="#ff0000">// Open the output file and truncate if it already exists</FONT>
    out = 1;
    outfile.open(ofname, ios::out|ios::trunc|ios::binary);
    if(!outfile) {
      cout &lt;&lt; "Could not open the " &lt;&lt; ofname &lt;&lt; " output file" &lt;&lt; "\n";
      return 1;
    }
  }

  gxIP32 ip32(subnet);
  char sbuf[255];
  if((ip32.GetByte4() == 0) || (ip32.GetByte4() == 255)) {
    <FONT COLOR="#ff0000">// Find the mac address of all the nodes on a specified subnet</FONT>
    for(int i = 1; i &lt; 255; i++) {
      ip32.SetByte4(i);
      if(out)
	GetMacAddress(ip32.c_str(sbuf), eth_dev, fname, &amp;outfile); 
      else
	GetMacAddress(ip32.c_str(sbuf), eth_dev, fname);
    }
  }
  else {
    <FONT COLOR="#ff0000">// Get the mac address of a single node</FONT>
    if(out)
      GetMacAddress(ip32.c_str(sbuf), eth_dev, fname, &amp;outfile);
    else 
      GetMacAddress(ip32.c_str(sbuf), eth_dev, fname);
  }

  if(out) outfile.close();
  return 0;
}

#if defined (__WIN32__)
int WIN32GetMAC(const char *ip_address, char *mac_address)
<FONT COLOR="#ff0000">// Function used to get a mac address from the WIN32 arp cache.</FONT>
<FONT COLOR="#ff0000">// Returns true if an arp cache entry exists for the specified</FONT>
<FONT COLOR="#ff0000">// IP address string.</FONT>
{
  system("arp -a &gt; arpcache.txt");
  ifstream infile("arpcache.txt", ios::in);
  if(!infile) return 0; <FONT COLOR="#ff0000">// Cannot open the file</FONT>
  
  char sbuf[255];
  char ip_in[255];

  while(!infile.eof()) {
    infile.getline(sbuf, 255);
    int len, offset, i = 0;
    int byte_count = strlen(sbuf);
    ip_in[0] = 0;
    mac_address[0] = 0;
    
    <FONT COLOR="#ff0000">// Trim leading tabs and spaces</FONT>
    while((sbuf[i] == ' ') || (sbuf[i] == '\t')) i++;
    byte_count -= i;
    if(byte_count &lt;= 0) continue;
    memmove(sbuf, sbuf+i, byte_count);
    sbuf[byte_count] = 0;

    <FONT COLOR="#ff0000">// Parse the IP Address</FONT>
    for(i = 0; i &lt; byte_count; i ++) {
      if((sbuf[i] == ' ') || (sbuf[i] == '\t')) break;
      ip_in[i] = sbuf[i];
    }
    ip_in[i] = 0; <FONT COLOR="#ff0000">// Null terminate the string</FONT>

    if(strcmp(ip_in, ip_address) == 0) { <FONT COLOR="#ff0000">// Parse the MAC Address</FONT>
      while((sbuf[i] == ' ') || (sbuf[i] == '\t')) i++;
      byte_count -= i;
      if(byte_count &lt;= 0) continue;
      memmove(sbuf, sbuf+i, byte_count);
      for(i = 0; i &lt; byte_count; i ++) {
	if(sbuf[i] == ' ') break;
	mac_address[i] = sbuf[i];
      }
      mac_address[i] = 0; <FONT COLOR="#ff0000">// Null terminate the string</FONT>
      
      if(mac_address[0] != 0)  { <FONT COLOR="#ff0000">// Remove any trailing spaces</FONT>
	offset = len = strlen(mac_address);
	while(offset--) if(mac_address[offset] != ' ') break;
	if(offset &lt; len) mac_address[offset+1] = 0;
	return 1; <FONT COLOR="#ff0000">// Found the arp cache entry</FONT>
      }
      else {
	return 0;
      }
    }
  }
  infile.close();
  return 0;
}
#endif
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
