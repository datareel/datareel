<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:38:23 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>hsrv_cpp example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: httpserv.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Multi-threaded server framework using the gxSocket and gxThread 
libraries.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include "httpserv.h"

<FONT COLOR="#ff0000">// --------------------------------------------------------------</FONT>
<FONT COLOR="#ff0000">// Globals variable initialzation</FONT>
<FONT COLOR="#ff0000">// --------------------------------------------------------------</FONT>
ServerConfig ServerConfigSruct;
ServerConfig *servercfg = &amp;ServerConfigSruct;
<FONT COLOR="#ff0000">// --------------------------------------------------------------</FONT>

int CheckSocketError(gxSocket *s, const char *mesg, int report_error)
<FONT COLOR="#ff0000">// Test the socket for an error condition and report the message</FONT>
<FONT COLOR="#ff0000">// if the "report_error" variable is true. The "mesg" string is used</FONT>
<FONT COLOR="#ff0000">// display a message with the reported error. Returns true if an</FONT>
<FONT COLOR="#ff0000">// error was detected for false of no errors where detected. </FONT>
{
  if(s-&gt;GetSocketError() == gxSOCKET_NO_ERROR) {
    <FONT COLOR="#ff0000">// No socket errors reported</FONT>
    return 0;
  }
  if(report_error) { <FONT COLOR="#ff0000">// Reporting the error to an output device</FONT>
    if(mesg) {
      PrintMessage(mesg, "\n", s-&gt;SocketExceptionMessage());
    }
    else {
      PrintMessage(s-&gt;SocketExceptionMessage());
    }
  }
  return 1;
}

int CheckThreadError(gxThread_t *thread, const char *mesg, int report_error)
<FONT COLOR="#ff0000">// Test the thread for an error condition and report the message</FONT>
<FONT COLOR="#ff0000">// if the "report_error" variable is true. The "mesg" string is used</FONT>
<FONT COLOR="#ff0000">// display a message with the reported error. Returns true if an</FONT>
<FONT COLOR="#ff0000">// error was detected for false of no errors where detected. </FONT>
{
  if(thread-&gt;GetThreadError() == gxTHREAD_NO_ERROR) {
    <FONT COLOR="#ff0000">// No thread errors reported</FONT>
    return 0;
  }
  if(report_error) { <FONT COLOR="#ff0000">// Reporting the error to an output device</FONT>
    if(mesg) {
      PrintMessage(mesg, "\n", thread-&gt;ThreadExceptionMessage()); 
    }
    else {
      PrintMessage(thread-&gt;ThreadExceptionMessage());
    }
  }
  return 1;
}

void ReportError(const char *s1, const char *s2, const char *s3)
<FONT COLOR="#ff0000">// Thread safe error reporting function.</FONT>
{
  PrintMessage(s1, s2, s3);
}

void PrintMessage(const char *s1, const char *s2, const char *s3)
<FONT COLOR="#ff0000">// Thread safe write function that will not allow access to</FONT>
<FONT COLOR="#ff0000">// the critical section until the write operation is complete.</FONT>
{
  servercfg-&gt;display_lock.MutexLock();

  <FONT COLOR="#ff0000">// Ensure that all threads have finished writing to the device</FONT>
  int num_try = 0;
  while(servercfg-&gt;display_is_locked != 0) {
    <FONT COLOR="#ff0000">// Block this thread from its own execution if a another thread</FONT>
    <FONT COLOR="#ff0000">// is writing to the device</FONT>
    if(++num_try &lt; DISPLAY_THREAD_RETRIES) {
      servercfg-&gt;display_cond.ConditionWait(&amp;servercfg-&gt;display_lock);
    }
    else {
      return; <FONT COLOR="#ff0000">// Could not write string to the device</FONT>
    }
  }

  <FONT COLOR="#ff0000">// Tell other threads to wait until write is complete</FONT>
  servercfg-&gt;display_is_locked = 1; 

  <FONT COLOR="#ff0000">// ********** Enter Critical Section ******************* //</FONT>
  GXSTD::cout &lt;&lt; "\n";
  if(s1) GXSTD::cout &lt;&lt; s1;
  if(s2) GXSTD::cout &lt;&lt; s2;
  if(s3) GXSTD::cout &lt;&lt; s3;
  GXSTD::cout &lt;&lt; "\n";
  GXSTD::cout.flush(); <FONT COLOR="#ff0000">// Flush the ostream buffer to the stdio</FONT>
  <FONT COLOR="#ff0000">// ********** Leave Critical Section ******************* //</FONT>

  <FONT COLOR="#ff0000">// Tell other threads that this write is complete</FONT>
  servercfg-&gt;display_is_locked = 0; 
 
  <FONT COLOR="#ff0000">// Wake up the next thread waiting on this condition</FONT>
  servercfg-&gt;display_cond.ConditionSignal();
  servercfg-&gt;display_lock.MutexUnlock();
}

ServerConfig::ServerConfig()
{
  port = 80;
  accept_clients = 1;
  display_is_locked = 0;
  client_request_pool = new thrPool;
}

ServerConfig::~ServerConfig()
{
  if(client_request_pool) delete client_request_pool;
}

int ServerThread::InitServer(int max_connections)
<FONT COLOR="#ff0000">// Initialize the server. Returns a non-zero value if any</FONT>
<FONT COLOR="#ff0000">// errors ocurr.</FONT>
{
  if(InitSocketLibrary() == 0) {
    if(InitSocket(SOCK_STREAM, servercfg-&gt;port) &lt; 0) return 1;
  }
  else {
    return 1;
  }

  <FONT COLOR="#ff0000">// Bind the name to the socket</FONT>
  if(Bind() &lt; 0) {
    CheckSocketError((gxSocket *)this, "Error initializing server"); 
    Close();
    return 1;
  }
    
  <FONT COLOR="#ff0000">// Listen for connections with a specified backlog</FONT>
  if(Listen(max_connections) &lt; 0) {
    CheckSocketError((gxSocket *)this, "Error initializing server");
    Close();
    return 1;
  }

  return 0;
}

void *ServerThread::ThreadEntryRoutine(gxThread_t *thread)
{
  while(servercfg-&gt;accept_clients) { <FONT COLOR="#ff0000">// Loop accepting client connections</FONT>

    <FONT COLOR="#ff0000">// Block the server until a client requests service</FONT>
    if(Accept() &lt; 0) continue;

    <FONT COLOR="#ff0000">// NOTE: Getting client info for statistical purposes only</FONT>
    char client_name[gxsMAX_NAME_LEN]; int r_port = -1;
    GetClientInfo(client_name, r_port);
    PrintMessage("Received client request from ", client_name);

    ClientSocket_t *s = new ClientSocket_t;
    if(!s) {
      ReportError("A fatal memory allocation error occurred\n \
Shutting down the server");
      CloseSocket();
      return (void *)0;
    }
    
    <FONT COLOR="#ff0000">// Record the file descriptor assigned by the Operating System</FONT>
    s-&gt;client_socket = GetRemoteSocket();

    <FONT COLOR="#ff0000">// Destroy all the client threads that have exited</FONT>
    RebuildThreadPool(servercfg-&gt;client_request_pool);

    <FONT COLOR="#ff0000">// Create thread per cleint</FONT>
    gxThread_t *rthread = \
      request_thread.CreateThread(servercfg-&gt;client_request_pool, (void *)s);
    if(CheckThreadError(rthread, "Error starting client request thread")) {
      delete s;
      return (void *)0;
    }
  }

  return (void *)0;
}

void ServerThread::ThreadExitRoutine(gxThread_t *thread)
<FONT COLOR="#ff0000">// Thread exit function used to close the server thread.</FONT>
{
  CloseSocket(); <FONT COLOR="#ff0000">// Close the server side socket</FONT>
}

void ServerThread::ThreadCleanupHandler(gxThread_t *thread)
<FONT COLOR="#ff0000">// Thread cleanup handler used in the event that the thread is</FONT>
<FONT COLOR="#ff0000">// canceled.</FONT>
{
  CloseSocket(); <FONT COLOR="#ff0000">// Close the server side socket</FONT>
}

void *ClientRequestThread::ThreadEntryRoutine(gxThread_t *thread)
{
  <FONT COLOR="#ff0000">// Extract the client socket from the thread parameter</FONT>
  ClientSocket_t *s = (ClientSocket_t *)thread-&gt;GetThreadParm();
  
  <FONT COLOR="#ff0000">// Process the client request</FONT>
  HandleClientRequest(s);

  return (void *)0;
}

void ClientRequestThread::ThreadExitRoutine(gxThread_t *thread)
<FONT COLOR="#ff0000">// Thread exit function used to close the client thread.</FONT>
{
  <FONT COLOR="#ff0000">// Extract the client socket from the thread parameter</FONT>
  ClientSocket_t *s = (ClientSocket_t *)thread-&gt;GetThreadParm();

  <FONT COLOR="#ff0000">// Close the client socket and free its resources</FONT>
  Close(s-&gt;client_socket);
  delete s;
}

void ClientRequestThread::ThreadCleanupHandler(gxThread_t *thread)
<FONT COLOR="#ff0000">// Thread cleanup handler used in the event that the thread is</FONT>
<FONT COLOR="#ff0000">// canceled.</FONT>
{
  <FONT COLOR="#ff0000">// Extract the client socket from the thread parameter</FONT>
  ClientSocket_t *s = (ClientSocket_t *)thread-&gt;GetThreadParm();

  <FONT COLOR="#ff0000">// Close the client socket and free its resources</FONT>
  Close(s-&gt;client_socket);
  delete s;
}

void ClientRequestThread::HandleClientRequest(ClientSocket_t *s)
<FONT COLOR="#ff0000">// Function used to handle a client request.</FONT>
{
  <FONT COLOR="#ff0000">// NOTE: The demo processes a single HTTP GET request per client</FONT>
  const int rxbuf = 1024;
  char request[rxbuf];

  <FONT COLOR="#ff0000">// Block until the client sends some data</FONT>
  int rv = RawRead(s-&gt;client_socket, request, rxbuf);
  if(CheckSocketError((gxSocket *)this, "Error reading client request")) {
    return;
  }

  request[rv] = 0; <FONT COLOR="#ff0000">// Null terminate the request string</FONT>

  <FONT COLOR="#ff0000">// At this point we need to parse the client request and process it.</FONT>
  <FONT COLOR="#ff0000">// For simplicity sake these operations have been omitted.</FONT>
  <FONT COLOR="#ff0000">// ... (parsing operation)</FONT>
  <FONT COLOR="#ff0000">// ... (processing operation)</FONT>

  <FONT COLOR="#ff0000">// Simply send a test page (with a header) back to the client.</FONT>
  const char *test_page = "HTTP/1.0 200 OK\r\nServer: gxThread\r\nConnection: \
close\r\n\r\n&lt;HTML&gt;\n&lt;HEAD&gt;\n&lt;TITLE&gt; gxThread Test Page &lt;/TITLE&gt;\n&lt;/HEAD&gt;\
&lt;BODY&gt;&lt;CENTER&gt;&lt;H1&gt;gxThread Test Page&lt;/H1&gt;&lt;/CENTER&gt;&lt;HR&gt;&lt;PRE&gt;Response from the \
multi-threaded HTTP server&lt;/PRE&gt;&lt;HR&gt;&lt;CENTER&gt;End of document&lt;/CENTER&gt;\n&lt;/BODY&gt;\
\n&lt;/HTML&gt;";

  <FONT COLOR="#ff0000">// Blocking send that will not return until all bytes are written  </FONT>
  Send(s-&gt;client_socket, test_page, strlen(test_page));
  CheckSocketError((gxSocket *)this, "Error sending page to client");
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
