<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:39:28 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>portscan example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: portscan.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program demonstrating how to build network-monitoring 
utilities using the GX Socket library. This example tests for connectivity 
using the embedded ping library, connects to a host using a full connection, 
and any reports information contained in the services file about an open 
port. A full connection uses a three-way TCP/IP handshake, which is 
extremely accurate and can easily be detected, logged, and filtered. 
This program and any derivatives are solely intended to detect open ports 
for informational and statistical purposes on systems you are authorized 
to access. 
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;stdlib.h&gt;
#include "string.h"
#include "gxsping.h"
#include "dfileb.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

int FindServiceByPort(const char *fname, int port_num)
{
  char entry[df_MAX_LINE_LENGTH];

  DiskFileB infile(fname);
  if(!infile) {
    cout &lt;&lt; "\n";
    cout &lt;&lt; "Cannot open the " &lt;&lt; fname &lt;&lt; " file" &lt;&lt; "\n";
    return 1; <FONT COLOR="#ff0000">// Do not generate an error in main function</FONT>
  }

  int found_service = 0;

  while(!infile.df_EOF()) {
    if(infile.df_GetLine(entry, df_MAX_LINE_LENGTH, '\n', 1) != 
       DiskFileB::df_NO_ERROR) {
      break; <FONT COLOR="#ff0000">// Error reading from the disk file</FONT>
    }
    if(strcmp(entry, "") == 0) continue;
    char service[df_MAX_LINE_LENGTH];
    int port;
    char protocol[df_MAX_LINE_LENGTH];
    char aliases[df_MAX_LINE_LENGTH];
    char comment[df_MAX_LINE_LENGTH];
    if(ParseServiceFileEntry(entry, service, &amp;port, 
			     protocol, aliases, comment)) {
      if(port_num == port) {
	found_service = 1;
	cout &lt;&lt; "\n";
	if(service[0] != 0) 
	  cout &lt;&lt; "Name:     " &lt;&lt; service &lt;&lt; "\n";
	if(protocol[0] != 0) 
	  cout &lt;&lt; "Protocol: " &lt;&lt; protocol &lt;&lt; "\n";
	if(port &gt; 0) 
	  cout &lt;&lt; "Port:     " &lt;&lt; port &lt;&lt; "\n";
	if(aliases[0] != 0) 
	  cout &lt;&lt; "Aliases:  " &lt;&lt; aliases &lt;&lt; "\n";
	if(comment[0] != 0) 
	  cout &lt;&lt; "Comment:  " &lt;&lt; comment &lt;&lt; "\n";
      }
    }
  }
  infile.df_Close();
  return found_service == 1;
}

void PrintHostInfo(const char *hostname, gxSocket *sock_lib)
{
  gxsInternetAddress *ialist;
  gxsHostNameInfo *hostnm = sock_lib-&gt;GetHostInformation((char *)hostname);

  if(!hostnm) {
    cout &lt;&lt; "\n";
    cout &lt;&lt; "Could not resolve hostname" &lt;&lt; "\n";
    return;
  }

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Hostname: " &lt;&lt; hostnm-&gt;h_name &lt;&lt; "\n";

  int i;
  for(i = 0; ; i++) {
    char *alias = hostnm-&gt;h_aliases[i];
    if(alias == 0) break;
    cout &lt;&lt; "Host Alias: " &lt;&lt; alias &lt;&lt; "\n"; 
  }

  for(i = 0; ; i++) {
    ialist = (gxsInternetAddress *)hostnm-&gt;h_addr_list[i];
    if(ialist == 0) break;
    cout &lt;&lt; "Host IP Address: " &lt;&lt; inet_ntoa(*ialist) &lt;&lt; "\n";
  }
  delete hostnm;
}

int PingHost(const char *hostname, int *status)
{
#ifdef __UNIX__
  <FONT COLOR="#ff0000">// Raw sockets require root access on all UNIX platforms. Programs</FONT>
  <FONT COLOR="#ff0000">// that use raw sockets can be executed by non-root users if the</FONT>
  <FONT COLOR="#ff0000">// effective user ID of the executing process is set to the same as</FONT>
  <FONT COLOR="#ff0000">// the file's owner. In the case root must own the executable and</FONT>
  <FONT COLOR="#ff0000">// the effective User-ID or Group-ID on execution bit must be set</FONT>
  <FONT COLOR="#ff0000">// by root using the chmod command: "chmod u+s" or "chmod 4755"</FONT>
  <FONT COLOR="#ff0000">// Now the effective user ID of the executing process will be set to </FONT>
  <FONT COLOR="#ff0000">// the same user ID of the file's owner. </FONT>
  if(geteuid() != 0) {
    cout &lt;&lt; "You must be root to run this program" &lt;&lt; "\n";
    return 0;
  }
#endif

  <FONT COLOR="#ff0000">// Construct a raw socket;</FONT>
  gxSocket raw_socket(AF_INET, SOCK_RAW, IPPROTO_ICMP, 0, 
		      (char *)hostname);
  if(!raw_socket) {
    cout &lt;&lt; raw_socket.SocketExceptionMessage() &lt;&lt; "\n";
    return 0;
  }

  gxsPing ping(&amp;raw_socket);

  <FONT COLOR="#ff0000">// Ping with a timeout value of one second</FONT>
  if(ping.Ping(1) != gxSOCKET_NO_ERROR) {
    if(raw_socket.GetSocketError() == gxSOCKET_REQUEST_TIMEOUT) {
      *status = 0; <FONT COLOR="#ff0000">// This host is not responding</FONT>
      return 1; 
    }
    cout &lt;&lt; raw_socket.SocketExceptionMessage() &lt;&lt; "\n";
    return 0;
  }

  return *status = 1;
}

int main(int argc, char **argv)
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif
  
  <FONT COLOR="#ff0000">// Check the command line arguments</FONT>
  if(argc &lt; 3) {
    cout &lt;&lt; "\n";
    cout &lt;&lt; "Usage 1: " &lt;&lt; argv[0] &lt;&lt; " hostname port" &lt;&lt; "\n";
    cout &lt;&lt; "Usage 2: " &lt;&lt; argv[0] &lt;&lt; " hostname port services_file" &lt;&lt; "\n";
    return 1;
  }

  char *hostname = argv[1];
  unsigned short port = (unsigned short)atoi(argv[2]);
  
#if defined (__WIN32__)
  <FONT COLOR="#ff0000">// char *fname = "c:\\windows\\services"; // WIN95/98</FONT>
  <FONT COLOR="#ff0000">// char *fname = "c:\\winnt\\system32\\drivers\\etc\\services"; // WINNT</FONT>
  char *fname = "c:\\windows\\system32\\drivers\\etc\\services"; <FONT COLOR="#ff0000">// WINXP</FONT>
#else
  char *fname = "/etc/services";
#endif
  if(argc == 4) fname = argv[3];

  gxSocket client(SOCK_STREAM, port, hostname);
  if(!client) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n";
    return 1;
  }

  cout &lt;&lt; "Contacting host: " &lt;&lt; hostname &lt;&lt; "\n";
  PrintHostInfo((char *)hostname, &amp;client);
  int status;
  if(!PingHost(hostname, &amp;status)) return 1;
  if(status == 0) {
    cout &lt;&lt; "Host not responding." &lt;&lt; "\n";
    return 1;
  }

  cout &lt;&lt; "Scanning TCP port " &lt;&lt; port &lt;&lt; "\n";
  
  if(client.Connect() &lt; 0) {
    cout &lt;&lt; "TCP port " &lt;&lt; port &lt;&lt; " closed" &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "TCP port " &lt;&lt; port &lt;&lt; " open" &lt;&lt; "\n";
    cout &lt;&lt; "Reading services file entry..." &lt;&lt; "\n";
    if(!FindServiceByPort((const char *)fname, port)) {
      cout &lt;&lt; "\n";
      cout &lt;&lt; "Service type unknown" &lt;&lt; "\n";
    }
  }
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
