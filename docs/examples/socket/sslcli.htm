<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:38:55 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>sslcli example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: server.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, GCC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 10/17/2001</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

HTTPS client example program using the gxSSL class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "gxshttpc.h"
#include "dfileb.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

<FONT COLOR="#ff0000">// Version number and program name</FONT>
const double ProgramVersionNumber = 1.0;
const char *ProgramName = "https testprog";

<FONT COLOR="#ff0000">// Program globals</FONT>
int get_doc_header = 0; <FONT COLOR="#ff0000">// True if request a document header only</FONT>
int get_document = 0;   <FONT COLOR="#ff0000">// True if requesting a document </FONT>

void HelpMessage(const char *program_name, const double version_number)
{
  cout &lt;&lt; "\n";
  cout.setf(ios::showpoint | ios::fixed);
  cout.precision(1);
  cout &lt;&lt; "\n";
  cout &lt;&lt; program_name &lt;&lt; " version " &lt;&lt; version_number  &lt;&lt; "\n";
  cout &lt;&lt; "Usage: " &lt;&lt; program_name &lt;&lt; " [switches] URL" &lt;&lt; "\n";
  cout &lt;&lt; "Example: " &lt;&lt; program_name &lt;&lt; " -h https:<FONT COLOR="#ff0000">//www.xyz.com/index.html"</FONT>
       &lt;&lt; "\n";
  cout &lt;&lt; "Switches: " &lt;&lt; "\n";
  cout &lt;&lt; "          -d = Download the specified file only (default)." &lt;&lt; "\n";
  cout &lt;&lt; "          -h = Get a document header." &lt;&lt; "\n";
  cout &lt;&lt; "\n";
}

int ProcessArgs(char *arg)
{
  switch(arg[1]) {
    case 'h':
      get_doc_header = 1;
      get_document = 0;
      break;

    case 'd':
      get_doc_header = 0;
      get_document = 1;
      break;
      
    default:
      cerr &lt;&lt; "\n";
      cerr &lt;&lt; "Unknown switch " &lt;&lt; arg &lt;&lt; "\n";
      cerr &lt;&lt; "Exiting..." &lt;&lt; "\n";
      cerr &lt;&lt; "\n";
      return 0;
  }
  arg[0] = '\0';

  return 1; <FONT COLOR="#ff0000">// All command line arguments were valid</FONT>
}

void PrintHTTPHeader(const gxsHTTPHeader &amp;hdr)
{
  cout &lt;&lt; "\n" &lt;&lt; flush;  
  cout &lt;&lt; "&lt;------ Document Header ------&gt;" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; hdr.http_header.c_str();
  cout &lt;&lt; "&lt;-----------------------------&gt;" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Press Enter to continue..." &lt;&lt; "\n" &lt;&lt; flush;
  cin.get();
  
  cout &lt;&lt; "Processing the header information..." &lt;&lt; "\n" 
	      &lt;&lt; flush;
  cout &lt;&lt; gxsHTTPStatusCodeMessage(hdr.http_status) &lt;&lt; "\n" 
	      &lt;&lt; flush;

  cout.setf(ios::showpoint | ios::fixed);
  cout.precision(1);
  cout &lt;&lt; "HTTP version: " &lt;&lt; hdr.http_version &lt;&lt; "\n" &lt;&lt; flush;

  cout &lt;&lt; "Document status code: " &lt;&lt; hdr.http_status &lt;&lt; "\n" 
	      &lt;&lt; flush;
  if(hdr.current_server.length() &gt; 0) {
    cout &lt;&lt; "Current Server: " &lt;&lt; hdr.current_server.c_str() &lt;&lt; "\n" 
		&lt;&lt; flush;
  }
  if(hdr.location.length() &gt; 0) {
    cout &lt;&lt; "Location: " &lt;&lt; hdr.location.c_str() &lt;&lt; "\n" 
		&lt;&lt; flush;
  }
  if(hdr.http_last_modified.length() &gt; 0) {
    cout &lt;&lt; "Date Document Last Modified: " 
		&lt;&lt; hdr.http_last_modified.c_str() &lt;&lt; "\n" &lt;&lt; flush;
  }
  if(hdr.date.length() &gt; 0) {
    cout &lt;&lt; "Date: " &lt;&lt; hdr.date.c_str() &lt;&lt; "\n" &lt;&lt; flush;
  }
  if(hdr.http_expires.length() &gt; 0) {
    cout &lt;&lt; "Expires: " &lt;&lt; hdr.http_expires.c_str() &lt;&lt; "\n" 
		&lt;&lt; flush;
  }
  if(hdr.etag.length() &gt; 0) {
    cout &lt;&lt; "Entity tag: " &lt;&lt; hdr.etag.c_str() &lt;&lt; "\n" &lt;&lt; flush;
  }
  if(hdr.authentication_needed) {
    cout &lt;&lt; "Authentication required" &lt;&lt; "\n" &lt;&lt; flush;
  }
  if(hdr.authentication_scheme.length() &gt; 0) {
    cout &lt;&lt; "Authentication scheme: " 
		&lt;&lt; hdr.authentication_scheme.c_str() &lt;&lt; "\n" &lt;&lt; flush;
  }
  if(hdr.realm.length() &gt; 0) {
    cout &lt;&lt; "Authentication realm: " &lt;&lt; hdr.realm.c_str() &lt;&lt; "\n" 
		&lt;&lt; flush;
  }
  if(hdr.auth_cookie.length() &gt; 0) {
    cout &lt;&lt; "Authentication cookie: " &lt;&lt; hdr.auth_cookie.c_str() 
		&lt;&lt; "\n" &lt;&lt; flush;
  }
  if(hdr.content_encoding.length() &gt; 0) {
    cout &lt;&lt; "Content encoding: " &lt;&lt; hdr.content_encoding.c_str() 
		&lt;&lt; "\n" &lt;&lt; flush;
  }
  if(hdr.pragma.length() &gt; 0) {
    cout &lt;&lt; "Pragma: " &lt;&lt; hdr.pragma.c_str() &lt;&lt; "\n" &lt;&lt; flush;
  }
  if(hdr.cache_control.length() &gt; 0) {
    cout &lt;&lt; "Cache control: " &lt;&lt; hdr.cache_control.c_str() &lt;&lt; "\n" 
		&lt;&lt; flush;
  }
  
  if(hdr.file_extension.length() &gt; 0) {
    cout &lt;&lt; "File extension: " &lt;&lt; hdr.file_extension.c_str() &lt;&lt; "\n" 
		&lt;&lt; flush;
  }
  if(hdr.length &gt; -1) {
    cout &lt;&lt; "Document length: " &lt;&lt; hdr.length &lt;&lt; "\n" &lt;&lt; flush;
  }
  if(hdr.not_found) {
    cout &lt;&lt; "The requested document was not found" &lt;&lt; "\n" 
		&lt;&lt; flush;
  }
  if(!hdr.no_cache) {
    cout &lt;&lt; "Using cached copy of the requested document" &lt;&lt; "\n" 
		&lt;&lt; flush;
  }
  if(hdr.accept_ranges) {
    cout &lt;&lt; "Accepting ranges" &lt;&lt; "\n" &lt;&lt; flush;
  }
  if(hdr.timeout &gt; -1) {
    cout &lt;&lt; "Timeout: " &lt;&lt; hdr.timeout &lt;&lt; "\n" &lt;&lt; flush;
  }
  if(hdr.max_conns &gt; -1) {
    cout &lt;&lt; "Max connects: " &lt;&lt; hdr.max_conns &lt;&lt; "\n" &lt;&lt; flush;
  }
  if(!hdr.keep_alive) {
    cout &lt;&lt; "The server has closed this connection" &lt;&lt; "\n" 
		&lt;&lt; flush;
  }

  gxListNode&lt;gxsNetscapeCookie&gt; *netscape_cookies = \
    hdr.netscape_cookies.GetHead();
  if(netscape_cookies) {
    cout &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "Cookie information. Press Enter to continue..." 
		&lt;&lt; "\n" &lt;&lt; flush;
    cin.get();

    while(netscape_cookies) {
      gxsNetscapeCookie citem(netscape_cookies-&gt;data);

      cout &lt;&lt; "Hostname: " &lt;&lt; citem.host.c_str() &lt;&lt; "\n" 
		  &lt;&lt; flush;
      cout &lt;&lt; "Name: " &lt;&lt; citem.name.c_str() &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "Value: " &lt;&lt; citem.value.c_str() &lt;&lt; "\n" &lt;&lt; flush;
      if(citem.expires.length() &gt; 0) {
	cout &lt;&lt; "Expires: " &lt;&lt; citem.expires.c_str() &lt;&lt; "\n" 
		    &lt;&lt; flush;
      }
      if(citem.domain.length() &gt; 0) {
	cout &lt;&lt; "Domain: " &lt;&lt; citem.domain.c_str() &lt;&lt; "\n" 
		    &lt;&lt; flush;
      }
      if(citem.path.length() &gt; 0) {
	cout &lt;&lt; "Path: " &lt;&lt; citem.path.c_str() &lt;&lt; "\n" &lt;&lt; flush;
      }
      if(citem.secure) {
	cout &lt;&lt; "This is a secure cookie" &lt;&lt; "\n" &lt;&lt; flush;
      }

      netscape_cookies = netscape_cookies-&gt;next;
      
      if(netscape_cookies) {
	cout &lt;&lt; "\n" &lt;&lt; flush;
	cout &lt;&lt; "Cookie information. Press Enter to continue..." 
		    &lt;&lt; "\n" &lt;&lt; flush;
	cin.get();
      }
    }
  }
}

void GetDocumentHeader(char *URL)
{
  gxsURL url;
  gxsURLInfo u;
  gxString web_url(URL);
  
  if(!url.ParseURL(web_url, u)) {
    cout &lt;&lt; "Error parsing url" &lt;&lt; "\n";
    return;
  }

  gxsHTTPSClient httpc;
  gxsHTTPHeader hdr;

  if(httpc.RequestHeader(u, hdr) != 0) {
    cout &lt;&lt; httpc.SocketExceptionMessage() &lt;&lt; "\n";
    cout &lt;&lt; httpc.openssl.SSLExceptionMessage() &lt;&lt; "\n";
    return;
  }

  PrintHTTPHeader(hdr);
}

void DownloadFile(const char *URL)
{
  gxsHTTPSClient client;

  gxsURL url;
  gxsURLInfo u;
  if(!url.ParseURL(URL, u)) {
    cout &lt;&lt; "Error parsing URL" &lt;&lt; "\n";
  }

  <FONT COLOR="#ff0000">// Construct the local file name based on the URL information</FONT>
  gxString sbuf(u.dir);
  if(u.file == "?") { <FONT COLOR="#ff0000">// Is this a file or directory</FONT>
    while(sbuf.DeleteBeforeIncluding("/")) ;
    u.file = sbuf;
    u.dir.DeleteAfterIncluding(sbuf.c_str());
  }
  if(!u.file) {
    u.file = "index.html";
  }

  <FONT COLOR="#ff0000">// Open the local file</FONT>
  DiskFileB outfile(u.file.c_str(), DiskFileB::df_WRITEONLY,
		    DiskFileB::df_CREATE);
  if(!outfile) {
    cout &lt;&lt; outfile.df_ExceptionMessage() &lt;&lt; "\n";
    return;
  }
  
  cout &lt;&lt; "Connecting to: " &lt;&lt; u.host &lt;&lt; "\n";
  cout &lt;&lt; "Downloading: " &lt;&lt; u.path &lt;&lt; "\n";

  <FONT COLOR="#ff0000">// client.openssl.SetCertFile("client_cert.pem");</FONT>
  <FONT COLOR="#ff0000">// client.openssl.SetKeyFile("client_key.pem");</FONT>
  <FONT COLOR="#ff0000">// client.openssl.SetPasswd("keypassphrase");</FONT>
  <FONT COLOR="#ff0000">// client.openssl.SetCAList("ca_list.pem");</FONT>
  <FONT COLOR="#ff0000">// client.openssl.SetRandomFile("random_number_file");</FONT>
  <FONT COLOR="#ff0000">// client.openssl.RequireVerifyCert();</FONT>

  gxsHTTPHeader hdr;
  if(client.Request(u, hdr, outfile.df_FileStream()) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n";
    cout &lt;&lt; client.openssl.SSLExceptionMessage() &lt;&lt; "\n";
    return;
  }

  client.Flush();
}

<FONT COLOR="#ff0000">// Program's main thread of execution.</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- </FONT>
int main(int argc, char **argv)
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  if(argc &lt; 2) { 
    HelpMessage(ProgramName, ProgramVersionNumber);
    return 0;
  }
  
  <FONT COLOR="#ff0000">// Process command ling arguments and files </FONT>
  int narg;
  char *arg = argv[narg = 1];
  while (narg &lt; argc) {
    if (arg[0] != '\0') {
      if (arg[0] == '-') { <FONT COLOR="#ff0000">// Look for command line arguments</FONT>
	if(!ProcessArgs(arg)) return 0; <FONT COLOR="#ff0000">// Exit if argument is not valid</FONT>
      }
      else { 
	if(get_document) {
	  cout &lt;&lt; "\n";
	  cout &lt;&lt; "Downloading: " &lt;&lt; arg &lt;&lt; "\n";
	  DownloadFile((const char *)arg);
	}
	else if(get_doc_header) {
	  cout &lt;&lt; "\n";
	  cout &lt;&lt; "Requesting document header: " &lt;&lt; arg &lt;&lt; "\n";
	  GetDocumentHeader(arg);
	}
	else { <FONT COLOR="#ff0000">// Default if no argument is specifed</FONT>
	  cout &lt;&lt; "\n";
	  cout &lt;&lt; "Downloading: " &lt;&lt; arg &lt;&lt; "\n";
	  DownloadFile((const char *)arg);
	}
      }
      arg = argv[++narg];
    }
  }
  
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
