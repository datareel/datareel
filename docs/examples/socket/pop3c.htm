<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:39:33 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>pop3c example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 02/23/2001</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Test program for the embedded POP3 client class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "gxspop3.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

int CheckError(gxsPOP3Client *pop3)
{
  if(pop3-&gt;GetSocketError() != gxSOCKET_NO_ERROR) {
    cout &lt;&lt; pop3-&gt;SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    if(pop3-&gt;reply_buf[0] != 0) { <FONT COLOR="#ff0000">// Check the reply buffer</FONT>
      cout &lt;&lt; pop3-&gt;reply_buf &lt;&lt; flush;
    }
    pop3-&gt;Close();
    return 0;
  }
  return 1; <FONT COLOR="#ff0000">// No errors reported</FONT>
}


void ClearInputStream(istream &amp;s)
<FONT COLOR="#ff0000">// Used to clear istream</FONT>
{
  char c;
  s.clear();
  while(s.get(c) &amp;&amp; c != '\n') { ; }
}

void Menu()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "(c, C)    Reset connection" &lt;&lt; "\n";
  cout &lt;&lt; "(d, D)    Delete a message" &lt;&lt; "\n";
  cout &lt;&lt; "(h, H, ?) Display this menu" &lt;&lt; "\n";
  cout &lt;&lt; "(l, L)    List message numbers" &lt;&lt; "\n";
  cout &lt;&lt; "(r, R)    Retrieve a message" &lt;&lt; "\n";
  cout &lt;&lt; "(t, T)    Retrieve a message header" &lt;&lt; "\n";   
  cout &lt;&lt; "(q, Q)    Quit this program" &lt;&lt; "\n";
  cout &lt;&lt; "\n";
}

void Delete(gxsPOP3Client *pop3)
{
  int message_number = 1;
  cout &lt;&lt; "Enter the message number&gt; ";
  cin &gt;&gt; message_number;
  if(!cin) {
    cout &lt;&lt; "Invalid input" &lt;&lt; "\n";
    return;
  }

  const int sbuf_size = 8192;
  char sbuf[sbuf_size];

  if(pop3-&gt;POP3Delete(message_number, sbuf, sbuf_size) != gxSOCKET_NO_ERROR) {
    cout &lt;&lt; pop3-&gt;SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return;
  }

  sbuf[pop3-&gt;BytesRead()] = 0;
  cout &lt;&lt; sbuf &lt;&lt; flush;
}

void List(gxsPOP3Client *pop3)
{
  const int sbuf_size = 8192;
  char sbuf[sbuf_size];
  if(pop3-&gt;POP3List(sbuf, sbuf_size) != gxSOCKET_NO_ERROR) {
    cout &lt;&lt; pop3-&gt;SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    sbuf[pop3-&gt;BytesRead()] = 0;
    cout &lt;&lt; sbuf &lt;&lt; flush;
    return;
  }
  sbuf[pop3-&gt;BytesRead()] = 0;
  cout &lt;&lt; sbuf &lt;&lt; flush;
}

void Reset(gxsPOP3Client *pop3)
{
  if(pop3-&gt;POP3RSet() != gxSOCKET_NO_ERROR) {
    cout &lt;&lt; pop3-&gt;SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; pop3-&gt;reply_buf &lt;&lt; flush;
    return;
  }
  cout &lt;&lt; pop3-&gt;reply_buf &lt;&lt; flush;
}

void Retrieve(gxsPOP3Client *pop3)
{
  int message_number = 1;
  cout &lt;&lt; "Enter the message number&gt; ";
  cin &gt;&gt; message_number;
  if(!cin) {
    cout &lt;&lt; "Invalid input" &lt;&lt; "\n";
    return;
  }

  const int sbuf_size = 8192;
  char sbuf[sbuf_size];
  if(pop3-&gt;POP3Retr(message_number, sbuf, sbuf_size) != gxSOCKET_NO_ERROR) {
    cout &lt;&lt; pop3-&gt;SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return;
  }
  sbuf[pop3-&gt;BytesRead()] = 0;
  cout &lt;&lt; sbuf &lt;&lt; flush;
}

void Top(gxsPOP3Client *pop3)
{
  int message_number = 1;
  cout &lt;&lt; "Enter the message number&gt; ";
  cin &gt;&gt; message_number;
  if(!cin) {
    cout &lt;&lt; "Invalid input" &lt;&lt; "\n";
    return;
  }

  const int sbuf_size = 8192;
  char sbuf[sbuf_size];
  if(pop3-&gt;POP3Top(message_number, sbuf, sbuf_size) != gxSOCKET_NO_ERROR) {
    cout &lt;&lt; pop3-&gt;SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    sbuf[pop3-&gt;BytesRead()] = 0;
    cout &lt;&lt; sbuf &lt;&lt; flush;
    return;
  }
  sbuf[pop3-&gt;BytesRead()] = 0;
  cout &lt;&lt; sbuf &lt;&lt; flush;
}

int main(int argc, char **argv)
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  if(argc &lt; 4) {
    cout &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " server username password" &lt;&lt; "\n";
    cout &lt;&lt; "server   = Your POP3 mail server" &lt;&lt; "\n";
    cout &lt;&lt; "username = Your POP3 account user name" &lt;&lt; "\n";
    cout &lt;&lt; "username = Your POP3 account password" &lt;&lt; "\n";
    cout &lt;&lt; "\n";
    cout &lt;&lt; "Example: " &lt;&lt; argv[0] 
	 &lt;&lt; " popserver.xyz.com myname mypassword" &lt;&lt; "\n";
    return 1;
  }
  char *server = argv[1];
  char *username = argv[2];
  char *password = argv[3];
 
  gxsPOP3Client pop3;

  cout &lt;&lt; "Connecting to the POP3 server" &lt;&lt; "\n";
  pop3.ConnectClient((const char *)server);
  if(!CheckError(&amp;pop3)) return 1;
  cout &lt;&lt; pop3.reply_buf &lt;&lt; flush;

  pop3.POP3Login((const char *)username, (const char *)password);
  if(!CheckError(&amp;pop3)) return 1;
  cout &lt;&lt; pop3.reply_buf &lt;&lt; flush;

  char key;
  Menu();
  int rv = 1;

  while(rv) {
    if (!cin) { 
      ClearInputStream(cin); 
      if (!cin) {  
	cout &lt;&lt; "Input stream error" &lt;&lt; "\n";
	return 0;
      }
    }
    cout &lt;&lt; '&gt;';
    cin &gt;&gt; key;
    if (!cin) continue;
    switch(key) {
      case '?' : Menu(); break;
      case 'h' : case 'H' : Menu(); break;
      case 'q' : case 'Q' : rv = 0; break;
      case 'C' : case 'c' : ClearInputStream(cin); Reset(&amp;pop3); break;
      case 'd' : case 'D' : ClearInputStream(cin); Delete(&amp;pop3); break;
      case 'l' : case 'L' : ClearInputStream(cin); List(&amp;pop3); break;
      case 'r' : case 'R' : ClearInputStream(cin); Retrieve(&amp;pop3); break;
      case 't' : case 'T' : ClearInputStream(cin); Top(&amp;pop3); break;
      default:
        cout &lt;&lt; "Unrecognized command" &lt;&lt; "\n";
	break;
    }
  }

  pop3.POP3Logout();
  if(!CheckError(&amp;pop3)) return 1;
  cout &lt;&lt; pop3.reply_buf &lt;&lt; flush;

  pop3.Close();
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
