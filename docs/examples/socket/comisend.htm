<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:37:40 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>comisend example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: client.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

The program is used to test gxSerialComm class transmit 
functions by writing a file or character string to a serial 
port.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include "gxscomm.h"
#include "dfileb.h"

int main(int argc, char **argv)
{
  if(argc &lt; 2) {
    cout &lt;&lt; "Serial port comsend program" &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "Usage 1: " &lt;&lt; argv[0] &lt;&lt; " device name [baud rate]" &lt;&lt; "\n" 
	 &lt;&lt; flush;
    cout &lt;&lt; "Usage 2: " &lt;&lt; argv[0] &lt;&lt; " device name [baud rate] [file name]"
	 &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  gxSerialComm dev;
  int status = dev.OpenSerialPort(argv[1]);
  if(status &lt; 0) {
    cout &lt;&lt; "Cannot open the specified device!" &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  else {
    if(status == gxSerialComm::scommREAD_WRITE)
      cout &lt;&lt; argv[1] &lt;&lt; " open for read/write access." &lt;&lt; "\n" &lt;&lt; flush;
    else if(status == gxSerialComm::scommREAD_ONLY)
      cout &lt;&lt; argv[1] &lt;&lt; " open for read only access." &lt;&lt; "\n" &lt;&lt; flush;
    else if(status == gxSerialComm::scommWRITE_ONLY)
      cout &lt;&lt; argv[1] &lt;&lt; " open for write only access." &lt;&lt; "\n" &lt;&lt; flush;
    else {
      cout &lt;&lt; "Invalid status opening " &lt;&lt; argv[1] &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
      return 1;
    }
  }
  
  if(argc &gt; 2 &amp;&amp; atoi(argv[2])) dev.SetBaudRate(atoi(argv[2]));
  else dev.SetBaudRate(9600);

  dev.SetFlowControl(gxSerialComm::scommNO_FLOW_CONTROL);
  <FONT COLOR="#ff0000">// dev.SetFlowControl(gxSerialComm::scommHARD_FLOW);</FONT>
  <FONT COLOR="#ff0000">// dev.SetFlowControl(gxSerialComm::scommSOFT_FLOW);</FONT>
  <FONT COLOR="#ff0000">// dev.SetFlowControl(gxSerialComm::scommXON_XOFF);</FONT>

  dev.SetCharacterSize(8);
  <FONT COLOR="#ff0000">// dev.SetCharacterSize(7);</FONT>

  dev.SetParity('N');
  <FONT COLOR="#ff0000">// dev.SetParity('E');</FONT>
  <FONT COLOR="#ff0000">// dev.SetParity('0');</FONT>
  <FONT COLOR="#ff0000">// dev.SetParity('M');</FONT>
  <FONT COLOR="#ff0000">// dev.SetParity('S'); </FONT>

  dev.SetStopBits(1);
  
  if(dev.InitSerialPort() &lt; 0) {
    cout &lt;&lt; "Cannot initialize the specified device!" &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
    
  if(status == gxSerialComm::scommREAD_ONLY) {
    cout &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; argv[1] &lt;&lt; " is open for read only access." &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "You do not have permission to write to this device!" &lt;&lt; "\n" 
	 &lt;&lt; flush;
    cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  
  if(argc &gt; 3) {
    char *fname = argv[3];
    DiskFileB infile(fname);
    if(!infile) {
      cout &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "Cannot open file: " &lt;&lt; fname &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "\n" &lt;&lt; flush;
	  return 0;
    }
    const unsigned buff_sz = 1024;
    unsigned bytes_read = 0;
    unsigned total_bytes_read = 0;
    char sbuf[buff_sz];

    cout &lt;&lt; "Coping the " &lt;&lt; fname &lt;&lt; " file to " &lt;&lt; argv[1] &lt;&lt; "..." &lt;&lt; "\n" 
	 &lt;&lt; flush;
    while(!infile.df_EOF()) {
      if(infile.df_Read(sbuf, buff_sz) != DiskFileB::df_NO_ERROR) {
	if(infile.df_GetError() != DiskFileB::df_EOF_ERROR) {
	  break;
	}
      }
      bytes_read = infile.df_gcount();
      total_bytes_read += bytes_read;
      if(bytes_read &lt; buff_sz) bytes_read--; <FONT COLOR="#ff0000">// Get rid of eof marker</FONT>
      if(dev.Send((char *)sbuf,  bytes_read) &lt; 0) {
	cout &lt;&lt; "Error writing to the specifed device" &lt;&lt; "\n" &lt;&lt; flush;
	break;
      }
    }
    cout &lt;&lt; "Copied " &lt;&lt; total_bytes_read &lt;&lt; " bytes with no errors reported." 
	 &lt;&lt; "\n" &lt;&lt; flush;
  }
  else {
    char *test_pattern = "The quick brown fox jumps over the lazy dog \
0123456789\n";
    cout &lt;&lt; "Sending a test pattern to " &lt;&lt; argv[1] &lt;&lt; "\n" &lt;&lt; flush;
    if(dev.Send((char *)test_pattern, strlen(test_pattern)) &lt; 0) {
      cout &lt;&lt; "Error writing to the specifed device" &lt;&lt; "\n" &lt;&lt; flush;
      return 1;
    }
    else {
      cout &lt;&lt; strlen(test_pattern) &lt;&lt; " bytes sent." &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "Message was sent with no errors reported." &lt;&lt; "\n" &lt;&lt; flush;
    }
  }
  
  dev.Close();
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
