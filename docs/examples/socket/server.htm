<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:39:12 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>server example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: server.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program for the device cache classes.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "gxsfile.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

void ClearInputStream(istream &amp;s)
{
  char c;
  s.clear();
  while(s.get(c) &amp;&amp; c != '\n') { ; }
}

void InputString(char *mesg, MemoryBuffer &amp;s)
{
  cout &lt;&lt; mesg &lt;&lt; ": ";
  char buf[255];
  for(int i = 0; i &lt; 255; i++) buf[i] = 0;
  cin &gt;&gt; buf;
  s.Load(buf, (strlen(buf) + 1));
  s[s.length()] += '\0'; <FONT COLOR="#ff0000">// Null terminate the string</FONT>
}

void InputInt(char *mesg, int &amp;i)
{
  cout &lt;&lt; mesg &lt;&lt; ": ";
  cin &gt;&gt; i;
  ClearInputStream(cin);
}

void Menu()
{
  cout &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(?)   Display this menu" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(D)   Copy a Datagram Socket to a disk file" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(F)   Copy a disk file to another disk file" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(P)   Copy a Serial port to a disk file" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(Q)   Quit this program" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(S)   Copy a Stream Socket to a disk file" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "\n" &lt;&lt; flush;
}

int CopyStreamSocketToFile(gxsFile *dev)
<FONT COLOR="#ff0000">// Copies data from a stream socket to the memory cache</FONT>
<FONT COLOR="#ff0000">// and flushes the cache buffers to a disk file.</FONT>
{
  MemoryBuffer s;
  InputString("Enter the name of the output file", s);
  
  if(!dev-&gt;OpenOutputFile((char *)s)) {
    cout &lt;&lt; "Could not open the " &lt;&lt; (char *)s &lt;&lt; " file" &lt;&lt; "\n" &lt;&lt; flush;
    return 0;
  }

  int port;
  InputInt("Enter the server's port number", port);

  gxStream server;
  gxsSocket_t remote_socket;
  FAU_t byte_count = (FAU_t)0;
  
  cout &lt;&lt; "Initializing the GX stream server..." &lt;&lt; "\n" &lt;&lt; flush;
  if(server.StreamServer(port) != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  
  <FONT COLOR="#ff0000">// Get the host name assigned to this machine</FONT>
  char hostname[gxsMAX_NAME_LEN];
  if(server.HostName(hostname) != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  cout &lt;&lt; "Opening stream server on host " &lt;&lt; hostname &lt;&lt; "\n" &lt;&lt; flush;
  int server_up = 1;

  cout &lt;&lt; "Listening on port " &lt;&lt; port &lt;&lt; "\n" &lt;&lt; flush;
  remote_socket = server.Accept();
  
  if(remote_socket &lt; 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  while(server_up) {
    <FONT COLOR="#ff0000">// Read the block following a client connection</FONT>
    gxBlockHeader gx;
    if(server.ReadClientHeader(gx) != 0) {
      cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
      return 1;
    }

    <FONT COLOR="#ff0000">// Get the client info</FONT>
    char client_name[gxsMAX_NAME_LEN]; int r_port = -1;
    server.GetClientInfo(client_name, r_port);
    cout &lt;&lt; client_name &lt;&lt; " connecting on port " &lt;&lt; r_port &lt;&lt; "\n" &lt;&lt; flush;
    
    <FONT COLOR="#ff0000">// Read the status byte to determine what to do with this block</FONT>
    __ULWORD__ block_status = gx.block_status;
    __SBYTE__ status = (__SBYTE__)((block_status &amp; 0xFF00)&gt;&gt;8);

    switch(status) { 
      <FONT COLOR="#ff0000">// Process each block of data</FONT>
      case gxSendBlock :  
	cout &lt;&lt; "Reading " &lt;&lt; gx.block_length &lt;&lt; " bytes from " &lt;&lt; client_name 
	     &lt;&lt; " remote port " &lt;&lt; r_port &lt;&lt; "\n" &lt;&lt; flush;
	
	if(!dev-&gt;CopyStreamSocketToFile(&amp;server, gx)) {
	  cout &lt;&lt; "Error copying from stream to the file." &lt;&lt; "\n" &lt;&lt; flush;
	  return 0;
	}
	
	byte_count += (__ULWORD__)gx.block_length;
	break;

      case gxKillServer:
	cout &lt;&lt; "Client shutdown the server" &lt;&lt; "\n" &lt;&lt; flush;
	server.Close();
	server_up = 0;
	break;

      default:
	cout &lt;&lt; "Only accepting raw data blocks" &lt;&lt; "\n" &lt;&lt; flush;
	cout &lt;&lt; "The \"" &lt;&lt; status &lt;&lt; "\" command was rejected" &lt;&lt; "\n" 
	     &lt;&lt; flush;
	server.CloseRemoteSocket();
	break;
    }
  }

  cout &lt;&lt; "Number of cache buckets in use = " &lt;&lt; dev-&gt;BucketsInUse() &lt;&lt; "\n" 
       &lt;&lt; flush;
  dev-&gt;Flush(); <FONT COLOR="#ff0000">// Flush all the cache buffers before exiting</FONT>
  dev-&gt;CloseOutputFile();
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
  return 1;
}

int CopyDatagramSocketToFile(gxsFile *dev)
<FONT COLOR="#ff0000">// Copies data from a stream socket to the memory cache</FONT>
<FONT COLOR="#ff0000">// and flushes the cache buffers to a disk file.</FONT>
{
  MemoryBuffer s;
  InputString("Enter the name of the output file", s);
  
  if(!dev-&gt;OpenOutputFile((char *)s)) {
    cout &lt;&lt; "Could not open the " &lt;&lt; (char *)s &lt;&lt; " file" &lt;&lt; "\n" &lt;&lt; flush;
    return 0;
  }

  int port;
  InputInt("Enter the server's port number", port);

  gxDatagram server;
  FAU_t byte_count = (FAU_t)0;
  
  cout &lt;&lt; "Initializing the GX datagram server..." &lt;&lt; "\n" &lt;&lt; flush;
  if(server.DatagramServer(port) != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  <FONT COLOR="#ff0000">// Get the host name assigned to this machine</FONT>
  char hostname[gxsMAX_NAME_LEN];
  if(server.HostName(hostname) != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  cout &lt;&lt; "Opening GX datagram server on host " &lt;&lt; hostname &lt;&lt; "\n" &lt;&lt; flush;

  <FONT COLOR="#ff0000">// Find out what port was really assigned </FONT>
  int assigned_port;
  if(server.PortNumber(assigned_port) != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  cout &lt;&lt; "Port assigned is " &lt;&lt; assigned_port &lt;&lt; "\n" &lt;&lt; flush;

  int server_up = 1;
  while(server_up) {
    <FONT COLOR="#ff0000">// Read the block following a client connection</FONT>
    gxBlockHeader gx;
    if(server.ReadClientHeader(gx) != 0) {
      cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
      return 1;
    }

    <FONT COLOR="#ff0000">// Get the client info</FONT>
    char client_name[gxsMAX_NAME_LEN]; int r_port = -1;
    server.GetClientInfo(client_name, r_port);
    cout &lt;&lt; client_name &lt;&lt; " connecting on port " &lt;&lt; r_port &lt;&lt; "\n" &lt;&lt; flush;

    <FONT COLOR="#ff0000">// Read the status byte to determine what to do with this block</FONT>
    __ULWORD__ block_status = gx.block_status;
    __SBYTE__ status = (__SBYTE__)((block_status &amp; 0xFF00)&gt;&gt;8);

    switch(status) { 
      <FONT COLOR="#ff0000">// Process each block of data</FONT>
      case gxSendBlock :
	cout &lt;&lt; "Reading " &lt;&lt; gx.block_length &lt;&lt; " bytes from " &lt;&lt; client_name 
	     &lt;&lt; " remote port " &lt;&lt; r_port &lt;&lt; "\n" &lt;&lt; flush;
	
	if(!dev-&gt;CopyDatagramSocketToFile(&amp;server, gx)) {
	  cout &lt;&lt; "Error copying from stream to the file." &lt;&lt; "\n" &lt;&lt; flush;
	  return 0;
	}

	byte_count += (__ULWORD__)gx.block_length;
	break;

      case gxKillServer:
	cout &lt;&lt; "Client shutdown the server" &lt;&lt; "\n" &lt;&lt; flush;
	server.Close();
	server_up = 0;
	break;
	
      default:
	cout &lt;&lt; "Only accepting raw data blocks" &lt;&lt; "\n" &lt;&lt; flush;
	cout &lt;&lt; "The \"" &lt;&lt; status &lt;&lt; "\" command was rejected" &lt;&lt; "\n" 
	     &lt;&lt; flush;
	break;
    }
  }
    
  cout &lt;&lt; "Number of cache buckets in use = " &lt;&lt; dev-&gt;BucketsInUse() &lt;&lt; "\n" 
       &lt;&lt; flush;
  dev-&gt;Flush(); <FONT COLOR="#ff0000">// Flush all the cache buffers before exiting</FONT>
  dev-&gt;CloseOutputFile();
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
  return 1;
}

void CopyFileToFile(gxsFile *dev)
{
  MemoryBuffer in, out;

  InputString("Enter the name of the input file", in);

  if(!dev-&gt;OpenInputFile(in)) {
    cout &lt;&lt; "Cannot open the specified file!" &lt;&lt; "\n" &lt;&lt; flush;
    return;
  }

  InputString("Enter the name of the output file", out);
  
  if(!dev-&gt;OpenOutputFile(out)) {
    cout &lt;&lt; "Cannot open the specified file!" &lt;&lt; "\n" &lt;&lt; flush;
    return;
  }

  FAU_t byte_count = (FAU_t)0;

  if(!dev-&gt;CopyFileToFile(byte_count)) {
    cout &lt;&lt; "Error copying file." &lt;&lt; "\n" &lt;&lt; flush;
    return;
  }

  cout &lt;&lt; "Number of cache buckets in use = " &lt;&lt; dev-&gt;BucketsInUse() &lt;&lt; "\n" 
       &lt;&lt; flush;
  cout &lt;&lt; "Flushing the device cache..." &lt;&lt; "\n" &lt;&lt; flush;
  dev-&gt;Flush();
  dev-&gt;CloseInputFile(); dev-&gt;CloseOutputFile();
  cout &lt;&lt; "Finished processing file." &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Byte count = " &lt;&lt; (long)byte_count &lt;&lt; "\n" &lt;&lt; flush;
}

void CopySerialPortToFile(gxsFile *dev) 
{
  MemoryBuffer out, port;
  InputString("Enter the name of the serial device", port);
  InputString("Enter the name of the output file", out);

  if(!dev-&gt;OpenOutputFile(out)) {
    cout &lt;&lt; "Cannot open the specified file!" &lt;&lt; "\n" &lt;&lt; flush;
    return;
  }
  
  FAU_t byte_count = (FAU_t)0;
  gxSerialCommServer server;

  cout &lt;&lt; "Initializing the GX serial port server..." &lt;&lt; "\n" &lt;&lt; flush;
  int rv = server.InitCommServer(port);
  if(rv != gxSerialComm::scomm_NO_ERROR) {
    cout &lt;&lt; server.SerialCommExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return;
  }
  
  cout &lt;&lt; "Opening GX serial port server on " &lt;&lt; (char*)port &lt;&lt; "\n" 
       &lt;&lt; flush;  

  int server_up = 1;
  while(server_up) {
    <FONT COLOR="#ff0000">// Wait for a block header.</FONT>
    gxBlockHeader gx;
    if(server.ReadHeader(gx) != 0) {
      cout &lt;&lt; server.SerialCommExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
      return;
    }
    
    cout &lt;&lt; "Client connecting on " &lt;&lt; (char *)port &lt;&lt; "\n" &lt;&lt; flush;
    
    <FONT COLOR="#ff0000">// Read the status byte to determine what to do with this block</FONT>
    __ULWORD__ block_status = gx.block_status;
    __SBYTE__ status = (__SBYTE__)((block_status &amp; 0xFF00)&gt;&gt;8);
    
    switch(status) { 
      <FONT COLOR="#ff0000">// Process each block of data</FONT>
      case gxSendBlock :
	cout &lt;&lt; "Reading database block " &lt;&lt; gx.block_length
	     &lt;&lt; " bytes in length" &lt;&lt; "\n" &lt;&lt; flush;
	if(!dev-&gt;CopySerialPortToFile(&amp;server, gx)) {
	  cout &lt;&lt; "Error copying from serial port to the file." &lt;&lt; "\n" 
	       &lt;&lt; flush;
	  return;
	}
	byte_count += (__ULWORD__)gx.block_length;
    	break;

      case gxKillServer:
	cout &lt;&lt; "Client shutdown the server" &lt;&lt; "\n" &lt;&lt; flush;
	server.Close();
	server_up = 0;
	break;

      default:
	cout &lt;&lt; "Only accepting raw data blocks" &lt;&lt; "\n" &lt;&lt; flush;
	cout &lt;&lt; "The \"" &lt;&lt; status &lt;&lt; "\" command was rejected" &lt;&lt; "\n" 
	     &lt;&lt; flush;
	break;
    }
  }

  cout &lt;&lt; "Number of cache buckets in use = " &lt;&lt; dev-&gt;BucketsInUse() &lt;&lt; "\n" 
       &lt;&lt; flush;
  cout &lt;&lt; "Flushing the device cache..." &lt;&lt; "\n" &lt;&lt; flush;
  dev-&gt;Flush();
  dev-&gt;CloseOutputFile();
  cout &lt;&lt; "Finished processing file." &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Byte count = " &lt;&lt; (long)byte_count &lt;&lt; "\n" &lt;&lt; flush;
}

void SetupServer(int server_type)
{
  int cache_size = 1024;
  gxsFile dev(cache_size); <FONT COLOR="#ff0000">// Device cache used to process a file</FONT>

  cout &lt;&lt; "Creating a device cache using " &lt;&lt; cache_size 
       &lt;&lt; " cache buckets." &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Reserving " &lt;&lt; (sizeof(gxDeviceBucket) * cache_size) 
       &lt;&lt; " bytes of memory." &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Number of cache buckets in use = " &lt;&lt; dev.BucketsInUse() &lt;&lt; "\n" 
       &lt;&lt; flush;
  cout &lt;&lt; "\n" &lt;&lt; flush;
  
  switch(server_type) {
    case gxSOCKET_STREAM_SERVER:
      CopyStreamSocketToFile(&amp;dev);
      Menu();
      break;
      
    case gxSOCKET_DATAGRAM_SERVER:
      CopyDatagramSocketToFile(&amp;dev);
      Menu();
      break;

    case gxSOCKET_SERIAL_PORT_SERVER:
      CopySerialPortToFile(&amp;dev);
      Menu();
      break;
      
    case gxSOCKET_LOCAL_FILE_SYSTEM:
      CopyFileToFile(&amp;dev);
      Menu();
      break;
      
    default:
      break;
  }
}

int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  Menu();
  
  char key;
  int rv = 1;
  while(rv) {
    if (!cin) {
      ClearInputStream(cin);
      if (!cin) { 
	cout &lt;&lt; "Input stream error" &lt;&lt; "\n" &lt;&lt; flush;
	return 0;
      }
    }
    cout &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; '&gt;';
    cin &gt;&gt; key;

    if (!cin) continue;
    switch(key) {
      case 'd' : case 'D' : 
	ClearInputStream(cin);
	SetupServer(gxSOCKET_DATAGRAM_SERVER);
	break;
	
      case 'f' : case 'F' : 
	ClearInputStream(cin);
	SetupServer(gxSOCKET_LOCAL_FILE_SYSTEM);
	break;
	
      case 'p' : case 'P' : 
	ClearInputStream(cin);
	SetupServer(gxSOCKET_SERIAL_PORT_SERVER);
	break;
	
      case 's' : case 'S' : 
	ClearInputStream(cin);
	SetupServer(gxSOCKET_STREAM_SERVER);
	break;

      case 'q' : case 'Q' :
	rv = 0;
	break;

      case '?' :
	Menu();
	break;

      default:
        cout &lt;&lt; "Unrecognized command" &lt;&lt; "\n" &lt;&lt; flush;
	cout &lt;&lt; "\n" &lt;&lt; flush;
    }
  }
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
