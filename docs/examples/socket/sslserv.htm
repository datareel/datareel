<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:41:00 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>sslserv example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: server.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, GCC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 10/17/2001</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program used demonstrate the use of the gxSSL
class in a multi-threaded HTTPS server application.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //   </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include "m_thread.h"

class ConsoleThread : public gxThread
{
public:
  ConsoleThread() { }
  ~ConsoleThread() { }

private:
  void *ThreadEntryRoutine(gxThread_t *thread);
};

void *ConsoleThread::ThreadEntryRoutine(gxThread_t *thread)
{
  const int cmd_len = 255;
  char sbuf[cmd_len];
  
  while(1) {
    for(int i = 0; i &lt; cmd_len; i++) sbuf[i] = 0;
    cin &gt;&gt; sbuf;
    if(strcmp(sbuf, "quit") == 0) break;
    if(strcmp(sbuf, "exit") == 0) break;
    cout &lt;&lt; "Invalid command" &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "Enter quit to exit" &lt;&lt; "\n" &lt;&lt; flush;
  }
  return (void *)0;
}

void KeyGenCallback(int p, int n, void *arg)
{
  char c = 'B';
  if (p == 0) c = '.';
  if (p == 1) c = '+';
  if (p == 2) c = '*';
  if (p == 3) c = '\n';
  cout &lt;&lt; c &lt;&lt; flush;
}

void nt_SSL_error_print(gxSSL *ssl) 
<FONT COLOR="#ff0000">// Non-thread safe error message print</FONT>
{
  if(!ssl) return;
  gxString err;
  cout &lt;&lt; ssl-&gt;SSLExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
  gxSSL::GlobalSSLError(err);
  cout &lt;&lt; err.c_str() &lt;&lt; "\n" &lt;&lt; flush;
}

void InputData(const char *prompt, gxString &amp;data)
<FONT COLOR="#ff0000">// Function used to read a string from the input stream.</FONT>
{
  data.Clear();
  if(!prompt) return;
  char buf[1024];
  memset(buf, 0, 1024);
  cout &lt;&lt; prompt &lt;&lt; ": " &lt;&lt; flush;
  cin.getline(buf, sizeof(buf));
  data &lt;&lt; buf;
}

int main(int argc, char **argv)
{
  <FONT COLOR="#ff0000">// Check arguments. Should be only one: the port number to bind to.</FONT>
  if(argc != 2) {
    cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " port" &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  ServerThread server;
  gxSSL *ssl = &amp;server.openssl;
  gxRandom rand_num;

  servercfg-&gt;port = (gxsPort_t) atoi(argv[1]);
  const char *private_key_fname = "server_private_key.pem";
  const char *cert_req_fname = "server_cert.pem";
  const char *dh_fname = "dhparms.pem";

  if(!futils_exists(dh_fname)) {
    cout &lt;&lt; "Generating Diffie-Hellman parameters file" &lt;&lt; "\n" &lt;&lt; flush;
    if(ssl-&gt;InitPRNG() != gxSSL_NO_ERROR) {
      nt_SSL_error_print(ssl);
      return 1;
    }
    if(ssl-&gt;MakeDHParms(dh_fname) != gxSSL_NO_ERROR) {
      nt_SSL_error_print(ssl);
      return 1;
    }
  }

  if(!futils_exists(private_key_fname)) {
    cout &lt;&lt; "Generating private RSA key" &lt;&lt; "\n" &lt;&lt; flush;

    if(ssl-&gt;InitPRNG() != gxSSL_NO_ERROR) {
      nt_SSL_error_print(ssl);
      return 1;
    }
    if(ssl-&gt;MakeRSAPrivateKey(private_key_fname, 2048,
			      KeyGenCallback, 0) != gxSSL_NO_ERROR) {
      nt_SSL_error_print(ssl);
      return 1;
    }

    cout &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "Generating and self-signing certificate request" &lt;&lt; "\n" &lt;&lt; flush;
    gxCertIssuerInfo ci;
    ci.sn = rand_num.RandomNumber();
    ci.days = 365;
    InputData("Country Name XX", ci.C);
    if(ci.C.is_null()) ci.C = "US";
    InputData("State or Province", ci.ST);
    if(ci.ST.is_null()) ci.ST = "MyState";
    InputData("City or Locality", ci.L);
    if(ci.L.is_null()) ci.L = "MyCity";
    InputData("Organization Name", ci.O);
    if(ci.O.is_null()) ci.O = "My Org. Name";
    InputData("Organizational Unit", ci.OU); 
    if(ci.OU.is_null()) ci.OU = "My Org. Unit";
    InputData("Common Name (or site name)", ci.CN);
    if(ci.CN.is_null()) ci.CN = "my.server.com";

    <FONT COLOR="#ff0000">// Add standard extensions if needed by application</FONT>
    <FONT COLOR="#ff0000">// ci.basic_constraints = "critical,CA:TRUE";</FONT>
    <FONT COLOR="#ff0000">// ci.key_usage = "critical,keyCertSign,cRLSign";</FONT>
    <FONT COLOR="#ff0000">// ci.subject_key_identifier = "hash";</FONT>
  
    <FONT COLOR="#ff0000">// Add Netscape specific extensions if needed by application</FONT>
    <FONT COLOR="#ff0000">// ci.netscape_cert_type = "sslCA";</FONT>
    <FONT COLOR="#ff0000">// ci.netscape_comment = "my comment extension";</FONT>

    if(ssl-&gt;MakeCertReq(private_key_fname, ci, cert_req_fname)!= 
       gxSSL_NO_ERROR) {
      nt_SSL_error_print(ssl);
      return 1;
    }
  }

  cout &lt;&lt; "Initializing HTTPS server..." &lt;&lt; "\n" &lt;&lt; flush;
  int rv = server.InitServer(servercfg-&gt;port);
  if(rv != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  
  if(!gxSSL::InitSSLibrary()) {
    cout &lt;&lt; "Error initializing SSL library" &lt;&lt; "\n" &lt;&lt; flush;  
    nt_SSL_error_print(ssl);
    return 1;
  }
  cout &lt;&lt; "Initializing SSL context object..." &lt;&lt; "\n" &lt;&lt; flush;
  if(!ssl-&gt;InitCTX(cert_req_fname, private_key_fname)) {
    nt_SSL_error_print(ssl);
    return 1;
  }

  cout &lt;&lt; "Loading Diffie-Hellman parameters..." &lt;&lt; "\n" &lt;&lt; flush;
  if(ssl-&gt;LoadDHParms(dh_fname) != gxSSL_NO_ERROR) {
    nt_SSL_error_print(ssl);
    return 1;
  }

  <FONT COLOR="#ff0000">// Get the host name assigned to this machine</FONT>
  char hostname[gxsMAX_NAME_LEN];
  rv = server.GetHostName(hostname);
  if(rv != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  cout &lt;&lt; "Opening HTTPS server on host " &lt;&lt; hostname &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Enter quit to exit" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "\n" &lt;&lt; flush;
  
  cout &lt;&lt; "Listening on port " &lt;&lt; servercfg-&gt;port &lt;&lt; "\n" &lt;&lt; flush;
  cout.flush();

 gxThread_t *server_thread = server.CreateThread();
  if(server_thread-&gt;GetThreadError() != gxTHREAD_NO_ERROR) {
    cout &lt;&lt; server_thread-&gt;ThreadExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  
  ConsoleThread console;
  gxThread_t *console_thread = console.CreateThread();
  if(console_thread-&gt;GetThreadError() != gxTHREAD_NO_ERROR) {
    cout &lt;&lt; console_thread-&gt;ThreadExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
    
  if(console.JoinThread(console_thread) != 0) {
    cout &lt;&lt; "Could not join the console thread" &lt;&lt; "\n" &lt;&lt; flush;
  }

  <FONT COLOR="#ff0000">// Destroy the serial port receiver thread</FONT>
  cout &lt;&lt; "Stopping the server thread..." &lt;&lt; "\n" &lt;&lt; flush;
  servercfg-&gt;accept_clients = 0;

  <FONT COLOR="#ff0000">// Cannot the server thread due to the blocking accept() function, so</FONT>
  <FONT COLOR="#ff0000">// cancel the thread before it is destroyed</FONT>
  server.CancelThread(server_thread);
  if(server_thread-&gt;GetThreadState() == gxTHREAD_STATE_CANCELED) {
    cout &lt;&lt; "The server thread was stopped" &lt;&lt; "\n" &lt;&lt; flush;
  }
  else {
    cout &lt;&lt; "Could not cancel the server thread" &lt;&lt; "\n" &lt;&lt; flush;
  }

  if(server.JoinThread(server_thread) != 0) {
    cout &lt;&lt; "Could not join the server thread" &lt;&lt; "\n" &lt;&lt; flush;
  }
    
  delete server_thread;
  delete console_thread;

  cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>


  


</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
