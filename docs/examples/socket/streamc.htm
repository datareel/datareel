<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:40:49 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>streamc example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: client.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This program is used to the gxStream class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include "gxstream.h"

const char *test_block = "The quick brown fox jumps over the lazy dog \
0123456789\n";

void ClearInputStream(istream &amp;s)
<FONT COLOR="#ff0000">// Used to clear istream</FONT>
{
  char c;
  s.clear();
  while(s.get(c) &amp;&amp; c != '\n') { ; }
}

void PrgMenu()
{
  cout &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(a, A)    Add a database block" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(c, C)    Change a database block" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(d, D)    Delete a database block" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(l, L)    Send a client close command" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(h, H, ?) Help (prints this menu)" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(k, K)    Shutdown the server" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(q, Q)    Quit this program" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(r, R)    Request a database block" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(s, S)    Send a raw block of data" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(w, W)    Send an acknowledgment block" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "\n" &lt;&lt; flush;
}

void Acknowledge(int port, char *host)
{
  gxStream client;
  if(client.StreamClient(port, host) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    client.Close();
    return;
  }

  cout &lt;&lt; "Requesting acknowledgment block from the server" &lt;&lt; "\n" &lt;&lt; flush;

  if(client.WriteAckBlock() != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    client.Close();
    return;
  }

  if(client.ReadAckBlock() != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    client.Close();
    return;
  }

  cout &lt;&lt; "Received an acknowledgment from the server " &lt;&lt; "\n" &lt;&lt; flush;
  client.Close();
}

void CloseCommand(int port, char *host)
{
  gxStream client;
  if(client.StreamClient(port, host) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    client.Close();
    return;
  }
  cout &lt;&lt; "Closing the connection..." &lt;&lt; "\n" &lt;&lt; flush;
  if(client.CloseConnection() != 0)
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
  client.Close();
}

void DeleteBlock(int port, char *host)
{
  gxStream client;
  if(client.StreamClient(port, host) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    client.Close();
    return;
  }

  cout &lt;&lt; "Sending a request to delete a remote block" &lt;&lt; "\n" &lt;&lt; flush;
  char *request = "DOG"; <FONT COLOR="#ff0000">// Arbitary block ID</FONT>
  gxBlockHeader gx;
  gx.block_length = strlen(request);

  if(client.DeleteBlock((char *)request, gx) != 0) 
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;

  client.Close();
}

void AddBlock(int port, char *host)
{
  gxStream client;
  if(client.StreamClient(port, host) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    client.Close();
    return;
  }

  cout &lt;&lt; "Sending a request to add a remote block" &lt;&lt; "\n" &lt;&lt; flush;

  gxBlockHeader gx;
  gx.block_length = strlen(test_block);

  if(client.AddBlock((char *)test_block, gx) != 0) 
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;

  client.Close();
}

void ChangeBlock(int port, char *host)
{
  gxStream client;
  if(client.StreamClient(port, host) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    client.Close();
    return;
  }

  cout &lt;&lt; "Sending a request to change a remote block" &lt;&lt; "\n" &lt;&lt; flush;

  char *request = "CAT"; <FONT COLOR="#ff0000">// Arbitary block ID</FONT>
  gxBlockHeader request_header;
  request_header.block_length = strlen(request);

  gxBlockHeader block_header;
  block_header.block_length = strlen(test_block);

  if(client.ChangeBlock((char *)request, (char *)test_block, request_header,
			block_header) != 0) 
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;

  client.Close();
}

void ShutDownServer(int port, char *host)
{
  gxStream client;
  if(client.StreamClient(port, host) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    client.Close();
    return;
  }

  cout &lt;&lt; "Shutting down the server..." &lt;&lt; "\n" &lt;&lt; flush;
  if(client.TerminateConnection() != 0) 
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
  client.Close();
}

void RequestBlock(int port, char *host)
{
  gxStream client;
  if(client.StreamClient(port, host) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    client.Close();
    return;
  }

  cout &lt;&lt; "Requesting a block from the server" &lt;&lt; "\n" &lt;&lt; flush;
  char *request = "FOX"; <FONT COLOR="#ff0000">// Arbitary block ID</FONT>
  gxBlockHeader request_header;
  request_header.block_length = strlen(request);
  gxBlockHeader requested_block_header;
  request_header.block_length = strlen(request);

  void *block = client.RequestBlock((char *)request, request_header,
				    requested_block_header);
  if(!block) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    client.Close();
    return;
  }
  cout &lt;&lt; "Received requested block" &lt;&lt; "\n" &lt;&lt; flush;
  cout.write((char *)block, requested_block_header.block_length);
  
  client.Close();
}

void SendBlock(int port, char *host)
<FONT COLOR="#ff0000">// Send a block of data</FONT>
{
  gxStream client;
  if(client.StreamClient(port, host) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    client.Close();
    return;
  }

  cout &lt;&lt; "Sending a block " &lt;&lt; strlen(test_block) &lt;&lt; " bytes long..." &lt;&lt; "\n" &lt;&lt; flush;
  if(client.WriteBlock((char *)test_block, strlen(test_block)) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    client.Close();
    return;
  }
  client.Close();
}

int main(int argc, char **argv)
{
  if(argc &lt; 3) {
    cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " hostname port" &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  unsigned short port = (unsigned short) atoi(argv[2]);
  char *host = argv[1];

  char key;
  PrgMenu();
  int rv = 1;
  while(rv) {
    if (!cin) {
      ClearInputStream(cin);
      if (!cin) {
	cout &lt;&lt; "Input stream error" &lt;&lt; "\n" &lt;&lt; flush;
	return 0;
      }
    }
    cout &lt;&lt; '&gt;';
    cin &gt;&gt; key;
    if (!cin) continue;
    switch(key) {
      case '?' : PrgMenu(); break;
      case 'h' : case 'H' : PrgMenu(); break;
      case 'q' : case 'Q' : rv = 0; break;

      case 'a' : case 'A' : 
	AddBlock(port, host);
	break;
      case 'c' : case 'C' : 
	ChangeBlock(port, host);
	break;
      case 'd' : case 'D' :  
	DeleteBlock(port, host);
	break;
      case 'k' : case 'K' : 
	ShutDownServer(port, host);
	break;
      case 'r' : case 'R' : 
	RequestBlock(port, host);
	break;
      case 's' : case 'S' : 
	SendBlock(port, host);
	break;
      case 'l' : case 'L' : 
	CloseCommand(port, host);
	break;
      case 'w' : case 'W' : 
	Acknowledge(port, host);
	break;
      default:
        cout &lt;&lt; "Unrecognized command" &lt;&lt; "\n" &lt;&lt; flush;
    }
  }
 
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
