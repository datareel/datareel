<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:36:40 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>file_cpp example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: gxsfile.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

The gxsFile class is used to move data to and from disk
files using the device cache.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include "gxsfile.h"

gxsFile::gxsFile(int CacheSize) : cache(CacheSize) 
{ 
  ready_for_writing = ready_for_reading = 1;
  cache.Connect(this); 
  stream_sock = 0;
  datagram_sock = 0;
  serial_port = 0;
}

void gxsFile::Read(void *buf, unsigned Bytes, gxDeviceTypes dev) 
{
  switch(dev) {
    case gxDEVICE_DISK_FILE:
      if(!infile) { ready_for_reading = 0; return; }
      else { ready_for_reading = 1; }
      if(infile.df_Read((char *)buf, Bytes) != DiskFileB::df_NO_ERROR) {
	DeviceErrorHandler(infile.df_ExceptionMessage());
      }
      break;
      
    case  gxDEVICE_STREAM_SOCKET:
      if(!stream_sock) { ready_for_reading = 0; return; }
      else { ready_for_reading = 1; }
      if(stream_sock-&gt;ReadRemoteBlock((char *)buf, curr_stream_hdr) != 0)
	DeviceErrorHandler(stream_sock-&gt;SocketExceptionMessage());
      break;

    case gxDEVICE_DATAGRAM_SOCKET:
      if(!datagram_sock) { ready_for_reading = 0; return; }
      else { ready_for_reading = 1; }
      if(datagram_sock-&gt;ReadRemoteBlock((char *)buf, curr_datagram_hdr) != 0)
	DeviceErrorHandler(datagram_sock-&gt;SocketExceptionMessage());
      break;
      
    case gxDEVICE_SERIAL_PORT:
      if(!serial_port) {  ready_for_reading = 0; return; }
      else { ready_for_reading = 1; }
      if(serial_port-&gt;ReadBlock((char *)buf, curr_serial_hdr) != 0)
	DeviceErrorHandler(serial_port-&gt;SerialCommExceptionMessage());
      break;

    case gxDEVICE_NULL:
      break;
      
    default:
      break;
  }
}

void gxsFile::Write(const void *buf, unsigned Bytes, gxDeviceTypes dev) 
{
  switch(dev) {
    case gxDEVICE_CONSOLE:
      GXSTD::cout.write((char *)buf, Bytes);
      break;

    case gxDEVICE_DISK_FILE:
      if(!outfile) { ready_for_writing = 0; return; }
      else { ready_for_writing = 1; }
      if(outfile.df_Write((char *)buf, Bytes) != DiskFileB::df_NO_ERROR) {
	DeviceErrorHandler(outfile.df_ExceptionMessage());
      }
      break;

    case  gxDEVICE_STREAM_SOCKET: 
      if(!stream_sock) { ready_for_writing = 0; return; }
      else { ready_for_writing = 1; }
      if(stream_sock-&gt;WriteBlock((char *)buf, Bytes) != 0)
	DeviceErrorHandler(stream_sock-&gt;SocketExceptionMessage());
      break;
      
    case gxDEVICE_DATAGRAM_SOCKET:
      if(!datagram_sock) { ready_for_writing = 0; return; }
      else { ready_for_writing = 1; }
      if(datagram_sock-&gt;WriteBlock((char *)buf, Bytes) != 0)
	DeviceErrorHandler(datagram_sock-&gt;SocketExceptionMessage());
      break;

    case gxDEVICE_SERIAL_PORT: 
      if(!serial_port) { ready_for_writing = 0; return; }
      else { ready_for_writing = 1; }
      if(serial_port-&gt;WriteBlock((char *)buf, Bytes) != 0)
	DeviceErrorHandler(serial_port-&gt;SerialCommExceptionMessage());
      break;

    case gxDEVICE_NULL:
      break;
      
    default:
      break;
  }
}

int gxsFile::CopyFileToStreamSocket(gxStream *s, FAU_t &amp;byte_count)
<FONT COLOR="#ff0000">// Copy a disk file to a stream socket. Returns true if no errors</FONT>
<FONT COLOR="#ff0000">// occurred. NOTE: This function assumes that file has been open</FONT>
<FONT COLOR="#ff0000">// by the calling OpenInputFile/OpenOutputFile function and the</FONT>
<FONT COLOR="#ff0000">// socket has already been initialized. The calling function is</FONT>
<FONT COLOR="#ff0000">// responsible for flushing the cache buffers and closing any</FONT>
<FONT COLOR="#ff0000">// open disk files.</FONT>
{
  if(!infile) return 0;
  if(!s) return 0;
  stream_sock = s;

  gxDeviceTypes o_device = gxDEVICE_STREAM_SOCKET; <FONT COLOR="#ff0000">// Output device</FONT>
  gxDeviceTypes i_device = gxDEVICE_DISK_FILE;     <FONT COLOR="#ff0000">// Input device</FONT>

  <FONT COLOR="#ff0000">// Setup a pointer to the cache buckets</FONT>
  gxDeviceCachePtr p(cache, o_device, i_device); 

  <FONT COLOR="#ff0000">// Load the file into the cache </FONT>
  byte_count = LoadFile(p, infile.df_Length());

  return 1;
}

int gxsFile::CopyFileToDatagramSocket(gxDatagram *s, FAU_t &amp;byte_count) 
<FONT COLOR="#ff0000">// Copy a disk file to a datagram socket. Returns true if no errors</FONT>
<FONT COLOR="#ff0000">// occurred. NOTE: This function assumes that file has been open</FONT>
<FONT COLOR="#ff0000">// by the calling OpenInputFile/OpenOutputFile function and the</FONT>
<FONT COLOR="#ff0000">// socket has already been initialized. The calling function is</FONT>
<FONT COLOR="#ff0000">// responsible for flushing the cache buffers and closing any</FONT>
<FONT COLOR="#ff0000">// open disk files.</FONT>
{
  if(!infile) return 0;
  if(!s) return 0;
  datagram_sock = s;

  gxDeviceTypes o_device = gxDEVICE_DATAGRAM_SOCKET; <FONT COLOR="#ff0000">// Output device</FONT>
  gxDeviceTypes i_device = gxDEVICE_DISK_FILE; 

  <FONT COLOR="#ff0000">// Setup a pointer to the cache buckets</FONT>
  gxDeviceCachePtr p(cache, o_device, i_device); 

  <FONT COLOR="#ff0000">// Load the file into the cache </FONT>
  byte_count = LoadFile(p, infile.df_Length());

  return 1;
}

int gxsFile::CopyFileToSerialPort(gxSerialCommServer *s, FAU_t &amp;byte_count)
<FONT COLOR="#ff0000">// Copy a disk file to a serial port. Returns true if no errors</FONT>
<FONT COLOR="#ff0000">// occurred. NOTE: This function assumes that file has been open</FONT>
<FONT COLOR="#ff0000">// by the calling OpenInputFile/OpenOutputFile function and the</FONT>
<FONT COLOR="#ff0000">// port has already been initialized. The calling function is</FONT>
<FONT COLOR="#ff0000">// responsible for flushing the cache buffers and closing any</FONT>
<FONT COLOR="#ff0000">// open disk files.</FONT>
{
  if(!outfile) return 0;
  if(!s) return 0;
  serial_port = s;

  gxDeviceTypes o_device = gxDEVICE_SERIAL_PORT; <FONT COLOR="#ff0000">// Output device</FONT>
  gxDeviceTypes i_device = gxDEVICE_DISK_FILE; 

  <FONT COLOR="#ff0000">// Setup a pointer to the cache buckets</FONT>
  gxDeviceCachePtr p(cache, o_device, i_device); 

  <FONT COLOR="#ff0000">// Load the file into the cache </FONT>
  byte_count = LoadFile(p, infile.df_Length());

  return 1;
}

int gxsFile::CopyFileToFile(FAU_t &amp;byte_count)
<FONT COLOR="#ff0000">// Copy a disk file to another disk file . Returns true if no errors</FONT>
<FONT COLOR="#ff0000">// occurred. NOTE: This function assumes that files have been open</FONT>
<FONT COLOR="#ff0000">// by the calling OpenInputFile/OpenOutputFile function. The calling</FONT>
<FONT COLOR="#ff0000">// function is responsible for flushing the cache buffers and closing</FONT>
<FONT COLOR="#ff0000">// any open disk files.</FONT>

{
  if(!infile) return 0;
  if(!outfile) return 0;
  
  gxDeviceTypes o_device = gxDEVICE_DISK_FILE; <FONT COLOR="#ff0000">// Output device</FONT>
  gxDeviceTypes i_device = gxDEVICE_DISK_FILE; 

  <FONT COLOR="#ff0000">// Setup a pointer to the cache buckets</FONT>
  gxDeviceCachePtr p(cache, o_device, i_device); 

  <FONT COLOR="#ff0000">// Load the file into the cache </FONT>
  byte_count = LoadFile(p, infile.df_Length());
  return 1;
}

FAU_t gxsFile::LoadFile(gxDeviceCachePtr p, FAU_t end_of_file)
<FONT COLOR="#ff0000">// Load a file from disk into the device cache. Returns the</FONT>
<FONT COLOR="#ff0000">// number bytes read from the file.</FONT>
{
  FAU_t byte_count = (FAU_t)0;

  <FONT COLOR="#ff0000">// The file is smaller then one block</FONT>
  if(end_of_file &lt;= (FAU_t)MEMORY_BLOCK_SIZE) { 
    byte_count = end_of_file;
    p.Alloc((unsigned)end_of_file); <FONT COLOR="#ff0000">// Load the cache bucket</FONT>
  }
  else { <FONT COLOR="#ff0000">// The file is larger then one block</FONT>
    while(end_of_file &gt; (FAU_t)MEMORY_BLOCK_SIZE) {
      byte_count += MEMORY_BLOCK_SIZE;
      p.Alloc(MEMORY_BLOCK_SIZE); <FONT COLOR="#ff0000">// Load the cache bucket</FONT>
      end_of_file -= MEMORY_BLOCK_SIZE;
      if(end_of_file &lt;= (FAU_t)MEMORY_BLOCK_SIZE) {
	byte_count += end_of_file;
	p.Alloc((unsigned)end_of_file); <FONT COLOR="#ff0000">// Load the cache bucket</FONT>
	break;
      }
      else
	continue;
    }
  }
  return  byte_count;
}

int gxsFile::OpenInputFile(const char *in)
<FONT COLOR="#ff0000">// Open the file if it exists. Returns false</FONT>
<FONT COLOR="#ff0000">// it the file cannot be opened or if it does</FONT>
<FONT COLOR="#ff0000">// not exist.</FONT>
{
  infile.df_Open(in);
  if(!infile) return 0;
  return 1;
}

int gxsFile::OpenOutputFile(const char *out)
<FONT COLOR="#ff0000">// Open the specified file for writing and truncate</FONT>
<FONT COLOR="#ff0000">// it. Returns false if the file cannot be opened.</FONT>
{
  outfile.df_Create(out);
  if(!outfile) return 0;
  return 1;
}

int gxsFile::CopyStreamSocketToFile(gxStream *s, gxBlockHeader &amp;gxs)
{
  if(!s) return 0; 
  stream_sock = s;
  curr_stream_hdr = gxs;

  gxDeviceTypes o_device = gxDEVICE_DISK_FILE;     <FONT COLOR="#ff0000">// Output device</FONT>
  gxDeviceTypes i_device = gxDEVICE_STREAM_SOCKET; <FONT COLOR="#ff0000">// Input device</FONT>

  <FONT COLOR="#ff0000">// Setup a pointer to the cache buckets</FONT>
  gxDeviceCachePtr p(cache, o_device, i_device); 

  <FONT COLOR="#ff0000">// Load the cache buckets</FONT>
  p.Alloc((__ULWORD__)gxs.block_length);

  return 1;
}

int gxsFile::CopyDatagramSocketToFile(gxDatagram *s, gxBlockHeader &amp;gxs)
{
  if(!s) return 0; 
  datagram_sock = s;
  curr_datagram_hdr = gxs;

  gxDeviceTypes o_device = gxDEVICE_DISK_FILE;       <FONT COLOR="#ff0000">// Output device</FONT>
  gxDeviceTypes i_device = gxDEVICE_DATAGRAM_SOCKET; <FONT COLOR="#ff0000">// Input device</FONT>

  <FONT COLOR="#ff0000">// Setup a pointer to the cache buckets</FONT>
  gxDeviceCachePtr p(cache, o_device, i_device); 

  <FONT COLOR="#ff0000">// Load the cache buckets</FONT>
  p.Alloc((__ULWORD__)gxs.block_length);

  return 1;
}

void gxsFile::CloseOutputFile()
{
  outfile.df_Close();
}

void gxsFile::CloseInputFile()
{
  infile.df_Close();
}

void gxsFile::Flush()
{
  cache.Flush();
}

int gxsFile::CopySerialPortToFile(gxSerialCommServer *s, gxBlockHeader &amp;gxs)
{
  if(!outfile) return 0;
  if(!s) return 0;
  serial_port = s;
  curr_serial_hdr = gxs;

  gxDeviceTypes o_device = gxDEVICE_DISK_FILE;   <FONT COLOR="#ff0000">// Output device</FONT>
  gxDeviceTypes i_device = gxDEVICE_SERIAL_PORT; <FONT COLOR="#ff0000">// Input device </FONT>

  <FONT COLOR="#ff0000">// Setup a pointer to the cache buckets</FONT>
  gxDeviceCachePtr p(cache, o_device, i_device); 

  <FONT COLOR="#ff0000">// Load the cache buckets</FONT>
  p.Alloc((__ULWORD__)gxs.block_length);

  return 1;
}

void gxsFile::DeviceErrorHandler(const char *mesg)
{
  <FONT COLOR="#ff0000">// Display the device error and exit the program</FONT>
  GXSTD::cout &lt;&lt; mesg &lt;&lt; "\n";
  exit(0);
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
