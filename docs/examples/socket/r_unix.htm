<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:39:22 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>r_unix example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: r_unix.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Code used by UNIX systems to read data from a serial port using
a signal handler. 
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#include &lt;fcntl.h&gt;

<FONT COLOR="#ff0000">// #ifndef __USE_SIGNAL_IO__</FONT>
<FONT COLOR="#ff0000">// #define __USE_SIGNAL_IO__</FONT>
<FONT COLOR="#ff0000">// #endif </FONT>

#ifndef __USE_SIGNAL_IO__ <FONT COLOR="#ff0000">// Do not interrupt driven I/O </FONT>
void SerialRead(gxSerialComm *dev, char *dumpfile = 0)
{
  DiskFileB outfile;
  if(dumpfile) {
    cout &lt;&lt; "Writing output to the " &lt;&lt; dumpfile &lt;&lt; " file" &lt;&lt; "\n" &lt;&lt; flush; 
    outfile.df_Create(dumpfile);
    if(!outfile) {
      cout &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "Cannot open the: " &lt;&lt; dumpfile &lt;&lt; " capture file"
	   &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "\n" &lt;&lt; flush;
      return;
    }
  }

  cout &lt;&lt; "Waiting to receive..." &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Press Ctrl C to terminate." &lt;&lt; "\n" &lt;&lt; flush;

  const int rxBufferLen = 255;
  char buf[rxBufferLen];

  <FONT COLOR="#ff0000">// Loop while waiting for input</FONT>
  while(1) {
    usleep(100000); <FONT COLOR="#ff0000">// Allow for I/O recovery time </FONT>
    dev-&gt;RawRead((char *)buf, rxBufferLen);
    if(dev-&gt;BytesRead() &gt; 0) {
      buf[dev-&gt;BytesRead()] = 0; <FONT COLOR="#ff0000">// Null terminate the string</FONT>
      if(dumpfile) { <FONT COLOR="#ff0000">// Capture data to a file</FONT>
	outfile.df_Write((char *)buf, dev-&gt;BytesRead());
	outfile.df_Flush();
      }
      else { <FONT COLOR="#ff0000">// Write the data to the console</FONT>
	cout &lt;&lt; buf &lt;&lt; flush;
      }
    }
  }
}

#else <FONT COLOR="#ff0000">// Using interrupt driven I/O</FONT>
#include &lt;sys/signal.h&gt;

int comSTOP=0;
void signal_handler_IO(int status);  <FONT COLOR="#ff0000">// Signal handler</FONT>
int wait_flag=1;  <FONT COLOR="#ff0000">// true while no signal received </FONT>

void SerialRead(gxSerialComm *dev, char *dumpfile = 0)
{
  DiskFileB outfile;
  if(dumpfile) {
    cout &lt;&lt; "Writing output to the " &lt;&lt; dumpfile &lt;&lt; " file" &lt;&lt; "\n" &lt;&lt; flush; 
    outfile.df_Create(dumpfile);
    if(!outfile) {
      cout &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "Cannot open the: " &lt;&lt; dumpfile &lt;&lt; " capture file"
	   &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
      cout &lt;&lt; "\n" &lt;&lt; flush;
      return;
    }
  }

  struct sigaction saio; <FONT COLOR="#ff0000">// Signal action</FONT>
  const int rxBufferLen = 255;
  char buf[rxBufferLen];
    
  <FONT COLOR="#ff0000">// Install the signal handler before making the device asynchronous</FONT>
  saio.sa_handler = signal_handler_IO;
  saio.sa_flags = 0;
  sigaction(SIGIO, &amp;saio, 0);
  
  <FONT COLOR="#ff0000">// Allow this process to receive SIGIO</FONT>
#if defined (FASYNC) <FONT COLOR="#ff0000">// ASYNC I/O is a BDS feature</FONT>
  <FONT COLOR="#ff0000">// A SIGIO signal will be sent whenever input or</FONT>
  <FONT COLOR="#ff0000">// output becomes possible on this file descriptor.</FONT>
  fcntl(dev-&gt;DeviceHandle(), F_SETOWN, getpid());
  fcntl(dev-&gt;DeviceHandle(), F_SETFL, FASYNC);

#elif defined (FIOSSAIOSTAT) <FONT COLOR="#ff0000">// HPUX specific</FONT>
  <FONT COLOR="#ff0000">// Set the process ID that will receive the SIGIO signals</FONT>
  ioctl(dev-&gt;DeviceHandle(), FIOSSAIOOWN, dev-&gt;GetTermIOS());
  ioctl(dev-&gt;DeviceHandle(), FIOSSAIOSTAT, dev-&gt;GetTermIOS());  

#else
#error Cannot receive SIGIO signals using ASYNC IO
#endif

  cout &lt;&lt; "Waiting to receive..." &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Press Ctrl C to terminate." &lt;&lt; "\n" &lt;&lt; flush;
  
  <FONT COLOR="#ff0000">// Loop while waiting for input</FONT>
  while(comSTOP == 0) {
    <FONT COLOR="#ff0000">// After receiving SIGIO check the wait_flag to see if input</FONT>
    <FONT COLOR="#ff0000">// is available and can be read</FONT>
    if(wait_flag == 0) {
      if(dev-&gt;RawRead((char *)buf, 255) &lt; 0) {
	<FONT COLOR="#ff0000">// Stop loop if an error occurs</FONT>
	cerr &lt;&lt; "\n" &lt;&lt; flush;
	cerr &lt;&lt; "Read error!" &lt;&lt; "\n" &lt;&lt; flush;
	cerr &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
	comSTOP = 1; 
      }
      buf[dev-&gt;BytesRead()] = 0; <FONT COLOR="#ff0000">// Null terminate the string</FONT>
      if(dumpfile) { <FONT COLOR="#ff0000">// Capture data to a file</FONT>
	outfile.df_Write((char *)buf, dev-&gt;BytesRead());
	outfile.df_Flush();
      }
      else { <FONT COLOR="#ff0000">// Write the data to the console</FONT>
	cout &lt;&lt; buf &lt;&lt; flush;
      }
      wait_flag = 1; <FONT COLOR="#ff0000">// Wait for new input </FONT>
    }
  }
}

void signal_handler_IO(int status)
<FONT COLOR="#ff0000">// Signal handler. Sets wait_flag to 0, to indicate the above loop that  </FONT>
<FONT COLOR="#ff0000">// characters have been received. </FONT>
{
  cout.flush();
  wait_flag = 0;
}

#endif <FONT COLOR="#ff0000">// __USE_SIGNAL_IO__</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
