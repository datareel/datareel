<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:38:50 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>ftpc example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 02/23/2001</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Test program for the embedded FTP client class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;stdlib.h&gt;
#include "gxsftp.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

int CheckError(gxsFTPClient *ftp, int close_on_err = 1)
{
  if(ftp-&gt;GetSocketError() != gxSOCKET_NO_ERROR) {
    cout &lt;&lt; ftp-&gt;SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    if(ftp-&gt;reply_buf[0] != 0) { <FONT COLOR="#ff0000">// Check the reply buffer</FONT>
      cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
    }
    if(close_on_err == 1) {
      ftp-&gt;Close();
    }
    return 0;
  }
  return 1; <FONT COLOR="#ff0000">// No errors reported</FONT>
}

void ClearInputStream(istream &amp;s)
<FONT COLOR="#ff0000">// Used to clear istream</FONT>
{
  char c;
  s.clear();
  while(s.get(c) &amp;&amp; c != '\n') { ; }
}

void Menu()
{
  cout &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(a)       Set image type to ASCII" &lt;&lt; "\n" &lt;&lt; flush;   
  cout &lt;&lt; "(A)       Set active mode on (default)" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(b, B)    Set image type to binary" &lt;&lt; "\n" &lt;&lt; flush;   
  cout &lt;&lt; "(c, C)    Change working directory" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(d, D)    Delete a file" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(h, H, ?) Display this menu" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(g, G)    Get a file" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(l)       Long directory listing" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(L)       Short directory listing" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(M, m)    Make a directory" &lt;&lt; "\n" &lt;&lt; flush;   
  cout &lt;&lt; "(n)       Long named directory listing" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(N)       Short named directory listing" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(p)       Put a file" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(P)       Set passive FTP mode on" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(q, Q)    Quit this program" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(r, R)    Remove directory" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(s, S)    Display statistics" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "(v, V)    Move a file" &lt;&lt; "\n" &lt;&lt; flush;   
  cout &lt;&lt; "(w, W)    Get working directory" &lt;&lt; "\n" &lt;&lt; flush;   
  cout &lt;&lt; "(z, Z)    Get a file size in bytes" &lt;&lt; "\n" &lt;&lt; flush;   
  cout &lt;&lt; "\n" &lt;&lt; flush;
}

void List(gxsFTPClient *ftp, int full)
{
  const int sbuf_size = 8192;
  char sbuf[sbuf_size];
  sbuf[0] = 0;
  ftp-&gt;FTPList(sbuf, sizeof(sbuf), full);
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; sbuf &lt;&lt; flush &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
}

void ListDir(gxsFTPClient *ftp, int full)
{
  char name[255];
  cout &lt;&lt; "Enter file or directory name&gt;";
  cin &gt;&gt; name;

  const int sbuf_size = 8192;
  char sbuf[sbuf_size];
  sbuf[0] = 0;
  ftp-&gt;FTPList(sbuf, sizeof(sbuf), full, name);
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; sbuf &lt;&lt; flush &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
}

void Stat(gxsFTPClient *ftp)
{
  ftp-&gt;FTPStat();
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
}

void PWD(gxsFTPClient *ftp)
{
  ftp-&gt;FTPPWD();
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
}

void ASC(gxsFTPClient *ftp)
{
  ftp-&gt;FTPImageType('A');
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
}

void Active(gxsFTPClient *ftp)
{
  ftp-&gt;FTPActive();
  cout &lt;&lt; "Passive mode off" &lt;&lt; "\n" &lt;&lt; flush;
}

void Passive(gxsFTPClient *ftp)
{
  ftp-&gt;FTPPassive();
  cout &lt;&lt; "Passive mode on" &lt;&lt; "\n" &lt;&lt; flush;
}

void BIN(gxsFTPClient *ftp)
{
  ftp-&gt;FTPImageType('B');
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
}

void ChDir(gxsFTPClient *ftp)
{
  char sbuf[255];
  cout &lt;&lt; "Enter directory name&gt;";
  cin &gt;&gt; sbuf;
  ftp-&gt;FTPChDir((const char *)sbuf);
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
}

void MkDir(gxsFTPClient *ftp)
{
  char sbuf[255];
  cout &lt;&lt; "Enter directory to make&gt;";
  cin &gt;&gt; sbuf;
  ftp-&gt;FTPMkDir((const char *)sbuf);
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
}

void RmDir(gxsFTPClient *ftp)
{
  char sbuf[255];
  cout &lt;&lt; "Enter directory to remove&gt;";
  cin &gt;&gt; sbuf;
  ftp-&gt;FTPRmDir((const char *)sbuf);
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
}

void Delete(gxsFTPClient *ftp)
{
  char sbuf[255];
  cout &lt;&lt; "Enter file name to delete&gt;";
  cin &gt;&gt; sbuf;
  ftp-&gt;FTPDelete((const char *)sbuf);
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
}

void Move(gxsFTPClient *ftp)
{
  char from[255]; char to[255];
  cout &lt;&lt; "Enter file name to rename&gt;";
  cin &gt;&gt; from;
  cout &lt;&lt; "Enter new name&gt;";
  cin &gt;&gt; to;
  ftp-&gt;FTPMove((const char *)from, (const char *)to);
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
}

void Size(gxsFTPClient *ftp)
{
  char sbuf[255];
  cout &lt;&lt; "Enter file name&gt;";
  cin &gt;&gt; sbuf;
  ftp-&gt;FTPSize((const char *)sbuf);
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
}

void Get(gxsFTPClient *ftp)
{
  char rfile[255]; char lfile[255];
  cout &lt;&lt; "Enter file name to download&gt;";
  cin &gt;&gt; rfile;
  cout &lt;&lt; "Enter local file name&gt;";
  cin &gt;&gt; lfile;

  <FONT COLOR="#ff0000">// Open the output and truncate if it already exists</FONT>
  DiskFileB stream(lfile, DiskFileB::df_READWRITE, DiskFileB::df_CREATE);
  if(!stream) {
    cout &lt;&lt; "Could not open the " &lt;&lt; lfile &lt;&lt; " output file" &lt;&lt; "\n" &lt;&lt; flush;
    return;
  }

  FAU_t bytes;
  ftp-&gt;FTPGet((const char *)rfile, stream, bytes);
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
  cout &lt;&lt; (long)bytes &lt;&lt; " bytes transferred" &lt;&lt; "\n" &lt;&lt; flush;  
}

void Put(gxsFTPClient *ftp)
{
  char rfile[255]; char lfile[255];
  cout &lt;&lt; "Enter file name to upload&gt;";
  cin &gt;&gt; lfile;
  cout &lt;&lt; "Enter remote file name&gt;";
  cin &gt;&gt; rfile;


  DiskFileB stream(lfile);
  if(!stream) {
    cout &lt;&lt; "Could not open the " &lt;&lt; lfile &lt;&lt; " input file" &lt;&lt; "\n" &lt;&lt; flush;
    return;
  }

  FAU_t bytes;
  ftp-&gt;FTPPut((const char *)rfile, stream, bytes);
  if(!CheckError(ftp, 0)) return;
  cout &lt;&lt; ftp-&gt;reply_buf &lt;&lt; flush;
  cout &lt;&lt; (long)bytes &lt;&lt; " bytes transfered" &lt;&lt; "\n" &lt;&lt; flush;
}

int main(int argc, char **argv)
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  if(argc &lt; 4) {
    cout &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " server username password [port]" 
         &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "server   = Your FTP server" &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "username = Your FTP account user name" &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "username = Your FTP account password" &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "port = Optional port number" &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "Example: " &lt;&lt; argv[0] 
         &lt;&lt; " ftp.xyz.com myname mypassword" &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  char *server = argv[1];
  char *username = argv[2];
  char *password = argv[3];
  unsigned short port = (unsigned short)21;
  if(argc == 5) port = atoi(argv[4]);

  gxsFTPClient ftp;
  ftp.SetTimeOut(60, 0); <FONT COLOR="#ff0000">// Set a long time for remote servers</FONT>

  cout &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Connecting to ftp server" &lt;&lt; "\n" &lt;&lt; flush;
  ftp.ConnectClient((const char *)server, port);
  if(!CheckError(&amp;ftp)) return 1;
  cout &lt;&lt; ftp.reply_buf &lt;&lt; flush;

  ftp.FTPLogin((const char *)username, (const char *)password);
  if(!CheckError(&amp;ftp)) return 1;
  cout &lt;&lt; ftp.reply_buf &lt;&lt; flush;

  char key;
  Menu();
  int rv = 1;

  while(rv) {
    if (!cin) { 
      ClearInputStream(cin); 
      if (!cin) {  
        cout &lt;&lt; "Input stream error" &lt;&lt; "\n" &lt;&lt; flush;
        return 0;
      }
    }
    cout &lt;&lt; '&gt;';
    cin &gt;&gt; key;
    if (!cin) continue;
    switch(key) {
      case '?' : Menu(); break;
      case 'a' : ClearInputStream(cin); ASC(&amp;ftp); break;
      case 'A' : ClearInputStream(cin); Active(&amp;ftp); break;
      case 'b' : case 'B' : ClearInputStream(cin); BIN(&amp;ftp); break;
      case 'c' : case 'C' : ClearInputStream(cin); ChDir(&amp;ftp); break;
      case 'd' : case 'D' : ClearInputStream(cin); Delete(&amp;ftp); break;
      case 'g' : case 'G' : ClearInputStream(cin); Get(&amp;ftp); break;
      case 'h' : case 'H' : Menu(); break;
      case 'l' : ClearInputStream(cin); List(&amp;ftp, 1); break;
      case 'L' : ClearInputStream(cin); List(&amp;ftp, 0); break;
      case 'm' : case 'M' : ClearInputStream(cin); MkDir(&amp;ftp); break;
      case 'n' : ClearInputStream(cin); ListDir(&amp;ftp, 1); break;
      case 'N' : ClearInputStream(cin); ListDir(&amp;ftp, 0); break;
      case 'p' : ClearInputStream(cin); Put(&amp;ftp); break;
      case 'P' : ClearInputStream(cin); Passive(&amp;ftp); break;
      case 'q' : case 'Q' : rv = 0; break;
      case 'r' : case 'R' : ClearInputStream(cin); RmDir(&amp;ftp); break;
      case 's' : case 'S' : ClearInputStream(cin); Stat(&amp;ftp); break;
      case 'v' : case 'V' : ClearInputStream(cin); Move(&amp;ftp); break;
      case 'w' : case 'W' : ClearInputStream(cin); PWD(&amp;ftp); break;
      case 'z' : case 'Z' : ClearInputStream(cin); Size(&amp;ftp); break;
      default:
        cout &lt;&lt; "Unrecognized command" &lt;&lt; "\n" &lt;&lt; flush;
        break;
    }
  }

  ftp.FTPLogout();
  if(!CheckError(&amp;ftp)) return 1;
  cout &lt;&lt; ftp.reply_buf &lt;&lt; flush;
  cout &lt;&lt; "\n" &lt;&lt; flush;
  ftp.Close();
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
