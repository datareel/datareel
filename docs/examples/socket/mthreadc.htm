<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:40:00 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>mthreadc example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: client.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 04/28/2000</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program used demonstrate the use of the gxSocket
class in a multi-threaded application.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include "m_thread.h"

<FONT COLOR="#ff0000">// --------------------------------------------------------------</FONT>
<FONT COLOR="#ff0000">// Globals</FONT>
<FONT COLOR="#ff0000">// --------------------------------------------------------------</FONT>
char *server_ip;
gxsPort_t port = 7;
int echo_loop = 1;
int num_clients = 1;
int packet_size = 1500;
<FONT COLOR="#ff0000">// --------------------------------------------------------------</FONT>

class ConsoleThread : public gxThread
{
public:
  ConsoleThread() { }
  ~ConsoleThread() { }

private:
  void *ThreadEntryRoutine(gxThread_t *thread);
};

class EchoThread : public gxThread
{
public:
  EchoThread() { }
  ~EchoThread() { }

private:
  void *ThreadEntryRoutine(gxThread_t *thread);
};

void *ConsoleThread::ThreadEntryRoutine(gxThread_t *thread)
{
  const int cmd_len = 255;
  char sbuf[cmd_len];
  
  while(1) {
    for(int i = 0; i &lt; cmd_len; i++) sbuf[i] = 0;
    cin &gt;&gt; sbuf;
    if(strcmp(sbuf, "quit") == 0) break;
    if(strcmp(sbuf, "exit") == 0) break;
    cout &lt;&lt; "Invalid command" &lt;&lt; "\n" &lt;&lt; flush;
    cout &lt;&lt; "Enter quit to exit" &lt;&lt; "\n" &lt;&lt; flush;
  }
  return (void *)0;
}

void *EchoThread::ThreadEntryRoutine(gxThread_t *thread)
{
  <FONT COLOR="#ff0000">// Extract the client number from the thread parameter</FONT>
  int num = *((int *)thread-&gt;GetThreadParm());
  char sbuf[255];
  sprintf(sbuf, "%i", num);

  PrintMessage("Constructing stream client ", sbuf);
  gxSocket client(SOCK_STREAM, port, server_ip);
  if(!client) {
    CheckSocketError(&amp;client);
    return (void *)0;
  }

  <FONT COLOR="#ff0000">// Connect to the server</FONT>
  if(client.Connect() &lt; 0) {
    CheckSocketError(&amp;client, "Could not connect to the server");
    client.Close();
    return (void *)0;
  }

  char *packet = new char[packet_size];

  while(echo_loop) {
    <FONT COLOR="#ff0000">// Blocking write used to send the packet to the server</FONT>
    int rv = client.Send((char *)packet, packet_size);
    if(rv &lt; 0) {
      if(client.GetSocketError() != gxSOCKET_TRANSMIT_ERROR) {
	CheckSocketError(&amp;client, "Error writing to server socket");
      }
      else {
	PrintMessage("Server has disconnected during a socket write");
      }
      delete[] packet;
      client.Close();
      return (void *)0;
    }
    
    int bytes_read = 0; <FONT COLOR="#ff0000">// Total bytes read</FONT>
 
    <FONT COLOR="#ff0000">// Read the bytes sent back from the server</FONT>
    while(bytes_read &lt; packet_size) {

      <FONT COLOR="#ff0000">// Block until the server sends some data</FONT>
      rv = client.RawRead((char *)packet, packet_size);
      if(rv &lt; 0) {
	if(client.GetSocketError() != gxSOCKET_RECEIVE_ERROR) {
	  CheckSocketError(&amp;client, "Error reading from server socket");
	}
	else {
	  PrintMessage("Server has disconnected during a socket read");
	}
	delete[] packet;
	client.Close();
	return (void *)0;
      }
      bytes_read += rv;
    }

    <FONT COLOR="#ff0000">// Client send and receive complete</FONT>
    
    <FONT COLOR="#ff0000">// Sleep to conserve CPU resources</FONT>
    mSleep(500); <FONT COLOR="#ff0000">// Sleep for 500 ms before sending the next packet</FONT>
  }

  client.Close();
  delete[] packet;
  return (void *)0;
}

int main(int argc, char **argv)
{
  if((argc &lt; 2) || (argc &gt; 5)) {
    cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] 
	 &lt;&lt; " server [port] [num_clients] [packet_size]" &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  server_ip = argv[1];
  if(argc &gt;= 3) port = (unsigned short)atoi(argv[2]);
  if(argc &gt;= 4) num_clients = (unsigned short)atoi(argv[3]);
  if(argc == 5) packet_size = (unsigned short)atoi(argv[4]);

  cout &lt;&lt; "Multi-client connection and bandwidth tester" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Connecting " &lt;&lt; num_clients &lt;&lt; " to " &lt;&lt; server_ip &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Data packet size minus overhead: " &lt;&lt; packet_size &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Press Enter to start test or C-Ctrl to exit" &lt;&lt; "\n" &lt;&lt; flush;
  cout &lt;&lt; "Enter quit to exit program after the entering connection test" 
       &lt;&lt; "\n" &lt;&lt; flush;

  EchoThread client;
  thrPool *client_pool = new thrPool;
  if(!client_pool) {
    cout &lt;&lt; "Could not allocate memory for the client thread pool" &lt;&lt; "\n" 
	 &lt;&lt; flush;
    cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }

  for(int i = 0; i &lt; num_clients; i++) {
    gxThread_t *client_thread = client.CreateThread(client_pool, 
						    (void *)&amp;i);
    if(client_thread-&gt;GetThreadError() != gxTHREAD_NO_ERROR) {
      cout &lt;&lt; client_thread-&gt;ThreadExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
      echo_loop = 0;
      client.DestroyThreadPool(client_pool, 0);
      return 1;
    }
    client.sSleep(1);
  }
  
  ConsoleThread console;
  gxThread_t *console_thread = console.CreateThread();
  if(console_thread-&gt;GetThreadError() != gxTHREAD_NO_ERROR) {
    cout &lt;&lt; console_thread-&gt;ThreadExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    echo_loop = 0;
    client.DestroyThreadPool(client_pool, 0);
    return 1;
  }
    
  if(console.JoinThread(console_thread) != 0) {
    cout &lt;&lt; "Could not join the console thread" &lt;&lt; "\n" &lt;&lt; flush;
  }

  <FONT COLOR="#ff0000">// Destroy the serial port receiver thread</FONT>
  cout &lt;&lt; "Stopping all client threads..." &lt;&lt; "\n" &lt;&lt; flush;
  echo_loop = 0;
  client.DestroyThreadPool(client_pool, 0);

  cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
  delete console_thread;
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
