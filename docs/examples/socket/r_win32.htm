<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:39:17 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>r_win32 example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: r_win32.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Code used by Win32 applications to read and write data to and
from a serial port using overlapped I/O.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

void PrintError(LPCSTR str)
{
  LPVOID lpMessageBuffer;
  int error = GetLastError();
  FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |
		FORMAT_MESSAGE_FROM_SYSTEM,
		NULL,
		error,
		MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
		(LPTSTR) &amp;lpMessageBuffer,
		0,
		NULL);
  cout &lt;&lt; str &lt;&lt; ": " &lt;&lt; error &lt;&lt; " " &lt;&lt; lpMessageBuffer &lt;&lt; "\n";
  LocalFree(lpMessageBuffer);
}

DWORD CALLBACK ConsoleThread(HANDLE h)
<FONT COLOR="#ff0000">// Starts a user input thread using the console.</FONT>
<FONT COLOR="#ff0000">// Takes console characters and sends them to the com port.</FONT>
{
  OVERLAPPED ov;
  HANDLE hconn = GetStdHandle(STD_INPUT_HANDLE);
  BOOL quit = FALSE;
  
  ZeroMemory(&amp;ov, sizeof(ov));
  ov.hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);
  if(ov.hEvent == INVALID_HANDLE_VALUE) {
    PrintError("CreateEvent failed");
    SetCommMask(h, 0);
    return 0;
  }
  
  SetConsoleMode(hconn, 0);
  cout &lt;&lt; "Waiting to receive..." &lt;&lt; "\n";
  cout &lt;&lt; "Press Esc to terminate." &lt;&lt; "\n";
  do {
    char buf[10];
    DWORD bytes_read = 0;
    
    <FONT COLOR="#ff0000">// Wait for user data</FONT>
    WaitForSingleObject(hconn, INFINITE);
    
    <FONT COLOR="#ff0000">// Read the console buffer</FONT>
    if(!ReadConsole(hconn, buf, sizeof(buf), &amp;bytes_read, NULL)) {
      PrintError("ReadConsole failed");
      quit  = TRUE;
    }
    if(bytes_read) {
      DWORD write;
      <FONT COLOR="#ff0000">// Check for Esc key</FONT>
      for(write=0; write &lt; bytes_read; write++) {
	<FONT COLOR="#ff0000">// Terminate when Esc key is pressed</FONT>
	if(buf[write] == 0x1b) {
	  quit = TRUE;
	  break;
	}
      }
      <FONT COLOR="#ff0000">// Send data to the serial device</FONT>
      if(write) {
	if(!WriteFile(h, buf, write, &amp;write, &amp;ov)) {
	  if(GetLastError() == ERROR_IO_PENDING) {
	    if(!GetOverlappedResult(h, &amp;ov, &amp;write, TRUE)) {
	      PrintError("GetOverlappedResult failed");
	      quit = TRUE;
	    }
	  }
	} else {
	  PrintError("WriteFile failed");
	  quit = TRUE;
	}
      }
    }
    
  } while(!quit);
  
  <FONT COLOR="#ff0000">// Signal the terminal thread to quit</FONT>
  SetCommMask(h, 0);
  
  return 0;
}

void SerialRead(gxSerialComm *dev, char *dumpfile = 0)
{
  DiskFileB outfile;
  if(dumpfile) {
    cout &lt;&lt; "Writing output to the " &lt;&lt; dumpfile &lt;&lt; " file" &lt;&lt; "\n";
    outfile.df_Open(dumpfile);
    if(!outfile) {
      cout &lt;&lt; "\n";
      cout &lt;&lt; "Cannot open the: " &lt;&lt; dumpfile &lt;&lt; " capture file"
	   &lt;&lt; "\n";
      cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
      cout &lt;&lt; "\n";
      return;
    }
  }

  HANDLE hconn = GetStdHandle(STD_OUTPUT_HANDLE);
  HANDLE h = dev-&gt;DeviceHandle();
  DWORD mask;
  DWORD id;
  OVERLAPPED ov;
    
  HANDLE hConsole = CreateThread(NULL, 0, ConsoleThread, h, 0, &amp;id);
  if(hConsole == INVALID_HANDLE_VALUE) {
    PrintError("CreateThread failed");
    return;
  }
  CloseHandle(hConsole);
  
  ZeroMemory(&amp;ov, sizeof(ov));

  <FONT COLOR="#ff0000">// Create event for overlapped I/O</FONT>
  ov.hEvent = CreateEvent(NULL, FALSE, FALSE, NULL);
  if(ov.hEvent == INVALID_HANDLE_VALUE)
    PrintError("CreateEvent failed");
  
  <FONT COLOR="#ff0000">// Wait for received characters</FONT>
  if(!SetCommMask(h, EV_RXCHAR))
    PrintError("SetCommMask failed");
  
  while(1) {
    <FONT COLOR="#ff0000">// Get the event mask</FONT>
    if(!WaitCommEvent(h, &amp;mask, &amp;ov)) {
      DWORD e = GetLastError();
      if(e == ERROR_IO_PENDING) {
	DWORD r;
	if(!GetOverlappedResult(h, &amp;ov, &amp;r, TRUE)) {
	  PrintError("GetOverlappedResult failed");
	  break;
	}
      } else {
	PrintError("WaitCommEvent failed");
	break;
      }
    }
    
    <FONT COLOR="#ff0000">// If no event, then UI thread terminated with SetCommMask(h, 0)</FONT>
    if(mask == 0) {
      break;
    }

    if(mask &amp; EV_RXCHAR) {
      char buf[10];
      DWORD bytes_read;
      do {
	bytes_read = 0;
	if(!ReadFile(h, buf, sizeof(buf), &amp;bytes_read, &amp;ov)) {
	  if(GetLastError() == ERROR_IO_PENDING) {
	    if(!GetOverlappedResult(h, &amp;ov, &amp;bytes_read, TRUE)) {
	      PrintError("GetOverlappedResult failed");
	      break;
	    }
	  } else {
	    PrintError("ReadFile failed");
	    break;
	  }
	}
	if(bytes_read) {
	  if(dumpfile) { <FONT COLOR="#ff0000">// Capture the data to a file</FONT>
	    outfile.df_Write((char *)buf, bytes_read);
	    outfile.df_Flush();
	  }
	  else <FONT COLOR="#ff0000">// Write the data to the console</FONT>
	    WriteFile(hconn, buf, bytes_read, &amp;bytes_read, NULL);
	}
      } while(bytes_read);
    }
    mask = 0;
  }
  outfile.df_Close();
  CloseHandle(ov.hEvent);  <FONT COLOR="#ff0000">// Close the event</FONT>
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
