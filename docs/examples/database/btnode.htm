<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:31:47 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>btnode example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 08/22/2000 </FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program for the B-tree node class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "btnode.h"
#include "gxdbase.h"

<FONT COLOR="#ff0000">// Set the node order and maximum key size for this key class</FONT>
const BtreeNodeOrder_t MyKeyClassOrder = 8;
const __WORD__ MyKeyNameSize = 26;

<FONT COLOR="#ff0000">// Key class for this database</FONT>
class MyKeyClass : public DatabaseKeyB
{
public:
  MyKeyClass();
  MyKeyClass(const char *name);
  void operator=(const char *name);
  ~MyKeyClass() { }

public: <FONT COLOR="#ff0000">// Base class interface</FONT>
  size_t KeySize() { return sizeof(key_name); }
  int operator==(const DatabaseKeyB&amp; key) const;
  int operator&gt;(const DatabaseKeyB&amp; key) const;
  
  <FONT COLOR="#ff0000">// NOTE: This comparison function is only used if the </FONT>
  <FONT COLOR="#ff0000">// __USE_SINGLE_COMPARE__ preprocessor directive is </FONT>
  <FONT COLOR="#ff0000">// defined when the program is compiled.</FONT>
  int CompareKey(const DatabaseKeyB&amp; key) const;

public: <FONT COLOR="#ff0000">// Persistent data member</FONT>
  char key_name[MyKeyNameSize];
};

MyKeyClass::MyKeyClass() : DatabaseKeyB((char *)key_name)
{
  for(int i = 0; i &lt; MyKeyNameSize; i++) key_name[i] = 0;
}

MyKeyClass::MyKeyClass(const char *name) : DatabaseKeyB((char *)key_name)
{
  for(int i = 0; i &lt; MyKeyNameSize; i++) key_name[i] = 0;
  strcpy(key_name, name);
}

void MyKeyClass::operator=(const char *name)
{
  for(int i = 0; i &lt; MyKeyNameSize; i++) key_name[i] = 0;
  strcpy(key_name, name);
}

int MyKeyClass::operator==(const DatabaseKeyB&amp; key) const
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return (strcmp(key_name, (char *)kptr-&gt;db_key) == 0);
}

int MyKeyClass::operator&gt;(const DatabaseKeyB&amp; key) const
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return (strcmp(key_name, (char *)kptr-&gt;db_key) &gt; 0);
}

int MyKeyClass::CompareKey(const DatabaseKeyB&amp; key) const
<FONT COLOR="#ff0000">// NOTE: This comparison function is only used if the </FONT>
<FONT COLOR="#ff0000">// __USE_SINGLE_COMPARE__ preprocessor directive is </FONT>
<FONT COLOR="#ff0000">// defined when the program is compiled.</FONT>
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return strcmp(key_name, (char *)kptr-&gt;db_key);
}

void PrintNode(BtreeNode &amp;n)
<FONT COLOR="#ff0000">// Print a Btree node.</FONT>
{
  MyKeyClass kbuf;
  BtreeKeyLocation_t key_location = (BtreeKeyLocation_t)0;
  for(BtreeKeyCount_t i = (BtreeKeyCount_t)0; i &lt; n.key_count; i++) {
    n.LoadKey(kbuf, key_location++);
    cout &lt;&lt; (char *)kbuf.key_name &lt;&lt; ' ' &lt;&lt; (long)kbuf.right_child &lt;&lt; ' ';
    <FONT COLOR="#ff0000">// NOTE: The right child FAU is cast to a long for compilers</FONT>
    <FONT COLOR="#ff0000">// with native 64-bit int ostream overloads</FONT>
  }
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Key count = " &lt;&lt; n.key_count &lt;&lt; "\n";
  cout &lt;&lt; "Left child = " &lt;&lt; (long)n.left_child &lt;&lt; "\n";
  <FONT COLOR="#ff0000">// NOTE: The left child FAU is cast to a long for compilers</FONT>
  <FONT COLOR="#ff0000">// with native 64-bit int ostream overloads</FONT>
}

void PausePrg()
<FONT COLOR="#ff0000">// Pause the program.</FONT>
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

gxDatabaseError WriteNode(gxDatabase *f, const BtreeNode &amp;n, FAU_t na)
<FONT COLOR="#ff0000">// Function used to write a Btree node to an open database file.</FONT>
<FONT COLOR="#ff0000">// Returns zero if successful or a non-zero value to indicate a</FONT>
<FONT COLOR="#ff0000">// failure. </FONT>
{
  gxDatabaseError rv;
  rv = f-&gt;Write(&amp;n.key_count, sizeof(n.key_count), na);
  if(rv != gxDBASE_NO_ERROR) return rv;
  rv = f-&gt;Write(&amp;n.left_child, sizeof(n.left_child));
  if(rv != gxDBASE_NO_ERROR) return rv;
  rv = f-&gt;Write(n.key_entries, (n.key_size * n.node_order));
  if(rv != gxDBASE_NO_ERROR) return rv;
  return rv;
}

gxDatabaseError ReadNode(gxDatabase *f, BtreeNode &amp;n, FAU_t na)
<FONT COLOR="#ff0000">// Function used to read a Btree node from an open database file.</FONT>
<FONT COLOR="#ff0000">// Returns zero if successful or a non-zero value to indicate a</FONT>
<FONT COLOR="#ff0000">// failure. </FONT>
{
  gxDatabaseError rv;
  rv = f-&gt;Read(&amp;n.key_count, sizeof(n.key_count), na);
  if(rv != gxDBASE_NO_ERROR) return rv;
  rv = f-&gt;Read(&amp;n.left_child, sizeof(n.left_child));
  if(rv != gxDBASE_NO_ERROR) return rv;
  rv = f-&gt;Read(n.key_entries, (n.key_size * n.node_order));
  if(rv != gxDBASE_NO_ERROR) return rv;
  return rv;
}

int main()
{
  MyKeyClass key, compare_key;

  cout &lt;&lt; "--------- Key and B-tree Node Statistics ---------" &lt;&lt; "\n";
  cout &lt;&lt; "Key name size     = " &lt;&lt; key.KeySize() &lt;&lt; "\n";
  cout &lt;&lt; "Database key size = " &lt;&lt; key.SizeOfDatabaseKey() &lt;&lt; "\n";
  cout &lt;&lt; "Key entry size    = "
       &lt;&lt; (key.SizeOfDatabaseKey() * (MyKeyClassOrder-1)) &lt;&lt; "\n";
  BtreeNode n(key.SizeOfDatabaseKey(), MyKeyClassOrder);
  cout &lt;&lt; "B-tree order      = " &lt;&lt; n.node_order &lt;&lt; "\n";
  cout &lt;&lt; "B-tree node size  = " &lt;&lt; n.SizeOfBtreeNode() &lt;&lt; "\n";

  PausePrg();
  
  BtreeKeyLocation_t key_location = (BtreeKeyLocation_t)0;
  int i, rv;
  const char *strings[7] = { <FONT COLOR="#ff0000">// Array matching the Btree order</FONT>
    "DOG", "CAT", "PIG", "COW", "FISH", "ZEBRA", "HORSE" 
  };

  cout &lt;&lt; "Inserting " &lt;&lt; n.node_order &lt;&lt; " entries into the Btree node"
       &lt;&lt; "\n";
  for(i = 0; i &lt; n.node_order; i++) {
    key = strings[i];

    rv = n.FindKeyLocation(key, compare_key, key_location);

    <FONT COLOR="#ff0000">// Do not insert duplicate keys</FONT>
    if(rv != 0) {
      key_location++;
      n.InsertDatabaseKey(key, key_location);
    }
  }

  cout &lt;&lt; "Reading back the database keys" &lt;&lt; "\n";
  PrintNode(n);

  PausePrg();
  
  cout &lt;&lt; "Testing database read/write operations" &lt;&lt; "\n";
  gxDatabase *f = new gxDatabase();
  f-&gt;Create("testfile.gxd");
  FAU_t node_address = f-&gt;Alloc(n.SizeOfBtreeNode());
  WriteNode(f, n, node_address);
  BtreeNode nbuf(key.SizeOfDatabaseKey(), MyKeyClassOrder);
  ReadNode(f, nbuf, node_address);
  PrintNode(nbuf);
  delete f;

  PausePrg();
  
  cout &lt;&lt; "Testing the delete function" &lt;&lt; "\n";
  n.DeleteDatabaseKey((BtreeKeyLocation_t)0);
  PrintNode(n);

  PausePrg();
  
  cout &lt;&lt; "Testing the split fucntion" &lt;&lt; "\n";
  BtreeNode r(key.SizeOfDatabaseKey(), MyKeyClassOrder);
  n.SplitNode(r, n.node_order/2);
  PrintNode(n);
  cout &lt;&lt; "\n";
  PrintNode(r);

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
