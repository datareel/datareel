<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:34:35 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>infohog1 example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/18/1997</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Test program for the InfoHog database API.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //   </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "fstring.h"
#include "infohog.h"
#include "gxfloat.h"
#include "ustring.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

<FONT COLOR="#ff0000">// Type definitions</FONT>
typedef FString Name_t;        <FONT COLOR="#ff0000">// String type</FONT>
typedef gxFLOAT64 Price_t;     <FONT COLOR="#ff0000">// Floating point type         </FONT>
typedef gxINT32 StockNumber_t; <FONT COLOR="#ff0000">// Integer type</FONT>

void PausePrg()
<FONT COLOR="#ff0000">// Function used to pause the program.</FONT>
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

void ClearInputStream(istream &amp;s)
<FONT COLOR="#ff0000">// Function used to clear the input stream.</FONT>
{
  char c;
  s.clear();
  while(s.get(c) &amp;&amp; c != '\n') { ; }
}

int Quit()
{
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
  return 0;
}

void InputData(Name_t &amp;key)
<FONT COLOR="#ff0000">// Function used to read a string from the input stream.</FONT>
{
  cout &lt;&lt; "Item name: ";
  cin &gt;&gt; key;
}

void DisplayItem(InfoHog&lt;Name_t&gt; &amp;infohog, int full = 1)
<FONT COLOR="#ff0000">// Function used to print a infohog list object to the stdout.</FONT>
{
  cout &lt;&lt; "\n";
  if(infohog.GetMember(0)) {
    cout &lt;&lt; "Item Name    = " &lt;&lt; (char *)infohog.GetMember(0) &lt;&lt; "\n";
  }
  if(full) {
    if(infohog.GetMember(1)) {
      cout &lt;&lt; "Stock Number = " 
	   &lt;&lt; *((StockNumber_t *)infohog.GetMember(1)) &lt;&lt; "\n";
    }
    if(infohog.GetMember(2)) {
      cout.setf(ios::showpoint | ios::fixed);
      cout.precision(2);
      cout &lt;&lt; "Price        = $" 
	   &lt;&lt; *((Price_t *)infohog.GetMember(2)) &lt;&lt; "\n";
    }
  }
}

void PrintBtreeHeader(POD *DB, unsigned index_number) 
{
  gxBtreeHeader hdr;
  UString intbuf;
  DB-&gt;Index(index_number)-&gt;ReadBtreeHeader(hdr);
  cout &lt;&lt; "B-tree header information" &lt;&lt; "\n";

  cout &lt;&lt; "Node order:      " &lt;&lt; hdr.node_order &lt;&lt; "\n";
  cout &lt;&lt; "Key size:        " &lt;&lt; hdr.key_size &lt;&lt; "\n";
  cout &lt;&lt; "Number of nodes: " &lt;&lt; hdr.n_nodes &lt;&lt; "\n";
  cout &lt;&lt; "B-tree height:   " &lt;&lt; hdr.btree_height &lt;&lt; "\n";
  intbuf &lt;&lt; clear &lt;&lt; (FAU_t)hdr.root;
  cout &lt;&lt; "Root Address:    " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Number of trees: " &lt;&lt; hdr.num_trees &lt;&lt; "\n";
  cout &lt;&lt; "\n";
}

void Menu()
<FONT COLOR="#ff0000">// Console based user menu.</FONT>
{
  cout &lt;&lt; "(A, a)    Add object to the database" &lt;&lt; "\n";
  cout &lt;&lt; "(B, b)    Build a test database" &lt;&lt; "\n";
  cout &lt;&lt; "(C)       Change data members" &lt;&lt; "\n";
  cout &lt;&lt; "(c)       Change object" &lt;&lt; "\n";
  cout &lt;&lt; "(D, d)    Delete object from the database" &lt;&lt; "\n";
  cout &lt;&lt; "(F, f)    Find item by name" &lt;&lt; "\n";          
  cout &lt;&lt; "(L, l)    List without using index file" &lt;&lt; "\n"; 
  cout &lt;&lt; "(H, h, ?) Help (prints this menu)" &lt;&lt; "\n";
  cout &lt;&lt; "(I, i)    List using the index file" &lt;&lt; "\n";
  cout &lt;&lt; "(Q, q)    Quit" &lt;&lt; "\n";
  cout &lt;&lt; "(S, s)    Display B-tree stats" &lt;&lt; "\n";
  cout &lt;&lt; "(X, x)    Compare the index file to the data file" &lt;&lt; "\n";
  cout &lt;&lt; "(Y, y)    Rebuild the index file" &lt;&lt; "\n";
}

void BuildDatabase(POD *DB)
<FONT COLOR="#ff0000">// Function used to build a test database.</FONT>
{
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  const int NUM_OBJECTS = 1000;
  int i = 0;
  InfoHog&lt;Name_t&gt; infohog(DB);

  char name[InfoHogNameLength];
  StockNumber_t stock_number = (StockNumber_t)2000;
  Price_t price = (Price_t)0.95;

  cout &lt;&lt; "Adding " &lt;&lt; NUM_OBJECTS &lt;&lt; " objects to the database..." &lt;&lt; "\n";
  for(i = 0; i &lt; NUM_OBJECTS; i++) {
    sprintf(name, "Item-%i", i);
    stock_number += i;
    price += i;
    Name_t key(name);
    if(!infohog.SetMember(&amp;key, sizeof(key), 0)) {
      cout &lt;&lt; "Could not set data member 0" &lt;&lt; "\n";
      return;
    }
    if(!infohog.SetMember(&amp;stock_number, sizeof(stock_number), 1)) {
      cout &lt;&lt; "Could not set data member 1" &lt;&lt; "\n";
      return;
    }
    if(!infohog.SetMember(&amp;price, sizeof(price), 2)) {
      cout &lt;&lt; "Could not set data member 2" &lt;&lt; "\n";
      return;
    }
    if(!infohog.WriteObject()) {
      cout &lt;&lt; "Could not add object number " &lt;&lt; i &lt;&lt; " to the database"
	   &lt;&lt; "\n";
      return;
    }
  }

  <FONT COLOR="#ff0000">// Flush the database files after a batch insert</FONT>
  DB-&gt;Flush();
}

void ListInOrder(POD *DB, unsigned index_number)
<FONT COLOR="#ff0000">// List the contents of the database using the index file.</FONT>
{
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  InfoHog&lt;Name_t&gt; infohog(DB);
  InfoHogKey&lt;Name_t&gt;key, compare_key;
  gxBtree *btx = DB-&gt;Index(index_number);
 
  <FONT COLOR="#ff0000">// Walk through the tree starting at the first key</FONT>
  if(btx-&gt;FindFirst(key)) {
    if(!infohog.ReadObject(key.ObjectID())) {
      cout &lt;&lt; "Error reading the object" &lt;&lt; "\n";
      return;
    }
    DisplayItem(infohog);
    
    while(btx-&gt;FindNext(key, compare_key)) {
      if(!infohog.ReadObject(key.ObjectID())) {
	cout &lt;&lt; "Error reading the object" &lt;&lt; "\n";
	return;
      }
      DisplayItem(infohog);
    }
  }
}

void ListInOrder(POD *DB)
<FONT COLOR="#ff0000">// List contents of the database without using the index file.</FONT>
{
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  FAU_t addr = (FAU_t)0;
  InfoHog&lt;Name_t&gt; infohog(DB);
  unsigned count = 0;
  ClearInputStream(cin); <FONT COLOR="#ff0000">// Clear input stream</FONT>
  while(1) {
    addr = DB-&gt;OpenDataFile()-&gt;FindFirstObject(addr);
    if(!addr) break;
    if(!infohog.ReadObject(addr)) {
      cout &lt;&lt; "Error reading the object" &lt;&lt; "\n";
      return;
    }
    DisplayItem(infohog);
    count++;
    if(count == 2) {
      PausePrg();
      count = 0;
    }
  }
}

void AddItem(POD *DB)
<FONT COLOR="#ff0000">// Function used to add an object to the database.</FONT>
{
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  Name_t key;
  InputData(key);

  InfoHog&lt;Name_t&gt; infohog(DB);
  infohog.SetMember(&amp;key, sizeof(key), 0);

  int exists = infohog.FindObject();

  if(exists) {
    cout &lt;&lt; "Item: " &lt;&lt; key &lt;&lt; " already exists" &lt;&lt; "\n";
    return;
  }

  int stock_number;
  double price;

  cout &lt;&lt; "Enter the items's stock number: ";
  cin &gt;&gt; stock_number;
  if(cin) {
    StockNumber_t sn = stock_number; 
    infohog.SetMember(&amp;sn, sizeof(StockNumber_t), 1);
    cout &lt;&lt; "Enter the items's price:       $";
    cin &gt;&gt; price;
  } 
  else {
    cout &lt;&lt; "Invalid entry. Object not added!" &lt;&lt; "\n";
    return;
  }
  if(cin) {
    Price_t p = price;
    infohog.SetMember(&amp;p, sizeof(Price_t), 2);
  }
  else {
    cout &lt;&lt; "Invalid entry. Object not added!" &lt;&lt; "\n";
    return;
  }
  
  ClearInputStream(cin);
  
  if(!infohog.WriteObject()) {
    cout &lt;&lt; "Could not add object to the database" &lt;&lt; "\n";
  }

  DB-&gt;Flush(); <FONT COLOR="#ff0000">// Flushing the database buffers following manual insertion</FONT>
}

void DeleteItem(POD *DB)
<FONT COLOR="#ff0000">// Function used to delete an object from the database.</FONT>
{
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  Name_t key;
  InputData(key);

  InfoHog&lt;Name_t&gt; infohog(DB);
  infohog.SetMember(&amp;key, sizeof(key), 0);
  if(!infohog.DeleteObject()) {
    cout &lt;&lt; "Could not find item: " &lt;&lt; key &lt;&lt; " in the database" &lt;&lt; "\n";
    return;
  }

  cout &lt;&lt; "Deleted item: " &lt;&lt; key &lt;&lt; "\n";

  DB-&gt;Flush(); <FONT COLOR="#ff0000">// Flushing the database buffers following manual deletion</FONT>
}

void FindItem(POD *DB)
<FONT COLOR="#ff0000">// Function used to find an object in the database.</FONT>
{
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  Name_t key;
  InputData(key);

  InfoHog&lt;Name_t&gt; infohog(DB);
  infohog.SetMember(&amp;key, sizeof(key), 0);

  if(!infohog.FindObject()) {
    cout &lt;&lt; "Could not find item: " &lt;&lt; key &lt;&lt; " in the database" 
	 &lt;&lt; "\n";
    return;
  }

  cout &lt;&lt; "Found item: " &lt;&lt; key &lt;&lt; "\n";
  
  if(!infohog.ReadObject()) {
    cout &lt;&lt; "Error reading the object" &lt;&lt; "\n";
    return;
  }
  DisplayItem(infohog); 
}

void Compare(POD *DB)
<FONT COLOR="#ff0000">// Function used to compare the contents of the data file to the</FONT>
<FONT COLOR="#ff0000">// index file.</FONT>
{
  if(!DB-&gt;UsingIndex()) {
    cout &lt;&lt; "This database is not using the indexing sub-system" &lt;&lt; "\n";
    return;
  }
  
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  InfoHog&lt;Name_t&gt; infohog(DB);
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Comparing the index file to the data file..." &lt;&lt; "\n";
  int rv = infohog.CompareIndex(0);
  if(!rv) {
    cout &lt;&lt; "The index file does not match the data file!" &lt;&lt; "\n";
    cout &lt;&lt; "The index file needs to be rebuilt." &lt;&lt; "\n";
    cout &lt;&lt; "\n";
    return;
  }

  cout &lt;&lt; "The index file checks good" &lt;&lt; "\n";
  cout &lt;&lt; "\n";
}

void Rebuild(POD *DB, const char *fname)
<FONT COLOR="#ff0000">// Function used to rebuild the index file if the index file</FONT>
<FONT COLOR="#ff0000">// entries no longer match the data file entries.</FONT>
{
  if(!DB-&gt;UsingIndex()) return;
  
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  InfoHog&lt;Name_t&gt; infohog(DB);
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Rebuilding the index file..." &lt;&lt; "\n";

  <FONT COLOR="#ff0000">// Rebuild index number 0</FONT>
  int rv = infohog.RebuildIndexFile(fname, 0, 
				    InfoHogNumTrees, InfoHogNodeOrder);
  if(!rv) {
    cout &lt;&lt; "The index file was not rebuilt!" &lt;&lt; "\n";
    cout &lt;&lt; "\n";
    return;
  }

  cout &lt;&lt; "The index file was rebuilt." &lt;&lt; "\n";
  cout &lt;&lt; "A new index file named " &lt;&lt; fname &lt;&lt; " was created.";
  cout &lt;&lt; "\n";
}

void ChangeItem(POD *DB, int change_object = 1)
{
  Name_t key;
  InputData(key);
  
  InfoHog&lt;Name_t&gt; infohog(DB);
  infohog.SetMember(&amp;key, sizeof(key), 0);
  
  if(!infohog.FindObject()) {
    cout &lt;&lt; "Could not find item: " &lt;&lt; key &lt;&lt; " in the database" 
	 &lt;&lt; "\n";
    return;
  }
  
  cout &lt;&lt; "Found item: " &lt;&lt; key &lt;&lt; "\n";
  
  if(!infohog.ReadObject()) {
    cout &lt;&lt; "Error reading the object" &lt;&lt; "\n";
    return;
  }
  DisplayItem(infohog); 
  
  ClearInputStream(cin);
  cout &lt;&lt; "Entering changes to this object..." &lt;&lt; "\n";
  Name_t new_key;
  InputData(new_key);

  InfoHog&lt;Name_t&gt; infohog_new(DB);
  infohog_new.SetMember(&amp;new_key, sizeof(new_key), 0);

  int stock_number;
  double price;

  cout &lt;&lt; "Enter the items's stock number: ";
  cin &gt;&gt; stock_number;
  if(cin) {
    StockNumber_t sn = stock_number; 
    infohog_new.SetMember(&amp;sn, sizeof(StockNumber_t), 1);
    cout &lt;&lt; "Enter the items's price:       $";
    cin &gt;&gt; price;
  } 
  else {
    cout &lt;&lt; "Invalid entry. Object not added!" &lt;&lt; "\n";
    return;
  }
  if(cin) {
    Price_t p = price;
    infohog_new.SetMember(&amp;p, sizeof(Price_t), 2);
  }
  else {
    cout &lt;&lt; "Invalid entry. Object not added!" &lt;&lt; "\n";
    return;
  }
  
  ClearInputStream(cin);
  int find = 0;

  if(change_object) { <FONT COLOR="#ff0000">// Change the object</FONT>
    if(!infohog.ChangeObject(infohog_new, find)) {
      cout &lt;&lt; "Could not change this object" &lt;&lt; "\n";
      return;
    }
    return;
  }
  
  <FONT COLOR="#ff0000">// Change the object member by member</FONT>
  if(!infohog.ChangeMember(infohog_new.GetMember(0), 
  			   infohog_new.GetMemberLen(0), 0, find)) {
    cout &lt;&lt; "Could not change key member" &lt;&lt; "\n";
    return;
  }
  if(!infohog.ChangeMember(infohog_new.GetMember(1), 
			   infohog_new.GetMemberLen(1), 1, find)) {
    cout &lt;&lt; "Could not change member 1" &lt;&lt; "\n";
    return;
  }
  if(!infohog.ChangeMember(infohog_new.GetMember(2), 
			   infohog_new.GetMemberLen(2), 2, find)) {
    cout &lt;&lt; "Could not change member 2" &lt;&lt; "\n";
    return;
  }
}

int main(int argv, char **argc)
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  char rev_letter = gxDatabaseRevisionLetter; <FONT COLOR="#ff0000">// Set the default rev letter</FONT>
  if(argv == 2) { <FONT COLOR="#ff0000">// Set a specified revision letter</FONT>
    rev_letter = *argc[1];
    if(rev_letter == '0') rev_letter = '\0';
    <FONT COLOR="#ff0000">// Valid rev letters are:</FONT>
    <FONT COLOR="#ff0000">// Rev 0</FONT>
    <FONT COLOR="#ff0000">// Rev 'A' or 'a'</FONT>
    <FONT COLOR="#ff0000">// Rev 'B' or 'b'</FONT>
    <FONT COLOR="#ff0000">// Rev 'C' or 'c'</FONT>
    <FONT COLOR="#ff0000">// Rev 'D' or 'd'</FONT>
    <FONT COLOR="#ff0000">// Rev 'E' or 'e'</FONT>
    <FONT COLOR="#ff0000">// NOTE: The gxDatabase class will set invalid revision letters</FONT>
    <FONT COLOR="#ff0000">// to the version set by the gxDatabaseRevisionLetter constant.  </FONT>
  }

  InfoHogKey&lt;Name_t&gt; key_type;
  FStringCaseCompare = 0; <FONT COLOR="#ff0000">// Do not compare the case of FString objects</FONT>

  const char *data_file = "grocery.ihd";
  const char *index_file = "grocery.ihx";

  <FONT COLOR="#ff0000">// Create or open an existing database using a single index file</FONT>
  gxDatabaseAccessMode mode = gxDBASE_READWRITE;
  BtreeNodeOrder_t order = InfoHogNodeOrder;
  int num_trees = InfoHogNumTrees;
  int use_index = InfoHogUseIndexFile;
  FAU_t static_size = InfoHogStaticArea;
  __SBYTE__ df_rev_letter = rev_letter;
  __SBYTE__ if_rev_letter = rev_letter;
  
  POD pod;
  gxDatabaseError err = pod.Open(data_file, index_file, key_type,
				 order, mode, use_index, 
				 static_size, num_trees, df_rev_letter, 
				 if_rev_letter);

  <FONT COLOR="#ff0000">// Test for any errors</FONT>
  if(err != gxDBASE_NO_ERROR) {
    cout &lt;&lt; gxDatabaseExceptionMessage(err) &lt;&lt; "\n";
    return 1;
  }
  
  char c;
  int rv = 1;
  Menu();

  while(rv) {
    if (!cin) { 
      ClearInputStream(cin);
      if (!cin) { 
	cout &lt;&lt; "Input stream error" &lt;&lt; "\n";
	return 0;
      }
    }
    cout &lt;&lt; '&gt;';
    cin &gt;&gt; c;
    if (!cin) continue;
    switch(c) {
      case 'a' : case 'A' : 
	ClearInputStream(cin); AddItem(&amp;pod); 
	break;
      case 'b' : case 'B' : 
	BuildDatabase(&amp;pod); 
	break;
      case 'c' :
	ClearInputStream(cin); ChangeItem(&amp;pod); 
	break;
      case 'C' :
	ClearInputStream(cin); ChangeItem(&amp;pod, 0); 
	break;
      case 'd' : case 'D' : 
	ClearInputStream(cin); DeleteItem(&amp;pod); 
	break;
      case 'f' : case 'F' : 
	ClearInputStream(cin); FindItem(&amp;pod); 
	break;
      case 'l' : case 'L' : 
	ListInOrder(&amp;pod); 
	break;	 
      case 'i' : case 'I' : 
	ListInOrder(&amp;pod, 0); 
	break;
      case 'h' : case 'H' : case '?' : Menu(); break;
      case 'q' : case 'Q' : rv = Quit(); break;
      case 's' : case 'S' : PrintBtreeHeader(&amp;pod, 0); break;
      case 'x' : case 'X' : 
	Compare(&amp;pod); break;
      case 'y' : case 'Y' : 
	Rebuild(&amp;pod, "newindex.ihx"); break;
      default:
        cout &lt;&lt; "Unrecognized command" &lt;&lt; "\n";
    }
  }

  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
