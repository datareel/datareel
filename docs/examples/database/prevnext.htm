<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:34:14 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>prevnext example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 02/04/1997  </FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

gxDatabase linear navigation test.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include "gxdbase.h"
#include "gxfloat.h"
#include "gxdstats.h"
#include "ustring.h"

const int name_length = 16;

class DatabaseObject
{ 
public:
  DatabaseObject() { name[0] = 0; oid = (gxINT32)0, cid = (gxFLOAT64)0; }
  DatabaseObject(const char *s, long i, double d);

public:
  friend void *operator new(size_t n, char *s, int i, double d,
			    gxDatabase *f) {
    void *ptr = new DatabaseObject(s, i, d);
    f-&gt;Write(ptr, n, f-&gt;Alloc(n));
    return ptr;
  }
  
public: <FONT COLOR="#ff0000">// Platform independent data members</FONT>
  char name[name_length]; <FONT COLOR="#ff0000">// Fixed string type</FONT>
  gxINT32 oid;            <FONT COLOR="#ff0000">// Integer type</FONT>
  gxFLOAT64 cid;          <FONT COLOR="#ff0000">// Floating point type</FONT>
};

DatabaseObject::DatabaseObject(const char *s, long i, double d)
{
  for(int j = 0; j &lt; name_length; j++) name[j] = 0; <FONT COLOR="#ff0000">// Clear the name string</FONT>
  strcpy(name, s);
  oid = i;  
  cid = d;
}

void PausePrg()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

int main()
<FONT COLOR="#ff0000">// Simple demo of how to use the file manager class.</FONT>
{
  gxDatabase *f = new gxDatabase;
  const char *fname = "prevnext.gxd";
  UString intbuf;

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Simple navigation demo." &lt;&lt; "\n";
  cout &lt;&lt; "Testing gx find functions..." &lt;&lt; "\n";
  const int num_to_add = 5;

  if(!gxDatabase::Exists(fname)) {
    cout &lt;&lt; "Creating new file..." &lt;&lt; "\n";
    f-&gt;Create(fname);
    if(CheckError(f) != 0) {
      delete f;
      return 1;
    }
    cout &lt;&lt; "Adding " &lt;&lt; num_to_add &lt;&lt; " objects..." &lt;&lt; "\n";
    for(long i = 0; i &lt; num_to_add; i++)
      new("Mouse", i, 2000.101, f) DatabaseObject;
    if(CheckError(f) != 0) {
      delete f;
      return 1;
    }
  }
  else {
    cout &lt;&lt; "Opening existing file..." &lt;&lt; "\n";
    f-&gt;Open(fname);
    if(CheckError(f) != 0) {
      delete f;
      return 1;
    }
  }

  PausePrg();
  DatabaseStats(f);
  PausePrg();

  cout &lt;&lt; "Walking through the file finding all blocks..." &lt;&lt; "\n";
  FAU_t block_address = 0;
  while(1) {
    block_address = f-&gt;FindFirstBlock(block_address);
    if(block_address == FAU_t(0)) break;
    intbuf &lt;&lt; clear &lt;&lt; block_address;
    cout &lt;&lt; "Found block at file address: " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
    block_address++; <FONT COLOR="#ff0000">// Offset the block address</FONT>
  }

  PausePrg();
  
  cout &lt;&lt; "Finding all blocks in reverse order..." &lt;&lt; "\n";
  block_address = f-&gt;GetEOF();
  while(1) {
    block_address = f-&gt;FindPrevBlock(block_address);
    if(block_address == FAU_t(0)) break;
    intbuf &lt;&lt; clear &lt;&lt; block_address;
    cout &lt;&lt; "Found block at file address: " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
    block_address++; <FONT COLOR="#ff0000">// Offset the block address</FONT>
  }

  PausePrg();

  cout &lt;&lt; "Walking through the file finding every object..." &lt;&lt; "\n";
  FAU_t object_address = 0;
  while(1) {
    object_address = f-&gt;FindFirstObject(object_address);
    if(object_address == FAU_t(0)) break;
    intbuf &lt;&lt; clear &lt;&lt; object_address;
    cout &lt;&lt; "Found object at file address: " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
    object_address++; <FONT COLOR="#ff0000">// Offset the block address</FONT>
  }

  PausePrg();

  cout &lt;&lt; "Finding every object in reverse order..." &lt;&lt; "\n";
  object_address = f-&gt;GetEOF();
  while(1) {
    object_address = f-&gt;FindPrevObject(object_address);
    if(object_address == FAU_t(0)) break;
    intbuf &lt;&lt; clear &lt;&lt; object_address;
    cout &lt;&lt; "Found object at file address: " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
    object_address++; <FONT COLOR="#ff0000">// Offset the block address</FONT>
  }
  
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
  f-&gt;Close();
  if(CheckError(f) != 0) {
    delete f;
    return 1;
  }

  delete f;
  return 0; 
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
