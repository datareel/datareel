<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:32:42 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>client example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: client.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This program is used to demonstrate how to stream database blocks
across a network connection.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include "gxstream.h"
#include "dbobject.h"

void ClearInputStream(istream &amp;s)
<FONT COLOR="#ff0000">// Used to clear istream</FONT>
{
  char c;
  s.clear();
  while(s.get(c) &amp;&amp; c != '\n') { ; }
}

void InputName(const char *mesg, DatabaseObjectData &amp;dbobject)
{
  cout &lt;&lt; mesg;
  char buf[gxMaxNameLength];
  for(int i = 0; i &lt; gxMaxNameLength; i++) buf[i] = 0;
  cin &gt;&gt; buf;
  strcpy(dbobject.name, buf);
}

void DisplayDatabaseObject(DatabaseObjectData &amp;dbobject, int full = 1)
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Database object name: " &lt;&lt; dbobject.name &lt;&lt; "\n";
  if(full) {
    cout &lt;&lt; "Database object OID:  " &lt;&lt; dbobject.oid &lt;&lt; "\n";
    cout.setf(ios::showpoint | ios::fixed);
    cout.precision(3);
    cout &lt;&lt; "Database object CID:  " &lt;&lt; dbobject.cid &lt;&lt; "\n";
    cout &lt;&lt; "\n";
  }
}

void PrgMenu()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "(a, A)    Add an object to the database" &lt;&lt; "\n";
  cout &lt;&lt; "(c, C)    Change an object in the database" &lt;&lt; "\n";
  cout &lt;&lt; "(d, D)    Delete an object in the database" &lt;&lt; "\n";
  cout &lt;&lt; "(f, F)    Find an object in the database" &lt;&lt; "\n";
  cout &lt;&lt; "(h, H, ?) Help (prints this menu)" &lt;&lt; "\n";
  cout &lt;&lt; "(k, K)    Shutdown the server" &lt;&lt; "\n";
  cout &lt;&lt; "(q, Q)    Quit this program" &lt;&lt; "\n";
  cout &lt;&lt; "\n";
}

void DeleteObject(int port, char *host)
{
  gxStream client;
  if(client.StreamClient(port, host) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n";
    client.Close();
    return;
  }

  cout &lt;&lt; "Deleting an object from the database" &lt;&lt; "\n";
  DatabaseObjectData dbobject;
  ClearInputStream(cin);
  InputName("Enter the name of the object to delete: ", dbobject);

  gxBlockHeader blk;
  blk.block_length = sizeof(DatabaseObjectData);

  if(client.DeleteBlock((char *)&amp;dbobject, blk) != 0) 
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n";

  client.Close();
}

void AddObject(int port, char *host)
{
  gxStream client;
  if(client.StreamClient(port, host) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n";
    client.Close();
    return;
  }

  DatabaseObjectData dbobject;
  ClearInputStream(cin);
  InputName("Enter the name of the new object: ", dbobject);
  int id;
  double cid;

  cout &lt;&lt; "Enter the object's id number: ";
  cin &gt;&gt; id;
  if(cin) {
    dbobject.oid = id;
    cout &lt;&lt; "Enter the object's class id number: ";
    cin &gt;&gt; cid;
  } 
  else {
    cout &lt;&lt; "Invalid entry. Object not added!" &lt;&lt; "\n";
    return;
  }
  if(cin) {
    dbobject.cid = cid;
  }
  else {
    cout &lt;&lt; "Invalid entry. Object not added!" &lt;&lt; "\n";
    return;
  }
  
  ClearInputStream(cin);

  cout &lt;&lt; "Sending a request to add the object" &lt;&lt; "\n";

  gxBlockHeader blk;
  blk.block_length = sizeof(DatabaseObjectData);

  if(client.AddBlock((char *)&amp;dbobject, blk) != 0) 
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n";

  client.Close();
}

void ChangeObject(int port, char *host)
{
  gxStream client;
  if(client.StreamClient(port, host) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n";
    client.Close();
    return;
  }

  cout &lt;&lt; "Changing and object in the database" &lt;&lt; "\n";
  DatabaseObjectData dbobject;
  ClearInputStream(cin);
  InputName("Enter the name of the object to change: ", dbobject);

  DatabaseObjectData new_dbobject_info;
  InputName("Enter the object's new name: ", new_dbobject_info);
  int id;
  double cid;

  cout &lt;&lt; "Enter the object's new ID number: ";
  cin &gt;&gt; id;
  if(cin) {
    new_dbobject_info.oid = id;
    cout &lt;&lt; "Enter the object's new class ID: ";
    cin &gt;&gt; cid;
  } 
  else {
    cout &lt;&lt; "Invalid entry. Object not added!" &lt;&lt; "\n";
    return;
  }
  if(cin) {
    new_dbobject_info.cid = cid;
  }
  else {
    cout &lt;&lt; "Invalid entry. Object not added!" &lt;&lt; "\n";
    return;
  }
  
  ClearInputStream(cin);
  
  gxBlockHeader request_header;
  request_header.block_length = sizeof(DatabaseObjectData);

  gxBlockHeader block_header;
  block_header.block_length = sizeof(DatabaseObjectData);

  if(client.ChangeBlock((char *)&amp;dbobject, (char *)&amp;new_dbobject_info, 
			request_header, block_header) != 0) 
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n";

  client.Close();
}

void ShutDownServer(int port, char *host)
{
  gxStream client;
  if(client.StreamClient(port, host) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n";
    client.Close();
    return;
  }

  cout &lt;&lt; "Shutting down the server..." &lt;&lt; "\n";
  if(client.TerminateConnection() != 0) 
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n";
  client.Close();
}

void FindObject(int port, char *host)
{
  gxStream client;
  if(client.StreamClient(port, host) != 0) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n";
    client.Close();
    return;
  }

  cout &lt;&lt; "Searching the database" &lt;&lt; "\n";
  DatabaseObjectData dbobject;
  ClearInputStream(cin);
  InputName("Enter the name of the object to find: ", dbobject);

  gxBlockHeader request_header;
  request_header.block_length = sizeof(DatabaseObjectData);
  gxBlockHeader requested_block_header;
  request_header.block_length = sizeof(DatabaseObjectData);

  DatabaseObjectData *p = \
    (DatabaseObjectData *)client.RequestBlock((char *)&amp;dbobject,
					      request_header,
					      requested_block_header);
  if(!p) {
    cout &lt;&lt; client.SocketExceptionMessage() &lt;&lt; "\n";
    client.Close();
    return;
  }
  cout &lt;&lt; "Server has answered request" &lt;&lt; "\n";
  if(p-&gt;name[0] == 0) {
    cout &lt;&lt; "The dbobject was not found in the database" &lt;&lt; "\n";
  }
  else {
    cout &lt;&lt; "Found the requested object: " &lt;&lt; "\n";
    DisplayDatabaseObject(*(p));
  }

  delete p;
  client.Close();
}

int main(int argc, char **argv)
{
  if(argc &lt; 3) {
    cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " hostname port" &lt;&lt; "\n";
    return 1;
  }

  unsigned short port = (unsigned short) atoi(argv[2]);
  char *host = argv[1];

  char key;
  PrgMenu();
  int rv = 1;
  while(rv) {
    if (!cin) { 
      ClearInputStream(cin); 
      if (!cin) { 
	cout &lt;&lt; "Input stream error" &lt;&lt; "\n";
	return 0;
      }
    }
    cout &lt;&lt; '&gt;';
    cin &gt;&gt; key;
    if (!cin) continue; 
    switch(key) {
      case '?' : PrgMenu(); break;
      case 'h' : case 'H' : PrgMenu(); break;
      case 'q' : case 'Q' : rv = 0; break;

      case 'a' : case 'A' : 
	AddObject(port, host);
	break;
      case 'c' : case 'C' : 
	ChangeObject(port, host);
	break;
      case 'd' : case 'D' :  
	DeleteObject(port, host);
	break;
      case 'f' : case 'F' :
	FindObject(port, host);
	break;
      case 'k' : case 'K' : 
	ShutDownServer(port, host);
	break;
      default:
        cout &lt;&lt; "Unrecognized command" &lt;&lt; "\n";
    }
  }
 
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
