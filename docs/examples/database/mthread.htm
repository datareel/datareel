<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:34:30 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>mthread example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 05/17/2000</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program used demonstrate the use of the 32/64-bit
database engine in a multi-threaded application.

This example demonstrates file and record locking used with
single process threads. File and record locking via persistent
locks or lock headers are not required for single process threads
but are used here to demonstrate how file and record locking
could be used a multi-process/multi-machine environment.
Persistent locks provide a platform independent locking mechanism
signaling to threads in other process and processes running on
remote machines that the file or record is locked. The
multi-process thread or remote process is responsible for
reading the lock and acting accordingly. Single process threads
can omit persistent locks thorough the use of mutex locks and
condition variables.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //   </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include "gxthread.h"
#include "gxmutex.h"
#include "gxcond.h"
#include "gxdbase.h"
#include "gxdstats.h"

<FONT COLOR="#ff0000">// Constants</FONT>
const int NUM_THREADS = 26;
const int MAX_NUM_TRY = 3;
const int name_length = 16;
const char *name_string = "File Object ";

struct DatabaseObject {
  char name[name_length];
  int id;
};

<FONT COLOR="#ff0000">// Class used to perform multi-threaded reads</FONT>
class gxdReadThread : public gxThread
{
public:
  gxdReadThread(gxDatabase *gxdfile) { f = gxdfile; curr_offset = (FAU_t)0; }
  ~gxdReadThread() { }

private: <FONT COLOR="#ff0000">// Base class interface</FONT>
  void *ThreadEntryRoutine(gxThread_t *thread);

private:
  gxDatabase *f;       <FONT COLOR="#ff0000">// Pointer to the open database file</FONT>
  gxMutex offset_lock; <FONT COLOR="#ff0000">// Mutex used to serialize access to curr_offset</FONT>
  FAU_t curr_offset;   <FONT COLOR="#ff0000">// Current file position following a file read</FONT>
};

<FONT COLOR="#ff0000">// Class used to perform multi-threaded writes</FONT>
class gxdWriteThread : public gxThread
{
public:
  gxdWriteThread(gxDatabase *gxdfile) { f = gxdfile; }
  ~gxdWriteThread() { }

private: <FONT COLOR="#ff0000">// Base class interface</FONT>
  void *ThreadEntryRoutine(gxThread_t *thread);

private:
  gxMutex write_lock;     <FONT COLOR="#ff0000">// Mutex object used to lock the file</FONT>
  gxCondition write_cond; <FONT COLOR="#ff0000">// Condition variable used to block other threads</FONT>
  gxDatabase *f;          <FONT COLOR="#ff0000">// Pointer to the open database file</FONT>
};

void *gxdReadThread::ThreadEntryRoutine(gxThread_t *thread)
{
  offset_lock.MutexLock(); <FONT COLOR="#ff0000">// Serialize access to curr_offset</FONT>
  curr_offset = f-&gt;FindFirstObject(curr_offset);
  FAU_t block_address = curr_offset - f-&gt;BlockHeaderSize();
  if(curr_offset) {
    DatabaseObject ob;
    f-&gt;LockRecord(gxDBASE_READLOCK, block_address);
    f-&gt;Read(&amp;ob, sizeof(DatabaseObject), curr_offset);
    cout &lt;&lt; "Reading: \"" &lt;&lt; ob.name &lt;&lt; "\" at address: " &lt;&lt; (long)curr_offset 
	 &lt;&lt; "\n" &lt;&lt; flush;
    f-&gt;UnlockRecord(gxDBASE_READLOCK, block_address);
  }
  offset_lock.MutexUnlock();

  return 0;
}

void *gxdWriteThread::ThreadEntryRoutine(gxThread_t *thread)
<FONT COLOR="#ff0000">// Thread safe write function that will not allow access to</FONT>
<FONT COLOR="#ff0000">// the critical section until the write operation is complete.</FONT>
{
  DatabaseObject *ob = (DatabaseObject *)thread-&gt;GetThreadParm();

  write_lock.MutexLock();

  <FONT COLOR="#ff0000">// Tell other threads to wait until this write is complete</FONT>
  int num_try = 0;
  while(f-&gt;LockFile() != 0) {
    <FONT COLOR="#ff0000">// Block this thread from its own execution if a another thread</FONT>
    <FONT COLOR="#ff0000">// is writing to the file</FONT>
    if(++num_try &lt; MAX_NUM_TRY) {
      write_cond.ConditionWait(&amp;write_lock);
    }
    else {
      cout &lt;&lt; "Could not write object to the file.\n" &lt;&lt; flush;
      return 0;
    }
  }

  <FONT COLOR="#ff0000">// ********** Enter Critical Section ******************* //</FONT>
  f-&gt;Write(ob, sizeof(DatabaseObject), f-&gt;Alloc(sizeof(DatabaseObject)));
  <FONT COLOR="#ff0000">// ********** Leave Critical Section ******************* //</FONT>

  f-&gt;UnlockFile(); <FONT COLOR="#ff0000">// Tell other threads that this write is complete</FONT>
 
  <FONT COLOR="#ff0000">// Wake up the next thread waiting on this condition</FONT>
  write_cond.ConditionSignal();
  write_lock.MutexUnlock();

  return 0;
}

int main(int argv, char **argc)
{
  char rev_letter = 'D'; <FONT COLOR="#ff0000">// Set the revision letter</FONT>
  if(argv == 2) { <FONT COLOR="#ff0000">// Set a specified revision letter</FONT>
    rev_letter = *argc[1];
    if(rev_letter == '0') rev_letter = 0;
    <FONT COLOR="#ff0000">// Valid persistent record lock rev letters are:</FONT>
    <FONT COLOR="#ff0000">// Rev 'C' or 'c'</FONT>
    <FONT COLOR="#ff0000">// Rev 'D' or 'd'</FONT>
  }

  gxDatabase *f = new gxDatabase; 
  const char *fname = "testfile.gxd";
  f-&gt;Create(fname, (FAU_t)0, rev_letter); <FONT COLOR="#ff0000">// Persistent lock revision</FONT>
  if(CheckError(f) != 0) {
    delete f;
    return 1;
  }

  <FONT COLOR="#ff0000">// Initialize the multi-threaded database objects</FONT>
  gxdReadThread *read_thread = new gxdReadThread(f);
  gxdWriteThread *write_thread = new gxdWriteThread(f);

  <FONT COLOR="#ff0000">// Arrays used to hold the read and write threads</FONT>
  gxThread_t *wthreads[NUM_THREADS];
  gxThread_t *rthreads[NUM_THREADS];

  int i, j;
  cout &lt;&lt; "Writing " &lt;&lt; NUM_THREADS &lt;&lt; " objects to the " &lt;&lt; fname &lt;&lt; " file"
       &lt;&lt; "\n";
  DatabaseObject *ob_ptr[NUM_THREADS];

  for(i = 0; i &lt; NUM_THREADS; i++) {
    DatabaseObject *ob = new DatabaseObject; <FONT COLOR="#ff0000">// Persistent object</FONT>
    ob-&gt;id = 65+i;
    for(j = 0; j &lt; name_length; j++) ob-&gt;name[j] = 0;
    memmove(ob-&gt;name, name_string, strlen(name_string));
    ob-&gt;name[strlen(name_string)] = char(ob-&gt;id);
    wthreads[i] = write_thread-&gt;CreateThread((void *)ob);
    ob_ptr[i] = ob;
  }

  for(i = 0; i &lt; NUM_THREADS; i++) write_thread-&gt;JoinThread(wthreads[i]);
  cout &lt;&lt; "Write complete" &lt;&lt; "\n";
  
  cout &lt;&lt; "Verifing each object" &lt;&lt; "\n"; 
  cout &lt;&lt; "Press Enter to continue..." &lt;&lt; "\n";
  cin.get();
  for(i = 0; i &lt; NUM_THREADS; i++) {
    rthreads[i] = read_thread-&gt;CreateThread();
    read_thread-&gt;sSleep(1); <FONT COLOR="#ff0000">// Allow each thread time to print its message</FONT>
  }

  <FONT COLOR="#ff0000">// Wait for the read threads to complete</FONT>
  for(i = 0; i &lt; NUM_THREADS; i++) read_thread-&gt;JoinThread(rthreads[i]);

  <FONT COLOR="#ff0000">// Cleanup and release all the thread resources</FONT>
  for(i = 0; i &lt; NUM_THREADS; i++) write_thread-&gt;DestroyThread(wthreads[i]);
  for(i = 0; i &lt; NUM_THREADS; i++) read_thread-&gt;DestroyThread(rthreads[i]);

  delete write_thread; <FONT COLOR="#ff0000">// Release the write object's file pointer</FONT>
  delete read_thread;  <FONT COLOR="#ff0000">// Release the read object's file pointer</FONT>

  f-&gt;Close(); <FONT COLOR="#ff0000">// Close the file </FONT>
  if(CheckError(f) != 0) {
    delete f;
    return 1;
  }
  
  <FONT COLOR="#ff0000">// Free the memory allocated for the file pointer</FONT>
  delete f;

  <FONT COLOR="#ff0000">// Free the memory allocated for each database object pointer</FONT>
  for(i = 0; i &lt; NUM_THREADS; i++) delete ob_ptr[i];

  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
