<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:34:08 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>defrag example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 02/04/1997  </FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Test program used to test the gxDatabase::Reclaim() function
using the first-fit or best-fit method of reclaiming deleted
and removed blocks.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;time.h&gt;
#include "gxdbase.h"
#include "gxdstats.h"
#include "ustring.h"

void PausePrg()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

clock_t Start()
<FONT COLOR="#ff0000">// Mark the starting time for the routine.</FONT>
{
  return clock();
}

clock_t Stop()
<FONT COLOR="#ff0000">// Mark the stop time for the routine. </FONT>
{
  return clock();
}

double ElapsedTime(clock_t begin, clock_t end)
<FONT COLOR="#ff0000">// Calculate the elapsed time in milliseconds. </FONT>
{
  return (double)(end - begin) / CLOCKS_PER_SEC;
}

void DefragStats(gxDatabase *f)
{
  UString intbuf;
  FAU_t td, d, r, n, t;
  t = f-&gt;TotalBlocks();
  n = f-&gt;NormalBlocks();
  td = f-&gt;DeletedBlocks(&amp;d, &amp;r);
  
  cout &lt;&lt; "\n";
  
  intbuf &lt;&lt; clear &lt;&lt; t;
  cout &lt;&lt; "Number of blocks allocated: " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
  intbuf &lt;&lt; clear &lt;&lt; n;
  cout &lt;&lt; "Total blocks in use: " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
  intbuf &lt;&lt; clear &lt;&lt; d;
  cout &lt;&lt; "Total deleted/removed:  " &lt;&lt; intbuf.c_str() &lt;&lt; "/";
  intbuf &lt;&lt; clear &lt;&lt; r;
  cout &lt;&lt; intbuf.c_str() &lt;&lt; " (";
  intbuf &lt;&lt; clear &lt;&lt; td;
  cout &lt;&lt; intbuf.c_str() &lt;&lt; ")" &lt;&lt; "\n";
}

void TestReclaimMethod(gxDatabaseReclaimMethod reclaim_method,
		       char rev_letter)
{
  const int NumObjects = 100; <FONT COLOR="#ff0000">// Number of objects to allocate</FONT>
  const char *fname = "defrag.gxd";
  
  gxDatabase *f = new gxDatabase;

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Testing the best-fit/first-fit allocation methods." &lt;&lt; "\n";
  
  if(reclaim_method == gxDBASE_RECLAIM_BESTFIT) {
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Using the best-fit method to reclaim deleted/removed blocks."
       &lt;&lt; "\n";
  }
  else { 
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Using the first-fit method to reclaim deleted/removed blocks."
       &lt;&lt; "\n";
  }

  if(!gxDatabase::Exists(fname)) {
    cout &lt;&lt; "Creating new file..." &lt;&lt; "\n";
    f-&gt;Create(fname, (FAU_t)0, rev_letter);
    if(CheckError(f) != 0) {
      delete f;
      return;
    }
  }
  else {
    cout &lt;&lt; "Opening existing file..." &lt;&lt; "\n";
    f-&gt;Open(fname);
    if(CheckError(f) != 0) {
      delete f;
      return;
    }
  }

  PausePrg();
  DatabaseStats(f);
  PausePrg();

  FAU_t addr;

  FAU_t addr_list[NumObjects];
  char data = 'X';
  int i,j;

  cout &lt;&lt; "Adding " &lt;&lt; NumObjects &lt;&lt; " objects to the file." &lt;&lt; "\n";
  cout &lt;&lt; "Objects range from " &lt;&lt; sizeof(data) &lt;&lt; " to " &lt;&lt; NumObjects
       &lt;&lt; " bytes in length"
       &lt;&lt; "\n";
  cout &lt;&lt; "Writing..." &lt;&lt; "\n";
  
  clock_t Begin = Start();
  for(i = 0; i &lt; NumObjects; i++) {
    addr = f-&gt;Alloc(sizeof(data)+i, reclaim_method);
    addr_list[i] = addr; <FONT COLOR="#ff0000">// Store the address of each node allocated</FONT>
    for(j = 0; j &lt;= i; j++) {
      f-&gt;Write(&amp;data, sizeof(data), addr+j, 0, 0);
    }
  }
  clock_t End = Stop();

  cout.precision(3);
  cout &lt;&lt; "Comleted in " &lt;&lt; ElapsedTime(Begin, End) &lt;&lt; " seconds" &lt;&lt; "\n";
  DefragStats(f);
  PausePrg();
  
  cout &lt;&lt; "Deleting all the blocks allocated that were just allocated."
       &lt;&lt; "\n";
  cout &lt;&lt; "Working..." &lt;&lt; "\n";
  
  Begin = Start();
  for(i = 0; i &lt; NumObjects; i++) f-&gt;Delete(addr_list[i]);;
  End = Stop();
  
  cout.precision(3);
  cout &lt;&lt; "Comleted in " &lt;&lt; ElapsedTime(Begin, End) &lt;&lt; " seconds" &lt;&lt; "\n";
  DefragStats(f);
  PausePrg();
  
  cout &lt;&lt; "Fragmenting the file." &lt;&lt; "\n";
  cout &lt;&lt; "Undeleting every other block that was just deleted."
       &lt;&lt; "\n";
  cout &lt;&lt; "Working..." &lt;&lt; "\n";
  
  Begin = Start();
  for(i = 0; i &lt; NumObjects; i++) {
    f-&gt;UnDelete(addr_list[i]);
    i++; <FONT COLOR="#ff0000">// Skip to the next block</FONT>
  }
  End = Stop();
  
  cout.precision(3);
  cout &lt;&lt; "Comleted in " &lt;&lt; ElapsedTime(Begin, End) &lt;&lt; " seconds" &lt;&lt; "\n";
  DefragStats(f);
  PausePrg();
  
  cout &lt;&lt; "Adding " &lt;&lt; NumObjects &lt;&lt; " objects to the file." &lt;&lt; "\n";
  cout &lt;&lt; "All objects are " &lt;&lt; sizeof(data) &lt;&lt; " bytes in length."
       &lt;&lt; "\n";
  cout &lt;&lt; "Writing..." &lt;&lt; "\n";

  Begin = Start();
  for(i = 0; i &lt; NumObjects; i++) {
    f-&gt;Alloc(sizeof(data), reclaim_method);
    f-&gt;Write(&amp;data, sizeof(data), gxCurrAddress, 0, 0);
  }
  End = Stop();
  
  cout.precision(3);
  cout &lt;&lt; "Comleted in " &lt;&lt; ElapsedTime(Begin, End) &lt;&lt; " seconds" &lt;&lt; "\n";
  DefragStats(f);
  PausePrg();
  
  int offset = 1;
  cout &lt;&lt; "Adding " &lt;&lt; NumObjects &lt;&lt; " objects to the file." &lt;&lt; "\n";
  cout &lt;&lt; "Objects range from " &lt;&lt; (sizeof(data) + offset) &lt;&lt; " to "
       &lt;&lt; (NumObjects + offset) &lt;&lt; " bytes in length"
       &lt;&lt; "\n";
  cout &lt;&lt; "Writing..." &lt;&lt; "\n";

  Begin = Start();
  for(i = 0; i &lt; NumObjects; i++) {
    addr = f-&gt;Alloc((sizeof(data)+i)+offset, reclaim_method);
    for(j = 0; j &lt;= i; j++)
      f-&gt;Write(&amp;data, sizeof(data), (addr+j)+offset, 0, 0);
  }
  End = Stop();  

  cout.precision(3);
  cout &lt;&lt; "Comleted in " &lt;&lt; ElapsedTime(Begin, End) &lt;&lt; " seconds" &lt;&lt; "\n";
  DefragStats(f);

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
  f-&gt;Close();
  if(CheckError(f) != 0) return;
  delete f;
}

int main(int argv, char **argc)
{
  char rev_letter = gxDatabaseRevisionLetter; <FONT COLOR="#ff0000">// Set the default rev letter</FONT>
  if(argv == 2) { <FONT COLOR="#ff0000">// Set a specified revision letter</FONT>
    rev_letter = *argc[1];
    if(rev_letter == '0') rev_letter = '\0';
    <FONT COLOR="#ff0000">// Valid rev letters are:</FONT>
    <FONT COLOR="#ff0000">// Rev 0</FONT>
    <FONT COLOR="#ff0000">// Rev 'A' or 'a'</FONT>
    <FONT COLOR="#ff0000">// Rev 'B' or 'b'</FONT>
    <FONT COLOR="#ff0000">// Rev 'C' or 'c'</FONT>
    <FONT COLOR="#ff0000">// Rev 'D' or 'd'</FONT>
    <FONT COLOR="#ff0000">// Rev 'E' or 'e'</FONT>
    <FONT COLOR="#ff0000">// NOTE: The gxDatabase class will set invalid revision letters</FONT>
    <FONT COLOR="#ff0000">// to the version set by the gxDatabaseRevisionLetter constant.  </FONT>
  }

  TestReclaimMethod(gxDBASE_RECLAIM_BESTFIT, rev_letter);
  TestReclaimMethod(gxDBASE_RECLAIM_FIRSTFIT, rev_letter);
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
