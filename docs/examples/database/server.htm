<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:34:46 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>server example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: server.cpp</FONT>
<FONT COLOR="#ff0000">// C++ Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/20/1999</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
 
You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This program is used to demonstrate how to stream database blocks
across a network connection.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;stdlib.h&gt;
#include "gxstream.h"
#include "dbobject.h"

int FindObject(gxStream *server, gxBlockHeader &amp;blk,
	       DatabaseObject *dbobjectdb)
{
  cout &lt;&lt; "Client has queried the database" &lt;&lt; "\n" &lt;&lt; flush;
 
  if(server-&gt;ReadRemoteBlock((char *)dbobjectdb-&gt;p, blk) != 0) return 1;
  cout &lt;&lt; "Searching for: " &lt;&lt; dbobjectdb-&gt;p-&gt;name &lt;&lt; "\n" &lt;&lt; flush;
  
  FAU_t addr = dbobjectdb-&gt;FindObject();
  if(addr == (FAU_t)0) {
    cout &lt;&lt; "Did not find the object" &lt;&lt; "\n" &lt;&lt; flush;
    dbobjectdb-&gt;p-&gt;name[0] = 0;
    dbobjectdb-&gt;p-&gt;oid = (OID)0;
    dbobjectdb-&gt;p-&gt;cid = (CID)0;
  }
  else
    cout &lt;&lt; "Found the requested object" &lt;&lt; "\n" &lt;&lt; flush;

  cout &lt;&lt; "Sending search results to the client" &lt;&lt; "\n" &lt;&lt; flush;
  if(server-&gt;WriteRemoteBlock((char *)dbobjectdb-&gt;p,
			      sizeof(DatabaseObjectData))
     != 0) return 1;

  return 0;
}

int ChangeObject(gxStream *server, gxBlockHeader &amp;blk,
		 DatabaseObject *dbobjectdb)
{
  cout &lt;&lt; "Received a change object request" &lt;&lt; "\n" &lt;&lt; flush;
 
  <FONT COLOR="#ff0000">// Read the name of the object to be changed</FONT>
  if(server-&gt;ReadRemoteBlock((char *)dbobjectdb-&gt;p, blk) != 0) return 1;

  cout &lt;&lt; "Client requested a change to object: " &lt;&lt;
    dbobjectdb-&gt;p-&gt;name &lt;&lt; "\n" &lt;&lt; flush;

  DatabaseObjectData new_dbobject_info;
  gxBlockHeader block_header;

  <FONT COLOR="#ff0000">// Get the object's new info from the client </FONT>
  if(server-&gt;ReadClientHeader(block_header) != 0) return 1;
  if(server-&gt;ReadRemoteBlock((char *)&amp;new_dbobject_info, block_header) != 0)
    return 1;

  FAU_t addr = dbobjectdb-&gt;ChangeObject(new_dbobject_info);
  if(addr == (FAU_t)0) {
    cout &lt;&lt; "Change request denied: Did not find object in the database" 
	 &lt;&lt; "\n" &lt;&lt; flush;
    dbobjectdb-&gt;p-&gt;name[0] = 0;
    dbobjectdb-&gt;p-&gt;oid = (OID)0;
    dbobjectdb-&gt;p-&gt;cid = (CID)0;
  }
  else {
    cout &lt;&lt; "Object changed to: " &lt;&lt; dbobjectdb-&gt;p-&gt;name &lt;&lt; ", "
	 &lt;&lt; dbobjectdb-&gt;p-&gt;oid 
	 &lt;&lt; ", " &lt;&lt; dbobjectdb-&gt;p-&gt;cid &lt;&lt; "\n" &lt;&lt; flush;
  }
  return 0;
}

int AddObject(gxStream *server, gxBlockHeader &amp;blk,
	      DatabaseObject *dbobjectdb)
{
  cout &lt;&lt; "Adding an object" &lt;&lt; "\n" &lt;&lt; flush;
  if(server-&gt;ReadRemoteBlock(dbobjectdb-&gt;p, blk) != 0) return 1;
  dbobjectdb-&gt;WriteObject();
  cout &lt;&lt; dbobjectdb-&gt;p-&gt;name &lt;&lt; " added to the database" &lt;&lt; "\n" &lt;&lt; flush;
  return 0;
}

int DeleteObject(gxStream *server, gxBlockHeader &amp;blk,
		 DatabaseObject *dbobjectdb)
{
  cout &lt;&lt; "Deleting an object" &lt;&lt; "\n" &lt;&lt; flush;
  if(server-&gt;ReadRemoteBlock(dbobjectdb-&gt;p, blk) != 0) return 1;
  FAU_t addr = dbobjectdb-&gt;DeleteObject();
  if(addr == (FAU_t)0) { 
    cout &lt;&lt; "Could not find \"" &lt;&lt; dbobjectdb-&gt;p-&gt;name &lt;&lt; "\" in the database" 
	 &lt;&lt; "\n" &lt;&lt; flush;
  }
  else {
    cout &lt;&lt; "Deleted: " &lt;&lt; dbobjectdb-&gt;p-&gt;name &lt;&lt; "\n" &lt;&lt; flush;
  }
  return 0;
}

int main(int argc, char **argv)
{
  <FONT COLOR="#ff0000">// Check arguments. Should be only one: the port number to bind to.</FONT>
  if(argc != 2) {
    cerr &lt;&lt; "Usage: " &lt;&lt; argv[0] &lt;&lt; " port" &lt;&lt; "\n" &lt;&lt; flush;
    return 1;
  }
  
  DatabaseObject *dbobjectdb = new DatabaseObject; 
  cout &lt;&lt; "Initializing the database..." &lt;&lt; "\n" &lt;&lt; flush;
  const char *fname = "dbobject.gxd";

  if(!gxDatabase::Exists(fname)) {
    cout &lt;&lt; "Creating new file..." &lt;&lt; "\n" &lt;&lt; flush;
    dbobjectdb-&gt;Create(fname);
  }
  else {
    cout &lt;&lt; "Opening existing file..." &lt;&lt; "\n" &lt;&lt; flush;
    dbobjectdb-&gt;Open(fname);
  }

  gxStream server;
  gxsSocket_t remote_socket;
  unsigned short port = (unsigned short) atoi(argv[1]);

  cout &lt;&lt; "Initializing the database stream server..." &lt;&lt; "\n" &lt;&lt; flush;
  if(server.StreamServer(port) != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    delete dbobjectdb;
    return 1;
  }
  
  <FONT COLOR="#ff0000">// Get the host name assigned to this machine</FONT>
  char hostname[gxsMAX_NAME_LEN];
  if(server.HostName(hostname) != 0) {
    cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
    delete dbobjectdb;
    return 1;
  }
  cout &lt;&lt; "Opening database stream server on host " &lt;&lt; hostname 
       &lt;&lt; "\n" &lt;&lt; flush;

  int server_up = 1;
  while(server_up) { <FONT COLOR="#ff0000">// Loop until signaled to exit </FONT>
    cout &lt;&lt; "Listening on port " &lt;&lt; port &lt;&lt; "\n" &lt;&lt; flush;
    remote_socket = server.Accept(); <FONT COLOR="#ff0000">// Block until the next read.</FONT>
    if(remote_socket &lt; 0) {
      cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
      delete dbobjectdb;
      return 1;
    }

    <FONT COLOR="#ff0000">// Read the block following a client connection</FONT>
    gxBlockHeader blk;
    if(server.ReadClientHeader(blk) != 0) {
      cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
      delete dbobjectdb;
      return 1;
    }

    cout &lt;&lt; flush;
    
    <FONT COLOR="#ff0000">// Get the client info</FONT>
    char client_name[gxsMAX_NAME_LEN]; int r_port = -1;
    server.GetClientInfo(client_name, r_port);
    cout &lt;&lt; client_name &lt;&lt; " connecting on port " &lt;&lt; r_port &lt;&lt; "\n" &lt;&lt; flush;

    <FONT COLOR="#ff0000">// Read the status byte to determine what to do with this block</FONT>
    __ULWORD__ block_status = blk.block_status;
    __SBYTE__ status = (__SBYTE__)((block_status &amp; 0xFF00)&gt;&gt;8);

    switch(status) { 
      <FONT COLOR="#ff0000">// Process each block of data</FONT>
      case gxAcknowledgeBlock:
	cout &lt;&lt; "Received an acknowledge block command" &lt;&lt; "\n" &lt;&lt; flush;
	cout &lt;&lt; "Sending acknowledgment" &lt;&lt; "\n" &lt;&lt; flush;
	if(server.WriteRemoteAckBlock() != 0)
	  cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;	  
	server.CloseRemoteSocket();
	break;

      case gxAddRemoteBlock:
        if(AddObject(&amp;server, blk, dbobjectdb) != 0) 
	  cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
	server.CloseRemoteSocket();
	break;

      case gxChangeRemoteBlock:
        if(ChangeObject(&amp;server, blk, dbobjectdb) != 0) 
	  cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
	server.CloseRemoteSocket();
	break;

      case gxRequestBlock:
        if(FindObject(&amp;server, blk, dbobjectdb) != 0) 
	  cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
	server.CloseRemoteSocket();
	break;

      case gxDeleteRemoteBlock:
        if(DeleteObject(&amp;server, blk, dbobjectdb) != 0) 
	  cout &lt;&lt; server.SocketExceptionMessage() &lt;&lt; "\n" &lt;&lt; flush;
	server.CloseRemoteSocket();
	break;

      case gxSendBlock :  
	cout &lt;&lt; "Not excepting raw data blocks" &lt;&lt; "\n" &lt;&lt; flush;
	server.CloseRemoteSocket();
	break;

      case gxCloseConnection : 
	cout &lt;&lt; "Client sent a close connection command" &lt;&lt; "\n" &lt;&lt; flush;
	server.CloseRemoteSocket();
	break;

      case gxKillServer:
	cout &lt;&lt; "Client shutdown the server" &lt;&lt; "\n" &lt;&lt; flush;
	server_up = 0;
	break;
	
      default:
	cout &lt;&lt; "Received bad block command from client" &lt;&lt; "\n" &lt;&lt; flush;
	server.CloseRemoteSocket();
	break;
    }
  }

  dbobjectdb-&gt;Close();
  delete dbobjectdb;
  
  server.Close();
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n" &lt;&lt; flush;
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
