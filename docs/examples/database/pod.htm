<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:34:19 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>pod example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/18/1997</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program for the POD class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //   </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "pod.h"
#include "gxbtree.h"
#include "gxdstats.h"

const int NAME_LENGTH = 64;
const BtreeNodeOrder_t NODE_ORDER = 7;

struct DatabaseKey
{
  char object_name[NAME_LENGTH];
  FAU object_id;          
};

class DatabaseObject : public DatabaseKeyB
{ 
public:
  DatabaseObject();
  DatabaseObject(const char *name, FAU oid);

public: <FONT COLOR="#ff0000">// Base class interface</FONT>
  size_t KeySize() { return sizeof(primary_key); }
  int operator==(const DatabaseKeyB&amp; key) const;
  int operator&gt;(const DatabaseKeyB&amp; key) const;
  
  <FONT COLOR="#ff0000">// NOTE: This comparison function is only used if the </FONT>
  <FONT COLOR="#ff0000">// __USE_SINGLE_COMPARE__ preprocessor directive is </FONT>
  <FONT COLOR="#ff0000">// defined when the program is compiled.</FONT>
  int CompareKey(const DatabaseKeyB&amp; key) const;

public:
  DatabaseKey primary_key;
};

DatabaseObject::DatabaseObject() : DatabaseKeyB((char *)&amp;primary_key)
{
  for(int i = 0; i &lt; NAME_LENGTH; i++) 
    primary_key.object_name[i] = 0;
  primary_key.object_id = (FAU)0;
}

DatabaseObject::DatabaseObject(const char *name, FAU oid) : 
  DatabaseKeyB((char *)&amp;primary_key)
{
  strncpy(primary_key.object_name, name,  NAME_LENGTH);
  primary_key.object_name[NAME_LENGTH-1] = 0; <FONT COLOR="#ff0000">// Ensure null termination</FONT>
  primary_key.object_id = oid;
}

int DatabaseObject::operator==(const DatabaseKeyB&amp; key) const
{
  const DatabaseObject *kptr = (const DatabaseObject *)(&amp;key);
  int rv = strcmp(primary_key.object_name, kptr-&gt;primary_key.object_name);
  return ((rv == 0) &amp;&amp; (primary_key.object_id == kptr-&gt;primary_key.object_id));
}

int DatabaseObject::operator&gt;(const DatabaseKeyB&amp; key) const
{
  const DatabaseObject *kptr = (const DatabaseObject *)(&amp;key);
  int rv = strcmp(primary_key.object_name, kptr-&gt;primary_key.object_name);
  return ((rv &gt; 0) &amp;&amp; (primary_key.object_id &gt; kptr-&gt;primary_key.object_id));
}

int DatabaseObject::CompareKey(const DatabaseKeyB&amp; key) const
<FONT COLOR="#ff0000">// NOTE: This comparison function is only used if the </FONT>
<FONT COLOR="#ff0000">// __USE_SINGLE_COMPARE__ preprocessor directive is </FONT>
<FONT COLOR="#ff0000">// defined when the program is compiled.</FONT>
{
  const DatabaseObject *kptr = (const DatabaseObject *)(&amp;key);
  int rv = strcmp(primary_key.object_name, kptr-&gt;primary_key.object_name);
  if(rv == 0) {
    if(primary_key.object_id &gt; kptr-&gt;primary_key.object_id) return 1;
    if(primary_key.object_id &lt; kptr-&gt;primary_key.object_id) return -1;
  }
  return rv;
}

void PausePrg()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}
    
int main(int argv, char **argc)
{
  char rev_letter = gxDatabaseRevisionLetter; <FONT COLOR="#ff0000">// Set the default rev letter</FONT>
  if(argv == 2) { <FONT COLOR="#ff0000">// Set a specified revision letter</FONT>
    rev_letter = *argc[1];
    if(rev_letter == '0') rev_letter = '\0';
    <FONT COLOR="#ff0000">// Valid rev letters are:</FONT>
    <FONT COLOR="#ff0000">// Rev 0</FONT>
    <FONT COLOR="#ff0000">// Rev 'A' or 'a'</FONT>
    <FONT COLOR="#ff0000">// Rev 'B' or 'b'</FONT>
    <FONT COLOR="#ff0000">// Rev 'C' or 'c'</FONT>
    <FONT COLOR="#ff0000">// Rev 'D' or 'd'</FONT>
    <FONT COLOR="#ff0000">// Rev 'E' or 'e'</FONT>
    <FONT COLOR="#ff0000">// NOTE: The gxDatabase class will set invalid revision letters</FONT>
    <FONT COLOR="#ff0000">// to the version set by the gxDatabaseRevisionLetter constant.  </FONT>
  }

  const char *data_file1 = "testfile.gxd";
  const char *index_file1 = "testfile.btx";
  DatabaseObject key_type;

  <FONT COLOR="#ff0000">// Open the POD database using a single index file and check for any errors</FONT>
  POD pod;
  cout &lt;&lt; "Opening a POD database using a single index file" &lt;&lt; "\n";
  gxDatabaseAccessMode mode = gxDBASE_READWRITE;
  int num_trees = 1; <FONT COLOR="#ff0000">// Number of trees per index file</FONT>
  int use_index = 1;
  FAU_t static_size = (FAU_t)0;
  __SBYTE__ df_rev_letter = rev_letter;
  __SBYTE__ if_rev_letter = rev_letter;
  gxDatabaseError err = pod.Open(data_file1, index_file1, key_type,
				 NODE_ORDER, mode, use_index, static_size,
				 num_trees, df_rev_letter, if_rev_letter);
  if(CheckError(err) != 0) return 1; <FONT COLOR="#ff0000">// See the src/gxdstats.cpp file</FONT>

  <FONT COLOR="#ff0000">// Multiple index file test using the same key type and node order</FONT>
  const unsigned num_indexes = 5;
  unsigned index_number;

  <FONT COLOR="#ff0000">// Construct and initialize an index file name array</FONT>
  char *index_file2[POD_MAX_INDEX] = { 
    "idx0.btx", "idx1.btx", "idx2.btx", "idx3.btx", "idx4.btx" 
  };
  const char *data_file2 = "testdat2.gxd";

  cout &lt;&lt; "Opening a database using multiple index files with the \
same key type" &lt;&lt; "\n";
  err = pod.Open(data_file2, index_file2, num_indexes, key_type, NODE_ORDER,
		 mode, static_size, num_trees, df_rev_letter, if_rev_letter);
  if(CheckError(err) != 0) return 1;
  
  <FONT COLOR="#ff0000">// Multiple index file test using varying node orders.</FONT>
  <FONT COLOR="#ff0000">// NOTE: In this example varying node orders were used in place of</FONT>
  <FONT COLOR="#ff0000">// multiple key types because only one key class is defined.</FONT>
  cout &lt;&lt; "Opening a database using multiple index files with varying \
node order" &lt;&lt; "\n";
  const char *index_file3[num_indexes] = { 
    "idx5.btx", "idx6.btx", "idx7.btx", "idx8.btx", "idx9.btx" 
  };
  const char *data_file3 = "testdat3.gxd";
  PODIndexFile *openindexfile = new PODIndexFile(num_indexes);
  <FONT COLOR="#ff0000">// NOTE: The memory allocated for the openindexfile variable </FONT>
  <FONT COLOR="#ff0000">// will be freed when the POD opject is destroyed for the POD</FONT>
  <FONT COLOR="#ff0000">// file is closed. Following a Close() call you must allocate </FONT>
  <FONT COLOR="#ff0000">// new memory if the openindexfile varaible is reused.</FONT>

  for(index_number = 0; index_number &lt; num_indexes; index_number++) {
    err = openindexfile-&gt;Open(index_file3[index_number], index_number,
			      key_type, (NODE_ORDER+index_number), mode,
			      num_trees, if_rev_letter);
    if(CheckError(err) != 0) return 1;
  }
  
  err = pod.Open(data_file3, openindexfile, mode, static_size, df_rev_letter);
  if(CheckError(err) != 0) return 1;
  cout &lt;&lt; "\n";
  
  <FONT COLOR="#ff0000">// NOTE: The POD destructor will automatically delete the dynamically</FONT>
  <FONT COLOR="#ff0000">// allocated PODIndexFile file object.</FONT>
  return 0; 
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
