<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:32:58 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>dbcache1 example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 02/04/2002</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Database cache test program used to test the database file 
cache classes.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if !defined (__USE_DATABASE_CACHE__)
int main() { return 0; }
#else

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include &lt;time.h&gt;
#include "dbfcache.h"
#include "gxfloat.h"
#include "gxdbase.h"
#include "gxdstats.h"
#include "ustring.h"

#ifdef __MSVC_DEBUG__
#include "leaktest.h"
#endif

<FONT COLOR="#ff0000">// Various static data area sizes used to test large files</FONT>
const FAU_t STATIC_AREA_SIZE = 0;

<FONT COLOR="#ff0000">// 1 GIG file test                              </FONT>
<FONT COLOR="#ff0000">// WARNING: This test requires 1.1 GIG of free disk space</FONT>
<FONT COLOR="#ff0000">// const FAU_t STATIC_AREA_SIZE = (FAU_t)1100000000;</FONT>

<FONT COLOR="#ff0000">// 2.1 GIG file test                              </FONT>
<FONT COLOR="#ff0000">// WARNING: This test requires 2.1 GIG of free disk space</FONT>
<FONT COLOR="#ff0000">// const FAU_t STATIC_AREA_SIZE = (FAU_t)2100000000;</FONT>
                                                   
<FONT COLOR="#ff0000">// 2.3 GIG file test                              </FONT>
<FONT COLOR="#ff0000">// WARNING: This test requires 2.3 GIG of free disk space</FONT>
<FONT COLOR="#ff0000">// const __LLWORD__ STATIC_AREA_SIZE = (__LLWORD__)2147483647;</FONT>

<FONT COLOR="#ff0000">// 4 GIG file test</FONT>
<FONT COLOR="#ff0000">// WARNING: This test requires 4.3 GIG of free disk space</FONT>
<FONT COLOR="#ff0000">// const __LLWORD__ STATIC_AREA_SIZE = (__LLWORD__)4294967290;</FONT>

const int NAME_LENGTH = 64;

class DatabaseObject
{ 
public:
  DatabaseObject() { name[0] = 0; oid = (FAU)0, cid = (gxFLOAT64)0; }
  DatabaseObject(const char *s, long i, double d);

public:
  void DisplayObject();
  
public: <FONT COLOR="#ff0000">// Platform independent data members</FONT>
  char name[NAME_LENGTH]; <FONT COLOR="#ff0000">// Fixed string type</FONT>
  FAU oid;                <FONT COLOR="#ff0000">// Integer type</FONT>
  gxFLOAT64 cid;          <FONT COLOR="#ff0000">// Floating point type</FONT>
};

DatabaseObject::DatabaseObject(const char *s, long i, double d)
{
  for(int j = 0; j &lt; NAME_LENGTH; j++) name[j] = 0; <FONT COLOR="#ff0000">// Clear the name string</FONT>
  strcpy(name, s);
  oid = i;  
  cid = d;
}

void DatabaseObject::DisplayObject()
{
  cout &lt;&lt; "Database object name: " &lt;&lt; name &lt;&lt; "\n";
  cout &lt;&lt; "Database object OID:  " &lt;&lt; oid &lt;&lt; "\n";
  cout.setf(ios::showpoint | ios::fixed);
  cout.precision(3);
  cout &lt;&lt; "Database object CID:  " &lt;&lt; cid &lt;&lt; "\n";
}

void PausePrg()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

int main()
{
#ifdef __MSVC_DEBUG__
  InitLeakTest();
#endif

  <FONT COLOR="#ff0000">// Adjust this number to set the number of insertions</FONT>
  const unsigned long INSERTIONS = 1 * 1000;       <FONT COLOR="#ff0000">// 1K test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 10 * 1000;      // 10K test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 100 * 1000;     // 100K test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 1000 * 1000;    // 1MEG test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 10000 * 1000;   // 10MEG test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 100000 * 1000;  // 100MEG test</FONT>
  <FONT COLOR="#ff0000">// const unsigned long INSERTIONS = 1000000 * 1000; // 1GIG test</FONT>

  gxDatabase *f = new gxDatabase(); 
  const char *fname = "testfile.gxd";
  unsigned i;
  FAU static_area_size(STATIC_AREA_SIZE);
  DatabaseObject buf;
  UString intbuf;
  gxDatabaseSegment *ds;
  int echo_results = 0;

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Insertion time benchmark of the database engine." &lt;&lt; "\n";
  
  cout &lt;&lt; "Creating new file..." &lt;&lt; "\n";
  f-&gt;Create(fname, static_area_size);
  if(CheckError(f) != 0) {
    delete f;
    return 1;
  }

  const unsigned NUM_SEGMENTS = 10;
  gxDatabaseCache cache(NUM_SEGMENTS, f-&gt;GetFP());
  gxDBCacheNode p(&amp;cache);

  PausePrg();
  DatabaseStats(f);
  PausePrg();

  cout &lt;&lt; "Adding " &lt;&lt; INSERTIONS &lt;&lt; " objects to the database file..." 
       &lt;&lt; "\n";
  cout &lt;&lt; "Size of each object = " &lt;&lt; sizeof(DatabaseObject) &lt;&lt; "\n";
  PausePrg();
  
  unsigned long curr_count = 0;
  double insert_time = 0;
  
  <FONT COLOR="#ff0000">// Get CPU clock cycles before entering loop</FONT>
  clock_t begin = clock();

  for(i = 0; i &lt; INSERTIONS; i++) {
    <FONT COLOR="#ff0000">// Construct the database object</FONT>
    char name[NAME_LENGTH];
    sprintf(name, "Mouse %i", i);
    DatabaseObject ob(name, (FAU_t)i, 5000.101);

    clock_t begin_insert = clock();  

    <FONT COLOR="#ff0000">// Allocate room for the object in the data file</FONT>
    FAU_t object_address = f-&gt;Alloc(sizeof(DatabaseObject));
    if(CheckError(f) != 0) {
      delete f;
      return 1;
    }

    <FONT COLOR="#ff0000">// Write the object to the database file cache</FONT>
    ds = p.CachedWrite(&amp;ob, sizeof(DatabaseObject), object_address);
  
    intbuf &lt;&lt; clear &lt;&lt; object_address;
    if(ds) {
      if(echo_results) 
	cout &lt;&lt; "Writing object to FAU: " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
    }
    else {
      cout &lt;&lt; "Could not write object to FAU: " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
    }
    clock_t end_insert = clock();
    insert_time += (double)(end_insert - begin_insert) / CLOCKS_PER_SEC;
    curr_count++;

    if(CheckError(f) != 0) {
      delete f;
      return 1;
    }
    
    if(curr_count == 10000) {
      curr_count = 0;
      cout &lt;&lt; "Inserted " &lt;&lt; i &lt;&lt; " keys in " &lt;&lt; insert_time
	   &lt;&lt; " seconds" &lt;&lt; "\n";
    }
  }
  
  <FONT COLOR="#ff0000">// Get CPU clock cycles after loop is completed </FONT>
  clock_t end = clock();

  <FONT COLOR="#ff0000">// Calculate the elapsed time in seconds. </FONT>
  double elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3); 
  cout &lt;&lt; "Inserted " &lt;&lt; i &lt;&lt; " values in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";
  double avg_insert_time = (insert_time/(double)i) * 1000;
  cout &lt;&lt; "Average insert time = " &lt;&lt; avg_insert_time &lt;&lt; " milliseconds"  
       &lt;&lt; "\n"; 
  

  <FONT COLOR="#ff0000">// Testing flush functions after a batch insert</FONT>
  <FONT COLOR="#ff0000">//  cache.Flush();</FONT>

  PausePrg();

  cout &lt;&lt; "Reading " &lt;&lt; INSERTIONS &lt;&lt; " objects from the database file..." 
       &lt;&lt; "\n";
  PausePrg();

  double search_time = 0;  
  curr_count = 0;

  <FONT COLOR="#ff0000">// Obtain the offset to the first object in the database file</FONT>
  FAU offset = (f-&gt;GetHeapStart() + f-&gt;BlockHeaderSize());
  begin = clock();

  for(i = 0; i &lt; INSERTIONS; i++) {
    clock_t begin_search = clock();

    <FONT COLOR="#ff0000">// Read the object from the database file cache</FONT>
    ds = p.CachedRead(offset, sizeof(DatabaseObject));
    if(ds) {
      memmove(&amp;buf, p-&gt;ds.m_buf(), sizeof(DatabaseObject));
      if(echo_results) buf.DisplayObject();
    }
    else {
      intbuf &lt;&lt; clear &lt;&lt; offset;
      cout &lt;&lt; "Could not read the cached object at FAU: " &lt;&lt; intbuf.c_str()
	   &lt;&lt; "\n";
    }

    clock_t end_search = clock();
    search_time += (double)(end_search - begin_search) / CLOCKS_PER_SEC;
    if(CheckError(f) != 0) {
      delete f;
      return 1;
    }
    curr_count++;
    offset += (f-&gt;BlockHeaderSize() + sizeof(DatabaseObject)); 
    if(curr_count == 10000) {
      curr_count = 0;
      cout &lt;&lt; "Read " &lt;&lt; i &lt;&lt; " keys in " &lt;&lt; search_time
	   &lt;&lt; " seconds" &lt;&lt; "\n";
    }
  }
  
  end = clock();
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3);
  cout &lt;&lt; "Verified " &lt;&lt; i &lt;&lt; " values in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";
  double avg_search_time = (search_time/(double)i) * 1000;
  cout &lt;&lt; "Average search time = " &lt;&lt; avg_search_time &lt;&lt; " milliseconds"
       &lt;&lt; "\n";

  PausePrg();
  DatabaseStats(f);
  PausePrg();

  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";

  <FONT COLOR="#ff0000">// Flush the cache and release file the cache is bound to </FONT>
  <FONT COLOR="#ff0000">// before closing the file.</FONT>
  cache.Flush(); 
  cache.ReleaseFile();

  <FONT COLOR="#ff0000">// Close the file and check for any errors</FONT>
  f-&gt;Close();
  if(CheckError(f) != 0) {
    delete f;
    return 1;
  }
  delete f; <FONT COLOR="#ff0000">// Prevent any memory leaks</FONT>

  return 0; 
}

#endif <FONT COLOR="#ff0000">// __USE_DATABASE_CACHE__</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
