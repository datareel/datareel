<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:34:25 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>persist example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/18/1997</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program use to test the Persistent base class.

This example uses a fixed string as the key type and incorporates
an object ID and class ID into the data key. NOTE: The use a
fixed character string as a key type is intended to keep this
example as simple as possible and used for benchmarking
performance in the worst case scenario. Character strings are
hard to manipulate (in memory and on disk) and using the strcmp()
function is extremely slow.  

The object ID in this example is used to uniquely identify each
object in the B-tree index and record the object's location in
the data file. Using a data file address to ID objects guarantees
that each object will be unique.

The class ID in this example is an optional parameter used in
place of RTTI. This optional feature allows you determine the
object type without entering the object. When the Persistent base
class was originally developed in 1997 RTTI was not supported by
some C++ compilers so this feature was implemented to allow
applications to obtain type information and used by the Persistent 
base class to store objects from multiple classes in a single
database.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //   </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "grocery.h"

void PausePrg()
<FONT COLOR="#ff0000">// Function used to pause the program.</FONT>
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

void ClearInputStream(istream &amp;s)
<FONT COLOR="#ff0000">// Function used to clear the input stream.</FONT>
{
  char c;
  s.clear();
  while(s.get(c) &amp;&amp; c != '\n') { ; }
}

int Quit()
{
  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
  return 0;
}

char *InputData()
<FONT COLOR="#ff0000">// Function used to read a string from the input stream.</FONT>
<FONT COLOR="#ff0000">// Returns a null terminated string or a null value if an</FONT>
<FONT COLOR="#ff0000">// error occurs. NOTE: The calling function must free the</FONT>
<FONT COLOR="#ff0000">// memory allocated for this string.</FONT>
{
  char buf[MAX_NAME_LENGTH];
  for(unsigned i = 0; i &lt; MAX_NAME_LENGTH; i++) buf[i] = 0;
  cout &lt;&lt; "Item name: ";
  cin.getline(buf, sizeof(buf));
  char *s = new char[strlen(buf)+1]; <FONT COLOR="#ff0000">// Account for null terminator</FONT>
  if(!s) return 0;
  strcpy(s, buf);
  return s;
}

void DisplayItem(Grocery &amp;grocery, int full = 1)
<FONT COLOR="#ff0000">// Function used to print a grocery list object to the stdout.</FONT>
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Item's Name  = " &lt;&lt; grocery.Name() &lt;&lt; "\n";
  if(full) {
    cout &lt;&lt; "Stock Number = " &lt;&lt; grocery.StockNumber() &lt;&lt; "\n";
    cout.setf(ios::showpoint | ios::fixed);
    cout.precision(2);
    cout &lt;&lt; "Price        = $" &lt;&lt; grocery.Price() &lt;&lt; "\n";
    cout &lt;&lt; "\n";
  }
}

void AddItem(POD *DB)
<FONT COLOR="#ff0000">// Function used to add an object to the database.</FONT>
{
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  char *buf = InputData();

  Grocery grocery(DB);
  grocery.SetName((Name_t)buf);
  int exists = grocery.FindObject();

  if(exists) {
    cout &lt;&lt; "Item: " &lt;&lt; buf &lt;&lt; " already exists" &lt;&lt; "\n";
    delete buf;
    return;
  }

  int stock_number;
  double price;

  cout &lt;&lt; "Enter the items's stock number: ";
  cin &gt;&gt; stock_number;
  if(cin) {
    grocery.SetStockNumber(stock_number);
    cout &lt;&lt; "Enter the items's price:       $";
    cin &gt;&gt; price;
  } 
  else {
    cout &lt;&lt; "Invalid entry. Object not added!" &lt;&lt; "\n";
    delete buf;
    return;
  }
  if(cin) {
    grocery.SetPrice(price);
  }
  else {
    cout &lt;&lt; "Invalid entry. Object not added!" &lt;&lt; "\n";
    delete buf;
    return;
  }
  
  ClearInputStream(cin);
  
  if(!grocery.WriteObject()) {
    cout &lt;&lt; "Could not add object to the database" &lt;&lt; "\n";
  }
  delete buf;

  DB-&gt;Flush(); <FONT COLOR="#ff0000">// Flushing the database buffers following manual insertion</FONT>
}

void DeleteItem(POD *DB)
<FONT COLOR="#ff0000">// Function used to delete an object from the database.</FONT>
{
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  char *buf = InputData();

  Grocery grocery(DB);
  grocery.SetName((Name_t)buf);
  if(!grocery.DeleteObject()) {
    cout &lt;&lt; "Could not find item: " &lt;&lt; buf &lt;&lt; " in the database" &lt;&lt; "\n";
    delete buf;
    return;
  }

  cout &lt;&lt; "Deleted item: " &lt;&lt; buf &lt;&lt; "\n";
  delete buf;

  DB-&gt;Flush(); <FONT COLOR="#ff0000">// Flushing the database buffers following manual deletion</FONT>
}

void PrintBtreeHeader(POD *DB, unsigned index_number) 
{
  gxBtreeHeader hdr;
  DB-&gt;Index(index_number)-&gt;ReadBtreeHeader(hdr);
  cout &lt;&lt; "B-tree header information" &lt;&lt; "\n";

  cout &lt;&lt; "Node order:      " &lt;&lt; hdr.node_order &lt;&lt; "\n";
  cout &lt;&lt; "Key size:        " &lt;&lt; hdr.key_size &lt;&lt; "\n";
  cout &lt;&lt; "Number of nodes: " &lt;&lt; hdr.n_nodes &lt;&lt; "\n";
  cout &lt;&lt; "B-tree height:   " &lt;&lt; hdr.btree_height &lt;&lt; "\n";
  cout &lt;&lt; "Root Address:    " &lt;&lt; (long)hdr.root &lt;&lt; "\n";
  <FONT COLOR="#ff0000">// NOTE: The root node FAU is cast to a long for compilers</FONT>
  <FONT COLOR="#ff0000">// with native 64-bit int ostream overloads</FONT>
  cout &lt;&lt; "Number of trees: " &lt;&lt; hdr.num_trees &lt;&lt; "\n";
  cout &lt;&lt; "\n";
}

void ListInOrder(POD *DB, unsigned index_number)
<FONT COLOR="#ff0000">// List the contents of the database using the index file.</FONT>
{
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  Grocery grocery(DB);
  GroceryKey key, compare_key;
  gxBtree *btx = DB-&gt;Index(index_number);

  <FONT COLOR="#ff0000">// Walk through the tree starting at the first key</FONT>
  if(btx-&gt;FindFirst(key)) {
    if(!grocery.ReadObject(key.ObjectID())) {
      cout &lt;&lt; "Error reading the object" &lt;&lt; "\n";
      return;
    }
    DisplayItem(grocery);
    grocery.ClearName();
    
    while(btx-&gt;FindNext(key, compare_key)) {
      if(!grocery.ReadObject(key.ObjectID())) {
	cout &lt;&lt; "Error reading the object" &lt;&lt; "\n";
	return;
      }
      DisplayItem(grocery);
      grocery.ClearName();
    }
  }
}

void ListInOrder(POD *DB)
<FONT COLOR="#ff0000">// List contents of the database without using the index file.</FONT>
{
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  FAU_t addr = (FAU_t)0;
  Grocery grocery(DB);
  unsigned count = 0;
  ClearInputStream(cin); <FONT COLOR="#ff0000">// Clear input stream</FONT>
  while(1) {
    addr = DB-&gt;OpenDataFile()-&gt;FindFirstObject(addr);
    if(!addr) break;
    if(!grocery.ReadObject(addr)) {
      cout &lt;&lt; "Error reading the object" &lt;&lt; "\n";
      return;
    }
    DisplayItem(grocery);
    grocery.ClearName();
    count++;
    if(count == 2) {
      PausePrg();
      count = 0;
    }
  }
}

void FindItem(POD *DB)
<FONT COLOR="#ff0000">// Function used to find an object in the database.</FONT>
{
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  char *buf = InputData();

  Grocery grocery(DB);
  grocery.SetName((Name_t)buf);
  if(!grocery.FindObject()) {
    cout &lt;&lt; "Could not find item: " &lt;&lt; grocery.Name()
	 &lt;&lt; " in the database" &lt;&lt; "\n";
    delete buf;
    return;
  }

  cout &lt;&lt; "Found item: " &lt;&lt; buf &lt;&lt; "\n";
  delete buf;
  
  if(!grocery.ReadObject()) {
    cout &lt;&lt; "Error reading the object" &lt;&lt; "\n";
    grocery.ClearName(); <FONT COLOR="#ff0000">// Prevent memory leak</FONT>
    return;
  }
  DisplayItem(grocery);
  grocery.ClearName(); <FONT COLOR="#ff0000">// Prevent memory leak</FONT>
}

void BuildDatabase(POD *DB)
<FONT COLOR="#ff0000">// Function used to build a test database.</FONT>
{
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  const int NUM_OBJECTS = 1000;
  int i;
  Grocery grocery(DB);
  char name[MAX_NAME_LENGTH];
  int stock_number = 2000;
  double price = 0.95;

  cout &lt;&lt; "Adding " &lt;&lt; NUM_OBJECTS &lt;&lt; " objects to the database..." &lt;&lt; "\n";
  for(i = 0; i &lt; NUM_OBJECTS; i++) {
    sprintf(name, "Item %i", i);

    <FONT COLOR="#ff0000">// Set the item's name, stock number, price</FONT>
    grocery.SetName((Name_t)name);
    grocery.SetStockNumber(StockNumber_t(stock_number+i));
    grocery.SetPrice(Price_t(price+i));

    <FONT COLOR="#ff0000">// Write the grocery list item to the database</FONT>
    if(!grocery.WriteObject()) {
      cout &lt;&lt; "Could not add object number " &lt;&lt; i &lt;&lt; " to the database"
	   &lt;&lt; "\n";
      return;
    }
  }
  
  <FONT COLOR="#ff0000">// Flush the database files after a batch insert</FONT>
  DB-&gt;Flush();
}
 
void Menu()
<FONT COLOR="#ff0000">// Console based user menu.</FONT>
{
  cout &lt;&lt; "(A, a)    Add object to the database" &lt;&lt; "\n";
  cout &lt;&lt; "(B, b)    Build a test database" &lt;&lt; "\n";
  cout &lt;&lt; "(D, d)    Delete object from the database" &lt;&lt; "\n";
  cout &lt;&lt; "(F, f)    Find item by name" &lt;&lt; "\n";          
  cout &lt;&lt; "(L, l)    List without using index file" &lt;&lt; "\n"; 
  cout &lt;&lt; "(H, h, ?) Help (prints this menu)" &lt;&lt; "\n";
  cout &lt;&lt; "(I, i)    List using the index file" &lt;&lt; "\n";
  cout &lt;&lt; "(Q, q)    Quit" &lt;&lt; "\n";
  cout &lt;&lt; "(S, s)    Display B-tree stats" &lt;&lt; "\n";
  cout &lt;&lt; "(X, x)    Compare the index file to the data file" &lt;&lt; "\n";
  cout &lt;&lt; "(Y, y)    Rebuild the index file" &lt;&lt; "\n";
}

void Compare(POD *DB)
<FONT COLOR="#ff0000">// Function used to compare the contents of the data file to the</FONT>
<FONT COLOR="#ff0000">// index file.</FONT>
{
  if(!DB-&gt;UsingIndex()) {
    cout &lt;&lt; "This database is not using the indexing sub-system" &lt;&lt; "\n";
    return;
  }
  
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  Grocery grocery(DB);
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Comparing the index file to the data file..." &lt;&lt; "\n";
  int rv = grocery.CompareIndex(0);
  if(!rv) {
    cout &lt;&lt; "The index file does not match the data file!" &lt;&lt; "\n";
    cout &lt;&lt; "The index file needs to be rebuilt." &lt;&lt; "\n";
    cout &lt;&lt; "\n";
    return;
  }

  cout &lt;&lt; "The index file checks good" &lt;&lt; "\n";
  cout &lt;&lt; "\n";
}

void Rebuild(POD *DB, const char *fname)
<FONT COLOR="#ff0000">// Function used to rebuild the index file if the index file</FONT>
<FONT COLOR="#ff0000">// entries no longer match the data file entries.</FONT>
{
  if(!DB-&gt;UsingIndex()) return;
  
  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  DB-&gt;TestDatabase();

  Grocery grocery(DB);
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Rebuilding the index file..." &lt;&lt; "\n";
  <FONT COLOR="#ff0000">// Rebuild index number 0 with room for 1 tree header</FONT>
  int rv = grocery.RebuildIndexFile(fname, 0, 1, POD_DEFAULT_ORDER);
  if(!rv) {
    cout &lt;&lt; "The index file was not rebuilt!" &lt;&lt; "\n";
    cout &lt;&lt; "\n";
    return;
  }

  cout &lt;&lt; "The index file was rebuilt." &lt;&lt; "\n";
  cout &lt;&lt; "A new index file named " &lt;&lt; fname &lt;&lt; " was created.";
  cout &lt;&lt; "\n";
}

int main(int argv, char **argc)
{
  char rev_letter = gxDatabaseRevisionLetter; <FONT COLOR="#ff0000">// Set the default rev letter</FONT>
  if(argv == 2) { <FONT COLOR="#ff0000">// Set a specified revision letter</FONT>
    rev_letter = *argc[1];
    if(rev_letter == '0') rev_letter = '\0';
    <FONT COLOR="#ff0000">// Valid rev letters are:</FONT>
    <FONT COLOR="#ff0000">// Rev 0</FONT>
    <FONT COLOR="#ff0000">// Rev 'A' or 'a'</FONT>
    <FONT COLOR="#ff0000">// Rev 'B' or 'b'</FONT>
    <FONT COLOR="#ff0000">// Rev 'C' or 'c'</FONT>
    <FONT COLOR="#ff0000">// Rev 'D' or 'd'</FONT>
    <FONT COLOR="#ff0000">// Rev 'E' or 'e'</FONT>
    <FONT COLOR="#ff0000">// NOTE: The gxDatabase class will set invalid revision letters</FONT>
    <FONT COLOR="#ff0000">// to the version set by the gxDatabaseRevisionLetter constant.  </FONT>
  }

  const char *data_file = "grocery.gxd";
  const char *index_file = "grocery.btx";
  GroceryKey key_type;

  <FONT COLOR="#ff0000">// Create or open an existing database using a single index file</FONT>
  POD pod;

  gxDatabaseAccessMode mode = gxDBASE_READWRITE;
  BtreeNodeOrder_t order = POD_DEFAULT_ORDER;
  int num_trees = 1; <FONT COLOR="#ff0000">// Use one tree per index file</FONT>
  int use_index = 1;
  FAU_t static_size = (FAU_t)0;
  __SBYTE__ df_rev_letter = rev_letter;
  __SBYTE__ if_rev_letter = rev_letter;
  gxDatabaseError err = pod.Open(data_file, index_file, key_type,
				 order, mode, use_index, 
				 static_size, num_trees, df_rev_letter, 
				 if_rev_letter);
  <FONT COLOR="#ff0000">// Test for any errors</FONT>
  if(err != gxDBASE_NO_ERROR) {
    cout &lt;&lt; gxDatabaseExceptionMessage(err) &lt;&lt; "\n";
    return 1;
  }
  
  char c;
  int rv = 1;
  Menu();
  
  while(rv) {
    if (!cin) { 
      ClearInputStream(cin);
      if (!cin) { 
	cout &lt;&lt; "Input stream error" &lt;&lt; "\n";
	return 0;
      }
    }
    cout &lt;&lt; '&gt;';
    cin &gt;&gt; c;
    if (!cin) continue;
    switch(c) {
      case 'a' : case 'A' : ClearInputStream(cin); AddItem(&amp;pod); break;
      case 'b' : case 'B' : BuildDatabase(&amp;pod); break;
      case 'd' : case 'D' : ClearInputStream(cin); DeleteItem(&amp;pod); break;
      case 'f' : case 'F' : ClearInputStream(cin); FindItem(&amp;pod); break;
      case 'l' : case 'L' : ListInOrder(&amp;pod); break;	 
      case 'i' : case 'I' : ListInOrder(&amp;pod, 0); break;
      case 'h' : case 'H' : case '?' : Menu(); break;
      case 'q' : case 'Q' : rv = Quit(); break;
      case 's' : case 'S' : PrintBtreeHeader(&amp;pod, 0); break;
      case 'x' : case 'X' : Compare(&amp;pod); break;
      case 'y' : case 'Y' : Rebuild(&amp;pod, "newindex.btx"); break;

      default:
        cout &lt;&lt; "Unrecognized command" &lt;&lt; "\n";
    }
  }

  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
