<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:33:14 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>gxuint16 example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp </FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/05/1997  </FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program for the UINT16 class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_NATIVE_INT_TYPES__)
int main() { return 0; } <FONT COLOR="#ff0000">// No test for native types</FONT>
#else

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "gxuint16.h"

#if defined (__MSVC__)
#pragma warning(disable:4244) <FONT COLOR="#ff0000">// Function template instantiation warning</FONT>
#endif

const __SWORD__   SWORDPositiveLimit = 32767;
const __SWORD__   SWORDNegitiveLimit = 32768;
const __USWORD__  USWORDLimit        = 65535;

void PausePrg()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

void ClearInputStream(istream &amp;s)
<FONT COLOR="#ff0000">// Used to clear istream</FONT>
{
  char c;
  s.clear();
  while(s.get(c) &amp;&amp; c != '\n') { ; }
}

template&lt;class TYPEX, class TYPEY&gt;
inline void OperatorTest(TYPEX x, TYPEY y)
{
  char *tf[2] = {"FALSE", "TRUE"};
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Value x = " &lt;&lt; x &lt;&lt; ", Value y = " &lt;&lt; y &lt;&lt; "\n";
  TYPEX z;
  cout &lt;&lt; x &lt;&lt; " += " &lt;&lt; y &lt;&lt; " = "; z = x; z += y; cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " -= " &lt;&lt; y &lt;&lt; " = "; z = x; z -= y; cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " *= " &lt;&lt; y &lt;&lt; " = "; z = x; z *= y; cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " /= " &lt;&lt; y &lt;&lt; " = "; z = x; z /= y; cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " * " &lt;&lt; y &lt;&lt; " = " ; z = (x * y); cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " / " &lt;&lt; y &lt;&lt; " = " ; z = (x / y); cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " + " &lt;&lt; y &lt;&lt; " = " ; z = (x + y); cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " - " &lt;&lt; y &lt;&lt; " = " ; z = (x - y); cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " == " &lt;&lt; y &lt;&lt; " = " &lt;&lt; tf[(x == y)] &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " != " &lt;&lt; y &lt;&lt; " = " &lt;&lt; tf[(x != y)] &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " &lt;= " &lt;&lt; y &lt;&lt; " = " &lt;&lt; tf[(x &lt;= y)] &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " &gt;= " &lt;&lt; y &lt;&lt; " = " &lt;&lt; tf[(x &gt;= y)] &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " &lt; " &lt;&lt; y &lt;&lt; " = " &lt;&lt; tf[(x &lt; y)] &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; " &gt; " &lt;&lt; y &lt;&lt; " = " &lt;&lt; tf[(x &gt; y)] &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; "++ = "; z = x; z++; cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; x &lt;&lt; "-- = "; z = x; z--; cout &lt;&lt; z &lt;&lt; "\n"; 
  cout &lt;&lt; "++" &lt;&lt; x &lt;&lt; " = "; z = x; ++z; cout &lt;&lt; z &lt;&lt; "\n";
  cout &lt;&lt; "--" &lt;&lt; x &lt;&lt; " = "; z = x; --z; cout &lt;&lt; z &lt;&lt; "\n";
}

int main()
{
  gxUINT16 a = SWORDPositiveLimit;
  gxUINT16 b(SWORDNegitiveLimit);
  gxUINT16 c;

  c = USWORDLimit;
  cout &lt;&lt; "Assigning gxUINT16 unsigned limit: " &lt;&lt; c &lt;&lt; "\n";

  PausePrg();
  
  cout &lt;&lt; "Testing gxUINT16 copy consturctor..." &lt;&lt; "\n";
  gxUINT16 d(a);
  cout &lt;&lt; d &lt;&lt; "\n";

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Testing gxUINT16 assignment operator..." &lt;&lt; "\n";
  gxUINT16 e;
  e = a;
  cout &lt;&lt; e &lt;&lt; "\n";

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (gxUINT16, gxUINT16)..." &lt;&lt; "\n";
  __USWORD__ buf1, buf2, al, bl;
  
  cout &lt;&lt; "Enter first integer: ";
  cin &gt;&gt; buf1;
  if(cin) {
    a = buf1;
    al = buf1;
    cout &lt;&lt; "Enter second integer: ";
    cin &gt;&gt; buf2;
  }
  else {
    cout &lt;&lt; "Input stream broken. Exiting..." &lt;&lt; "\n";
    return 0;
  }
  if(cin) {
    b = buf2;
    bl = buf2;
  }
  else {
    cout &lt;&lt; "Input stream broken. Exiting..." &lt;&lt; "\n";
    return 0;
  }

  ClearInputStream(cin);
    
  cout &lt;&lt; "\n";
  
  OperatorTest(a, b);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (gxUINT16, __LWORD__)..." &lt;&lt; "\n";
  OperatorTest(a, bl);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (__LWORD__, gxUINT16)..." &lt;&lt; "\n";
  OperatorTest(al, b);
  
  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (gxUINT16, __WORD__)..." &lt;&lt; "\n";
  OperatorTest(a, (__WORD__)bl);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (__WORD__, gxUINT16)..." &lt;&lt; "\n";
  OperatorTest((__WORD__)al, b);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (gxUINT16, __SWORD__)..." &lt;&lt; "\n";
  OperatorTest(a, (__SWORD__)bl);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (__SWORD__, gxUINT16)..." &lt;&lt; "\n";
  OperatorTest((__SWORD__)al, b);

  PausePrg();
  
  cout &lt;&lt; "Testing overloaded operators (gxUINT16, __UWORD__)..." &lt;&lt; "\n";
  OperatorTest(a, (__UWORD__)bl);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (__UWORD__, gxUINT16)..." &lt;&lt; "\n";
  OperatorTest((__UWORD__)al, b);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (gxUINT16, __USWORD__)..." &lt;&lt; "\n";
  OperatorTest(a, (__USWORD__)bl);

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (__USWORD__, gxUINT16)..." &lt;&lt; "\n";
  OperatorTest((__USWORD__)al, b);

  PausePrg();
  
  cout &lt;&lt; "Testing overloaded operators (gxUINT16, __SBYTE__)..." &lt;&lt; "\n";
  OperatorTest(a, 'B');

  PausePrg();

  cout &lt;&lt; "Testing overloaded operators (__SBYTE__, gxUINT16)..." &lt;&lt; "\n";
  OperatorTest('A', b);

  return 0;
}

#if defined (__MSVC__)
#pragma warning(default:4244) <FONT COLOR="#ff0000">// Restore previous warning</FONT>
#endif

#endif <FONT COLOR="#ff0000">// __USE_NATIVE_INT_TYPES__</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>





</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
