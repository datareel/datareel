<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:31:58 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>checksum example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 02/04/1997  </FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

gxDatabase persistent checksum example.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#include &lt;iomanip.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include "gxdbase.h"
#include "gxfloat.h"
#include "gxdstats.h"

const int name_length = 16;

class DatabaseObject
{ 
public:
  DatabaseObject() { name[0] = 0; oid = (gxINT32)0, cid = (gxFLOAT64)0; }
  DatabaseObject(const char *s, long i, double d);

public:
  void DisplayObject();
  
public: <FONT COLOR="#ff0000">// Platform independent data members</FONT>
  char name[name_length]; <FONT COLOR="#ff0000">// Fixed string type</FONT>
  gxINT32 oid;            <FONT COLOR="#ff0000">// Integer type</FONT>
  gxFLOAT64 cid;          <FONT COLOR="#ff0000">// Floating point type</FONT>
};

DatabaseObject::DatabaseObject(const char *s, long i, double d)
{
  for(int j = 0; j &lt; name_length; j++) name[j] = 0; <FONT COLOR="#ff0000">// Clear the name string</FONT>
  strcpy(name, s);
  oid = i;  
  cid = d;
}

void DatabaseObject::DisplayObject()
{
  cout &lt;&lt; "Database object name: " &lt;&lt; name &lt;&lt; "\n";
  cout &lt;&lt; "Database object OID:  " &lt;&lt; oid &lt;&lt; "\n";
  cout.setf(ios::showpoint | ios::fixed);
  cout.precision(3);
  cout &lt;&lt; "Database object CID:  " &lt;&lt; cid &lt;&lt; "\n";
}

void PausePrg()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

int main(int argv, char **argc)
{
  char rev_letter = 'D'; <FONT COLOR="#ff0000">// Set the revision letter</FONT>
  if(argv == 2) { <FONT COLOR="#ff0000">// Set a specified revision letter</FONT>
    rev_letter = *argc[1];
    if(rev_letter == '0') rev_letter = 0;
    <FONT COLOR="#ff0000">// Valid persistent record lock rev letters are:</FONT>
    <FONT COLOR="#ff0000">// Rev 'A' or 'a'</FONT>
    <FONT COLOR="#ff0000">// Rev 'B' or 'b'</FONT>
    <FONT COLOR="#ff0000">// Rev 'C' or 'c'</FONT>
    <FONT COLOR="#ff0000">// Rev 'D' or 'd'</FONT>
  }

  gxDatabase *f = new gxDatabase;
  if(!f) {
    cout &lt;&lt; "Error allocating memory for database file pointer..." &lt;&lt; "\n";
    return 1;
  }
  const char *fname = "simple.gxd";
  int exists;

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Simple checksum example." &lt;&lt; "\n";

  if(!gxDatabase::Exists(fname)) {
    cout &lt;&lt; "Creating new file..." &lt;&lt; "\n";
    f-&gt;Create(fname, (FAU_t)0, rev_letter);
    if(CheckError(f) != 0) {
      delete f;
      return 1;
    }
    exists = 0;
  }
  else {
    cout &lt;&lt; "Opening existing file..." &lt;&lt; "\n";
    f-&gt;Open(fname);
    if(CheckError(f) != 0) {
      delete f;
      return 1;
    }
    exists = 1;
  }
  
  PausePrg();
  DatabaseStats(f);
  PausePrg();
  
  FAU addr;
  int rv;
  __ULWORD__ object_crc, calc_crc;
  
  if(!exists) {
    cout &lt;&lt; "Adding object to database file..." &lt;&lt; "\n";
    <FONT COLOR="#ff0000">// Allocate a block to store the object</FONT>
    addr = f-&gt;Alloc(sizeof(DatabaseObject)); 

    <FONT COLOR="#ff0000">// Construct the datbase object</FONT>
    DatabaseObject ob("Mouse", (long)addr, 1035.101);

    f-&gt;Write(&amp;ob, sizeof(DatabaseObject));
    
    f-&gt;WriteObjectChecksum(addr);
    f-&gt;ReadObjectChecksum(addr, &amp;object_crc, &amp;calc_crc);
    cout.setf(ios::uppercase);
    cout &lt;&lt; "Object CRC =     0x" &lt;&lt; setfill('0') &lt;&lt; setw(8) &lt;&lt; hex
	 &lt;&lt; object_crc &lt;&lt; "\n";
    cout &lt;&lt; "Calculated CRC = 0x" &lt;&lt; setfill('0') &lt;&lt; setw(8) &lt;&lt; hex
	 &lt;&lt; calc_crc &lt;&lt; dec &lt;&lt; "\n";
    BlockStats(f, addr);
  }
  else {
    f-&gt;Open(fname); 
    cout &lt;&lt; "Reading the first object from the database file..." &lt;&lt; "\n";
    addr = f-&gt;FindFirstBlock();

    <FONT COLOR="#ff0000">// CRC checksum routines</FONT>
    rv = f-&gt;ReadObjectChecksum(addr+f-&gt;BlockHeaderSize(),
			       &amp;object_crc, &amp;calc_crc);
    if(!rv) cout &lt;&lt; "Checksum error!" &lt;&lt; "\n";
    cout.setf(ios::uppercase);
    cout &lt;&lt; "Object CRC =     0x" &lt;&lt; setfill('0') &lt;&lt; setw(8) &lt;&lt; hex
	 &lt;&lt; object_crc &lt;&lt; "\n";
    cout &lt;&lt; "Calculated CRC = 0x" &lt;&lt; setfill('0') &lt;&lt; setw(8) &lt;&lt; hex
	 &lt;&lt; calc_crc &lt;&lt; dec &lt;&lt; "\n";
    cout.unsetf(ios::uppercase);
    cout &lt;&lt; "\n";

    DatabaseObject buf;
    f-&gt;Read(&amp;buf, sizeof(DatabaseObject), addr+f-&gt;BlockHeaderSize());
    buf.DisplayObject();
  }

  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
  f-&gt;Close();
  if(CheckError(f) != 0) {
    delete f;
    return 1;
  }

  delete f;
  return 0; 
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
