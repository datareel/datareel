<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:32:25 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>btree2c example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: gxbtree.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 08/22/2000 </FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Dictionary example program using the gxBtree cache functions.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if !defined (__USE_BTREE_CACHE__)
int main() { return 0; }
#else

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include &lt;string.h&gt;
#include &lt;time.h&gt;
#include "gxbtree.h"
#include "dfileb.h"
#include "ustring.h"
#include "leaktest.h"

const BtreeNodeOrder_t MyKeyClassOrder = 100;
const __WORD__ MyKeyNameSize = 54;
const int num_buckets = 3000;

class MyKeyClass : public DatabaseKeyB
{
public:
  MyKeyClass();
  MyKeyClass(const char *name);
  void operator=(const char *name);
  ~MyKeyClass() { }

public: <FONT COLOR="#ff0000">// Base class interface</FONT>
  size_t KeySize() { return sizeof(key_name); }
#ifndef __USE_SINGLE_COMPARE__
  int operator==(const DatabaseKeyB&amp; key) const;
  int operator&gt;(const DatabaseKeyB&amp; key) const;
#else
  int CompareKey(const DatabaseKeyB&amp; key) const;
#endif

public: <FONT COLOR="#ff0000">// Persistent data member</FONT>
  char key_name[MyKeyNameSize];
};

MyKeyClass::MyKeyClass() : DatabaseKeyB((char *)key_name)
{
  for(int i = 0; i &lt; MyKeyNameSize; i++) key_name[i] = 0;
}

MyKeyClass::MyKeyClass(const char *name) : DatabaseKeyB((char *)key_name)
{
  strncpy(key_name, name,  MyKeyNameSize);
  key_name[ MyKeyNameSize-1] = 0; <FONT COLOR="#ff0000">// Ensure null termination</FONT>
}

void MyKeyClass::operator=(const char *name)
{
  strncpy(key_name, name,  MyKeyNameSize);
  key_name[ MyKeyNameSize-1] = 0; <FONT COLOR="#ff0000">// Ensure null termination</FONT>
}

#ifndef __USE_SINGLE_COMPARE__
int MyKeyClass::operator==(const DatabaseKeyB&amp; key) const
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return (strcmp(key_name, (char *)kptr-&gt;db_key) == 0);
}

int MyKeyClass::operator&gt;(const DatabaseKeyB&amp; key) const
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return (strcmp(key_name, (char *)kptr-&gt;db_key) &gt; 0);
}
#else
int MyKeyClass::CompareKey(const DatabaseKeyB&amp; key) const
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return strcmp(key_name, (char *)kptr-&gt;db_key);
}
#endif <FONT COLOR="#ff0000">//  __USE_SINGLE_COMPARE__</FONT>

void PausePrg()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

void BtreeStatus(gxBtree &amp;btx)
{
  UString intbuf;
  cout &lt;&lt; "\n";
  intbuf &lt;&lt; clear &lt;&lt; btx.Root();
  cout &lt;&lt; "Root address =      " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Number of trees =   " &lt;&lt; btx.NumTrees() &lt;&lt; "\n";
  cout &lt;&lt; "Number of entries = " &lt;&lt; btx.NumKeys() &lt;&lt; "\n";
  cout &lt;&lt; "Number of nodes =   " &lt;&lt; btx.NumNodes() &lt;&lt; "\n";
  cout &lt;&lt; "B-tree order =      " &lt;&lt; btx.NodeOrder() &lt;&lt; "\n";
  cout &lt;&lt; "B-tree height =     " &lt;&lt; btx.BtreeHeight() &lt;&lt; "\n";
  PausePrg();
}

void BtreeCacheStats(BtreeCache &amp;btree_cache)
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "--------- Cache tuning statistics ---------" &lt;&lt; "\n";
  cout &lt;&lt; "Number of dirty buckets = " 
       &lt;&lt; btree_cache.BucketsInUse() &lt;&lt; "\n";
  cout &lt;&lt; "Number of disk reads    = " 
       &lt;&lt; btree_cache.uncached_reads &lt;&lt; "\n";
  cout &lt;&lt; "Number of cached reads  = " 
       &lt;&lt; btree_cache.cached_reads &lt;&lt; "\n";
  PausePrg();
}

int ParseString(char *srt, char words[255][255],
		int*numwords, char sepchar)
<FONT COLOR="#ff0000">// General purpose string parser</FONT>
{
  int i = 0;
  char newword[255];
  *numwords = 0;

  <FONT COLOR="#ff0000">// First skip over leading blanks. Stop if an ASCII NULL is seen</FONT>
  while (1) {
    if (*srt == '\0') return 0;
    if (*srt != ' ') break;
    srt++;
  }
  
  while(1) {
    <FONT COLOR="#ff0000">// Check to see if there is room for another word in the array</FONT>
    if(*numwords == 255) return 1;

    i = 0;
    while (i &lt; 254) {
      if(*srt == 0 || *srt == sepchar) break;
      newword[i] = *srt;
      srt++;
      i++;
    }
    newword[i] = 0;   <FONT COLOR="#ff0000">// Ensure an ASCII null at end of newword. </FONT>
    strcpy (words[*numwords], newword);  <FONT COLOR="#ff0000">// Install into array </FONT>
    (*numwords)++;
    
    <FONT COLOR="#ff0000">// If stopped by an ASCII NULL above, exit loop</FONT>
    if(*srt == 0) break;
    
    srt++;
    if(*srt == 0) break;
  }
  return 0;
}

int ImportTextFile(gxBtree &amp;btx, char *fname)
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Importing a dictionary file." &lt;&lt; "\n";
  cout &lt;&lt; "NOTE: Words must be delimited by a space or forward slash (/)"
       &lt;&lt; "\n";
  
  int status, num, key_count = 0;
  char words[255][255];
  const int MaxLine = 255;
  char LineBuffer[MaxLine];
  const char dchar = '/';  <FONT COLOR="#ff0000">// Text delimiter</FONT>

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Opening dictionary text file" &lt;&lt; "\n";
  
  DiskFileB infile(fname);
  if(!infile) { <FONT COLOR="#ff0000">// Could not open the istream</FONT>
    cout &lt;&lt; "Could not open file: " &lt;&lt; fname &lt;&lt; "\n";
    return 1;
  }
 
  cout &lt;&lt; "Adding words..." &lt;&lt; "\n";

  <FONT COLOR="#ff0000">// Get CPU clock cycles before entering loop</FONT>
  clock_t begin = clock();

  MyKeyClass key;
  MyKeyClass compare_key;
  BtreeCache btree_cache(num_buckets, &amp;btx);
  if(!btree_cache) {
    cout &lt;&lt; "Error constructing the B-tree cache object" &lt;&lt; "\n";
    return 1;
  }

  while(!infile.df_EOF()) {
    if(infile.df_GetLine(LineBuffer, df_MAX_LINE_LENGTH, '\n', 1) != 
       DiskFileB::df_NO_ERROR) {
      break; <FONT COLOR="#ff0000">// Error reading from the disk file</FONT>
    }
    if(strcmp(LineBuffer, "") == 0) continue;
    
    if(ParseString(LineBuffer, words, &amp;num, dchar) == 1) {
      return 1;
    }
    
    key = LineBuffer;

    <FONT COLOR="#ff0000">// Cached insertion method</FONT>
    status = btx.Insert(key, compare_key, &amp;btree_cache);

    if (status != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem adding " &lt;&lt; words[0] &lt;&lt; "\n";
      cout &lt;&lt; btx.DatabaseExceptionMessage() &lt;&lt; "\n";
      return 1;
    }
    else {
      key_count++;
    }
  }
  
  <FONT COLOR="#ff0000">// Get CPU clock cycles after loop is completed </FONT>
  clock_t end =clock();
  
  <FONT COLOR="#ff0000">// Calculate the elapsed time in seconds. </FONT>
  double elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3); 
  cout &lt;&lt; "Added " &lt;&lt; key_count &lt;&lt; " words in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";

  BtreeCacheStats(btree_cache);

  <FONT COLOR="#ff0000">// Rewind the file</FONT>
  infile.df_Rewind();
  
  cout &lt;&lt; "Verifying the entries using a sort order search..." &lt;&lt; "\n";
  begin = clock();
  key_count = 0;
  double search_time = 0;

  <FONT COLOR="#ff0000">// Cache node used for optimized sort order searches</FONT>
  BtreeCacheNode curr_node(btree_cache);

  while(!infile.df_EOF()) {
    if(infile.df_GetLine(LineBuffer, df_MAX_LINE_LENGTH, '\n', 1) != 
       DiskFileB::df_NO_ERROR) {
      break; <FONT COLOR="#ff0000">// Error reading from the disk file</FONT>
    }
    if(strcmp(LineBuffer, "") == 0) continue;
    
    if(ParseString(LineBuffer, words, &amp;num, dchar) == 1) {
      return 1;
    }
    
    key = LineBuffer;
    clock_t begin_search = clock();

    <FONT COLOR="#ff0000">// status = btx.Find(key, compare_key, &amp;btree_cache);</FONT>
    status = btx.Find(key, compare_key, curr_node);

    clock_t end_search = clock();
    search_time += (double)(end_search - begin_search) / CLOCKS_PER_SEC;

    if (status != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem finding " &lt;&lt; words[0] &lt;&lt; "\n";
      cout &lt;&lt; btx.DatabaseExceptionMessage() &lt;&lt; "\n";
      return 1;
    }
    else {
      key_count++;
    }

  }

  end =clock();
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3);
  cout &lt;&lt; "Verified " &lt;&lt; key_count &lt;&lt; " words in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";
  double avg_search_time = (search_time/(double)key_count) * 1000;
  cout &lt;&lt; "Average search time = " &lt;&lt; avg_search_time &lt;&lt; " milliseconds"
       &lt;&lt; "\n";
  BtreeCacheStats(btree_cache);

  cout &lt;&lt; "Verifying the entries using a find next sort order search..." 
       &lt;&lt; "\n";
  begin = clock();
  key_count = 0;
  btx.ResetStats(); <FONT COLOR="#ff0000">// Reset the B-tree tuning statistics</FONT>

  if(btx.FindFirst(key, curr_node)) {
    key_count++;
    while(btx.FindNext(key, compare_key, curr_node)) {
      key_count++;
    }
  }
  else {
    cout &lt;&lt; "\n" &lt;&lt; "Problem finding first key" &lt;&lt; "\n";
    cout &lt;&lt; btx.DatabaseExceptionMessage() &lt;&lt; "\n";
    return 1;
  }
  
  end =clock();
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3);
  cout &lt;&lt; "Verified " &lt;&lt; key_count &lt;&lt; " words in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";

  BtreeCacheStats(btree_cache);

  cout &lt;&lt; "Verifying the entries using a find prev sort order search..." 
       &lt;&lt; "\n";
  begin = clock();
  key_count = 0;
  btx.ResetStats(); <FONT COLOR="#ff0000">// Reset the B-tree tuning statistics</FONT>

  if(btx.FindLast(key, curr_node)) {
    key_count++;
    while(btx.FindPrev(key, compare_key, curr_node)) {
      key_count++;
    }
  }
  else {
    cout &lt;&lt; "\n" &lt;&lt; "Problem finding last key" &lt;&lt; "\n";
    cout &lt;&lt; btx.DatabaseExceptionMessage() &lt;&lt; "\n";
    return 1;
  }
  
  end =clock();
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout.precision(3);
  cout &lt;&lt; "Verified " &lt;&lt; key_count &lt;&lt; " words in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";

  BtreeCacheStats(btree_cache);
  
  <FONT COLOR="#ff0000">// Rewind the file</FONT>
  infile.df_Rewind();

  cout &lt;&lt; "Deleting the entries..." &lt;&lt; "\n";
  begin = clock();
  key_count = 0;

  while(!infile.df_EOF()) {
    if(infile.df_GetLine(LineBuffer, df_MAX_LINE_LENGTH, '\n', 1) != 
       DiskFileB::df_NO_ERROR) {
      break; <FONT COLOR="#ff0000">// Error reading from the disk file</FONT>
    }
    if(strcmp(LineBuffer, "") == 0) continue;

    key = LineBuffer;

    <FONT COLOR="#ff0000">// Balanced delete function</FONT>
    <FONT COLOR="#ff0000">// status = btx.Delete(key, compare_key, &amp;btree_cache);</FONT>

    status = btx.FastDelete(key, compare_key, &amp;btree_cache);

    if (status != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem deleting " &lt;&lt; words[0] &lt;&lt; "\n";
      cout &lt;&lt; btx.DatabaseExceptionMessage() &lt;&lt; "\n";
      return 1;
    }
    else {
      key_count++;
    }
  }

  end =clock();
  cout.precision(3);
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout &lt;&lt; "Deleted " &lt;&lt; key_count &lt;&lt; " words in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";

  BtreeCacheStats(btree_cache);

  <FONT COLOR="#ff0000">// Rewind the file</FONT>
  infile.df_Rewind();

  cout &lt;&lt; "Re-inserting all the words..." &lt;&lt; "\n";
  key_count = 0;
  begin = clock();

  while(!infile.df_EOF()) {
    if(infile.df_GetLine(LineBuffer, df_MAX_LINE_LENGTH, '\n', 1) != 
       DiskFileB::df_NO_ERROR) {
      break; <FONT COLOR="#ff0000">// Error reading from the disk file</FONT>
    }
    if(strcmp(LineBuffer, "") == 0) continue;
    
    if(ParseString(LineBuffer, words, &amp;num, dchar) == 1) {
      return 1;
    }
    
    key = LineBuffer;
    
    status = btx.Insert(key, compare_key, &amp;btree_cache);

    if (status != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem adding " &lt;&lt; words[0] &lt;&lt; "\n";
      cout &lt;&lt; btx.DatabaseExceptionMessage() &lt;&lt; "\n";
      return 1;
    }
    else {
      key_count++;
    }
  }
  
  end =clock();
  cout.precision(3);
  elapsed_time = (double)(end - begin) / CLOCKS_PER_SEC;
  cout &lt;&lt; "Added " &lt;&lt; key_count &lt;&lt; " words in " 
       &lt;&lt; elapsed_time &lt;&lt; " seconds" &lt;&lt; "\n";

  BtreeCacheStats(btree_cache);

  cout &lt;&lt; "Flushing the B-tree cache" &lt;&lt; "\n";
  if(btree_cache.Flush() != gxDBASE_NO_ERROR) {
    cout &lt;&lt; "Error flushing cache" &lt;&lt; "\n";
    
  }
  cout &lt;&lt; "Flushing the B-tree header" &lt;&lt; "\n";
  btx.Flush();

  infile.df_Close();
  return 0;
}

int main(int argv, char **argc)
{
#ifdef __MSVC_DEBUG__
  InitLeakTest(); 
#endif

  const char *fname = "testfile.btx"; <FONT COLOR="#ff0000">// File name of this database</FONT>
  char *dfile = "amerdict.txt"; <FONT COLOR="#ff0000">// Default dictionary file</FONT>
  char rev_letter = gxDatabaseRevisionLetter; <FONT COLOR="#ff0000">// Set the default rev letter</FONT>
  if(argv &gt;= 2) { <FONT COLOR="#ff0000">// Set a specified revision letter</FONT>
    rev_letter = *argc[1];
    if(rev_letter == '0') rev_letter = '\0';
    <FONT COLOR="#ff0000">// Valid rev letters are:</FONT>
    <FONT COLOR="#ff0000">// Rev 0</FONT>
    <FONT COLOR="#ff0000">// Rev 'A' or 'a'</FONT>
    <FONT COLOR="#ff0000">// Rev 'B' or 'b'</FONT>
    <FONT COLOR="#ff0000">// Rev 'C' or 'c'</FONT>
    <FONT COLOR="#ff0000">// Rev 'D' or 'd'</FONT>
    <FONT COLOR="#ff0000">// Rev 'E' or 'e'</FONT>
    <FONT COLOR="#ff0000">// NOTE: The gxDatabase class will set invalid revision letters</FONT>
    <FONT COLOR="#ff0000">// to the version set by the gxDatabaseRevisionLetter constant.  </FONT>
  }

  if(argv == 3) dfile = argc[2]; <FONT COLOR="#ff0000">// Use specified dictionary</FONT>

  MyKeyClass key, kbuf;
  gxBtree btx(key, MyKeyClassOrder);

  <FONT COLOR="#ff0000">// Create a new B-tree index with one tree</FONT>
  btx.Create(fname, rev_letter);

  ImportTextFile(btx, dfile);

  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
  return 0;
}

#endif <FONT COLOR="#ff0000">// __USE_BTREE_CACHE__</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
