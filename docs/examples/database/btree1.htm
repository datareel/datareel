<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:35:03 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>btree1 example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 08/22/2000 </FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

Simple test program for the gxBtree class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "gxdstats.h"
#include "gxbtree.h"
#include "ustring.h"

const BtreeNodeOrder_t MyKeyClassOrder = 7;
const __WORD__ MyKeyNameSize = 64;

class MyKeyClass : public DatabaseKeyB
{
public:
  MyKeyClass();
  MyKeyClass(const char *name);
  void operator=(const char *name);
  ~MyKeyClass() { }

public: <FONT COLOR="#ff0000">// Base class interface</FONT>
  size_t KeySize() { return sizeof(key_name); }
  int operator==(const DatabaseKeyB&amp; key) const;
  int operator&gt;(const DatabaseKeyB&amp; key) const;

  <FONT COLOR="#ff0000">// NOTE: This comparison function is only used if the </FONT>
  <FONT COLOR="#ff0000">// __USE_SINGLE_COMPARE__ preprocessor directive is </FONT>
  <FONT COLOR="#ff0000">// defined when the program is compiled.</FONT>
  int CompareKey(const DatabaseKeyB&amp; key) const;

public: <FONT COLOR="#ff0000">// Persistent data member</FONT>
  char key_name[MyKeyNameSize];
};

MyKeyClass::MyKeyClass() : DatabaseKeyB((char *)key_name)
{
  for(int i = 0; i &lt; MyKeyNameSize; i++) key_name[i] = 0;
}

MyKeyClass::MyKeyClass(const char *name) : DatabaseKeyB((char *)key_name)
{
  strncpy(key_name, name,  MyKeyNameSize);
  key_name[ MyKeyNameSize-1] = 0; <FONT COLOR="#ff0000">// Ensure null termination</FONT>
}

void MyKeyClass::operator=(const char *name)
{
  strncpy(key_name, name,  MyKeyNameSize);
  key_name[ MyKeyNameSize-1] = 0; <FONT COLOR="#ff0000">// Ensure null termination</FONT>
}

int MyKeyClass::CompareKey(const DatabaseKeyB&amp; key) const
<FONT COLOR="#ff0000">// NOTE: This comparison function is only used if the </FONT>
<FONT COLOR="#ff0000">// __USE_SINGLE_COMPARE__ preprocessor directive is </FONT>
<FONT COLOR="#ff0000">// defined when the program is compiled.</FONT>
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return strcmp(key_name, (char *)kptr-&gt;db_key);
}

int MyKeyClass::operator==(const DatabaseKeyB&amp; key) const
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return (strcmp(key_name, (char *)kptr-&gt;db_key) == 0);
}

int MyKeyClass::operator&gt;(const DatabaseKeyB&amp; key) const
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return (strcmp(key_name, (char *)kptr-&gt;db_key) &gt; 0);
}

void PrintNode(BtreeNode *n)
<FONT COLOR="#ff0000">// Prints a single B-tree node.</FONT>
{
  UString intbuf;
  MyKeyClass key;
  BtreeKeyCount_t i = (BtreeKeyCount_t)0;
  cout &lt;&lt; "[";
  intbuf &lt;&lt; clear &lt;&lt; (FAU_t)n-&gt;node_address;
  cout &lt;&lt; "Node Address: " &lt;&lt; intbuf.c_str(); 
  cout &lt;&lt; ", ";
  intbuf &lt;&lt; clear &lt;&lt; (FAU_t)n-&gt;left_child;
  cout &lt;&lt; "Left Node: " &lt;&lt; intbuf.c_str();
  cout &lt;&lt; "]";
  while (i &lt; n-&gt;key_count) {
    n-&gt;LoadKey(key, (BtreeKeyLocation_t)i);
    cout &lt;&lt; " &lt;";
    cout &lt;&lt; key.key_name;
    intbuf &lt;&lt; clear &lt;&lt; (FAU_t)key.right_child;
    cout &lt;&lt; ", " &lt;&lt; intbuf.c_str();
    cout &lt;&lt; "&gt; ";
    i++;
  }
  cout &lt;&lt; "\n";
}

typedef void (*BtreeVisitFunc)(BtreeNode *Node); 

void BtreeWalk(FAU_t t, BtreeVisitFunc Visit, gxBtree *tree)
<FONT COLOR="#ff0000">// This is a recursive function demo used to walk through</FONT>
<FONT COLOR="#ff0000">// the B-tree node by node.</FONT>
{
  BtreeKeyCount_t i;

  <FONT COLOR="#ff0000">// Ensure that the in memory buffers and the file data</FONT>
  <FONT COLOR="#ff0000">// stay in sync during multiple file access.</FONT>
  if(tree) {
    tree-&gt;TestTree();
  }
  else {
    return;
  }

  BtreeNode n(tree-&gt;KeySize(), tree-&gt;NodeOrder());
  
  if(t != (FAU_t)0) {
    tree-&gt;ReadNode(n, t);
    n.node_address = t;
    (*Visit)(&amp;n); <FONT COLOR="#ff0000">// Process the node data</FONT>
    BtreeKeyCount_t nc = n.key_count;
    FAU_t p;

    for(i = (BtreeKeyCount_t)-1; i &lt; nc; i++) {
      p = n.GetBranch(i);
      BtreeWalk(p, Visit, tree);  
    }
  }
}

void PausePrg()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

void BtreeStatus(gxBtree &amp;btx)
{
  UString intbuf;
  cout &lt;&lt; "\n";
  intbuf &lt;&lt; clear &lt;&lt; (FAU_t)btx.Root();
  cout &lt;&lt; "Root address =      " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Number of trees =   " &lt;&lt; btx.NumTrees() &lt;&lt; "\n";
  cout &lt;&lt; "Number of entries = " &lt;&lt; btx.NumKeys() &lt;&lt; "\n";
  cout &lt;&lt; "Number of nodes =   " &lt;&lt; btx.NumNodes() &lt;&lt; "\n";
  cout &lt;&lt; "B-Tree order =      " &lt;&lt; btx.NodeOrder() &lt;&lt; "\n";
  cout &lt;&lt; "B-Tree height =     " &lt;&lt; btx.BtreeHeight() &lt;&lt; "\n";
  PausePrg();
}

void BuildTree(gxBtree &amp;btx)
{
  <FONT COLOR="#ff0000">// Set to true to print the tree with each insertion and deletion</FONT>
  int print_tree = 0;

  char *aa1 = "DOG";
  char *bb1 = "CAT";
  char *cc1 = "FISH";
  char *dd1 = "MOUSE";
  char *ee1 = "BIRD";
  char *ff1 = "PIG";
  char *gg1 = "HORSE";
  char *hh1 = "LION";
  char *ii1 = "SNAKE";
  char *jj1 = "COW";
  char *kk1 = "ARMADILLO";
  char *ll1 = "GROUPER";
  char *mm1 = "RAT";
  char *nn1 = "MONKEY";
  char *oo1 = "ZEBRA";
  char *pp1 = "STARFISH";
  char *qq1 = "LIZARD";
  char *rr1 = "CRAB";
  char *ss1 = "SNAIL";
  char *tt1 = "GORILLA";
  char *uu1 = "LOBSTER";
  char *vv1 = "TURKEY";
  char *ww1 = "BEETLE";
  char *xx1 = "SHARK";
  char *yy1 = "CLAM";
  char *zz1 = "OYSTER";

  char *aa2 = "FLEA";
  char *bb2 = "BUTTERFLY";
  char *cc2 = "SPARROW";
  char *dd2 = "GOLDFISH";
  char *ee2 = "TIGER";
  char *ff2 = "BEAR";
  char *gg2 = "TROUTE";
  char *hh2 = "MOOSE";
  char *ii2 = "DEAR";
  char *jj2 = "SALMON";
  char *kk2 = "TUNA";
  char *ll2 = "GAZELLE";
  char *mm2 = "SLOTH";
  char *nn2 = "SPIDER";
  char *oo2 = "LEAPORD";
  char *pp2 = "GIRAFFE";
  char *qq2 = "MUSTANG";
  char *rr2 = "CONDOR";
  char *ss2 = "KANGAROO";
  char *tt2 = "SKUNK";
  char *uu2 = "FOX";
  char *vv2 = "PANTER";
  char *ww2 = "CHEETAH";
  char *xx2 = "TOUCAN";
  char *yy2 = "PARROT";
  char *zz2 = "BUFFALO";

  char *aa3 = "KOALA";
  char *bb3 = "HORSEFLY";
  char *cc3 = "ANACONDA";
  char *dd3 = "CROCODILE";
  char *ee3 = "RACCOON";
  char *ff3 = "ALLIGATOR";
  char *gg3 = "RABBIT";
  char *hh3 = "WHALE";
  char *ii3 = "ANT";
  char *jj3 = "CRANE";
  char *kk3 = "LONGHORN";
  char *ll3 = "CANARY";
  char *mm3 = "WOMBAT";
  char *nn3 = "WOLFHOUND";
  char *oo3 = "COUGAR";
  char *pp3 = "BAT";
  char *qq3 = "OWL";
  char *rr3 = "SHRIMP";
  char *ss3 = "SCALLOP";
  char *tt3 = "SQUID";
  char *uu3 = "PYTHON";
  char *vv3 = "SARDINE";
  char *ww3 = "TAPIR";
  char *xx3 = "ELEPHANT";
  char *yy3 = "EEL";
  char *zz3 = "RHINOCEROS";

  char *aa4 = "LAMB";
  char *bb4 = "BISON";
  char *cc4 = "GRASSHOPPER";
  char *dd4 = "MACKEREL";
  char *ee4 = "FERRET";
  char *ff4 = "WASP";
  char *gg4 = "CATERPILLAR";
  char *hh4 = "MILLIPEDE";
  char *ii4 = "CENTIPEDE";
  char *jj4 = "MOSQUITO";
  char *kk4 = "POSSUM";
  char *ll4 = "DUCK";
  char *mm4 = "WEASEL";
  char *nn4 = "CARIBOU";
  char *oo4 = "ANTELOPE";
  char *pp4 = "SALAMANDER";
  char *qq4 = "NEWT";
  char *rr4 = "CHICKEN";
  char *ss4 = "BULL";
  char *tt4 = "COBRA";
  char *uu4 = "CHIMPANZEE";
  char *vv4 = "URCHIN";
  char *ww4 = "CROW";
  char *xx4 = "WOLF";
  char *yy4 = "SPONGE";
  char *zz4 = "JELLYFISH";

  const int NKEYS = 104;
  char *keys[NKEYS] = { aa1, bb1, cc1, dd1, ee1, ff1, gg1, hh1, ii1, jj1,
			kk1, ll1, mm1, nn1, oo1, pp1, qq1, rr1, ss1, tt1,
                        uu1, vv1, ww1, xx1, yy1, zz1,

			aa2, bb2, cc2, dd2, ee2, ff2, gg2, hh2, ii2, jj2,
			kk2, ll2, mm2, nn2, oo2, pp2, qq2, rr2, ss2, tt2,
                        uu2, vv2, ww2, xx2, yy2, zz2,

			aa3, bb3, cc3, dd3, ee3, ff3, gg3, hh3, ii3, jj3,
			kk3, ll3, mm3, nn3, oo3, pp3, qq3, rr3, ss3, tt3,
                        uu3, vv3, ww3, xx3, yy3, zz3,

			aa4, bb4, cc4, dd4, ee4, ff4, gg4, hh4, ii4, jj4,
			kk4, ll4, mm4, nn4, oo4, pp4, qq4, rr4, ss4, tt4,
                        uu4, vv4, ww4, xx4, yy4, zz4 };

  MyKeyClass key;
  MyKeyClass compare_key;
  int i, rv;

  const int INSERTIONS = 104;

  cout &lt;&lt; "Inserting " &lt;&lt; INSERTIONS &lt;&lt; " keys..." &lt;&lt; "\n";
  for(i = 0; i &lt; INSERTIONS; i++) {
    key = keys[i];  

    rv = btx.Insert(key, compare_key);
    
    if(print_tree) {
      cout &lt;&lt; "Inserting " &lt;&lt; keys[i] &lt;&lt; " - " &lt;&lt; i &lt;&lt; "\n";
      BtreeWalk(btx.Root(), PrintNode, &amp;btx);
      PausePrg();
    }

    if(rv != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem adding " &lt;&lt; keys[i] &lt;&lt; " - " &lt;&lt; i &lt;&lt; "\n";
      return;
    }
  }

  btx.Flush(); <FONT COLOR="#ff0000">// Flush the tree following a batch insert</FONT>
  BtreeStatus(btx);

  cout &lt;&lt; "Verifying the insertions..." &lt;&lt; "\n";
  for(i = 0; i &lt; INSERTIONS; i++) {
    key = keys[i];      
    rv = btx.Find(key, compare_key);
    if(rv != 1) {
      cout &lt;&lt; "Error finding key " &lt;&lt; keys[i] &lt;&lt; " - " &lt;&lt; i &lt;&lt; "\n";
      return;
    }
  }

  cout &lt;&lt; "Deleting all the entries..." &lt;&lt; "\n";
  for(i = 0; i &lt; INSERTIONS; i++) {
    key = keys[i];      

    <FONT COLOR="#ff0000">// Testing the deletion functions</FONT>
    <FONT COLOR="#ff0000">// rv = btx.LazyDelete(key, compare_key);</FONT>
    rv = btx.Delete(key, compare_key);

    if(rv != 1) {
      cout &lt;&lt; "Error deleting key " &lt;&lt; keys[i] &lt;&lt; " - " &lt;&lt; i &lt;&lt; "\n";
      return;
    }

    if(print_tree) {
      cout &lt;&lt; "Deleting " &lt;&lt; keys[i] &lt;&lt; " - " &lt;&lt; i &lt;&lt; "\n";
      BtreeWalk(btx.Root(), PrintNode, &amp;btx);
      PausePrg();
    }

    <FONT COLOR="#ff0000">// Verify the remaining key locations</FONT>
    for(int j = INSERTIONS-1; j != i; j--) {
      key = keys[j];      
      rv = btx.Find(key, compare_key);
      if(rv != 1) {
	cout &lt;&lt; "Error finding key " &lt;&lt; keys[j] &lt;&lt; " - " &lt;&lt; j &lt;&lt; "\n";
	cout &lt;&lt; "After deleting key " &lt;&lt; keys[i] &lt;&lt; " - " &lt;&lt; i &lt;&lt; "\n";
	return;
      }
    }
  }

  btx.Flush(); <FONT COLOR="#ff0000">// Flush the tree following a batch delete</FONT>
  BtreeStatus(btx);

  cout &lt;&lt; "Re-inserting " &lt;&lt; INSERTIONS &lt;&lt; " keys..." &lt;&lt; "\n";
  for(i = 0; i &lt; INSERTIONS; i++) {
    key = keys[i];  

    rv = btx.Insert(key, compare_key);

    if(rv != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem adding " &lt;&lt; keys[i] &lt;&lt; " - " &lt;&lt; i &lt;&lt; "\n";
      return;
    }
  }

  btx.Flush(); <FONT COLOR="#ff0000">// Flush the tree following a batch insert</FONT>
  BtreeStatus(btx);
}

int main(int argv, char **argc)
{
  const char *fname = "testfile.btx"; <FONT COLOR="#ff0000">// File name of this database</FONT>
  char rev_letter = gxDatabaseRevisionLetter; <FONT COLOR="#ff0000">// Set the default rev letter</FONT>
  if(argv == 2) { <FONT COLOR="#ff0000">// Set a specified revision letter</FONT>
    rev_letter = *argc[1];
    if(rev_letter == '0') rev_letter = '\0';
    <FONT COLOR="#ff0000">// Valid rev letters are:</FONT>
    <FONT COLOR="#ff0000">// Rev 0</FONT>
    <FONT COLOR="#ff0000">// Rev 'A' or 'a'</FONT>
    <FONT COLOR="#ff0000">// Rev 'B' or 'b'</FONT>
    <FONT COLOR="#ff0000">// Rev 'C' or 'c'</FONT>
    <FONT COLOR="#ff0000">// Rev 'D' or 'd'</FONT>
    <FONT COLOR="#ff0000">// Rev 'E' or 'e'</FONT>
    <FONT COLOR="#ff0000">// NOTE: The gxDatabase class will set invalid revision letters</FONT>
    <FONT COLOR="#ff0000">// to the version set by the gxDatabaseRevisionLetter constant.  </FONT>
  }

  MyKeyClass key, compare_key;
  gxBtree btx(key, MyKeyClassOrder);

  <FONT COLOR="#ff0000">// Create a new B-Tree index file</FONT>
  btx.Create(fname, rev_letter);
  if(CheckError(btx.gxDatabasePtr()) != 0) return 1;
  
  cout &lt;&lt; "Database key size      = " &lt;&lt; key.SizeOfDatabaseKey() &lt;&lt; "\n";
  cout &lt;&lt; "Key entry size         = "
       &lt;&lt; (key.SizeOfDatabaseKey() * (MyKeyClassOrder-1)) &lt;&lt; "\n";

  BtreeNode n(key.SizeOfDatabaseKey(), MyKeyClassOrder);
  cout &lt;&lt; "B-Tree node size       = " &lt;&lt; n.SizeOfBtreeNode() &lt;&lt; "\n";
  cout &lt;&lt; "B-Tree header size     = " &lt;&lt; sizeof(gxBtreeHeader) &lt;&lt; "\n";
  cout &lt;&lt; "B-Tree order           = " &lt;&lt; MyKeyClassOrder &lt;&lt; "\n";
  cout &lt;&lt; "Total B-Tree node size = " &lt;&lt; btx.TotalNodeSize() &lt;&lt; "\n";

  PausePrg();

  <FONT COLOR="#ff0000">// Build the Btree</FONT>
  BuildTree(btx);
  
  btx.FindFirst(key);
  cout &lt;&lt; "First key = " &lt;&lt; key.key_name &lt;&lt; "\n";

  btx.FindLast(key);
  cout &lt;&lt; "Last key = " &lt;&lt; key.key_name &lt;&lt; "\n";

  cout &lt;&lt; "\n";
  
  cout &lt;&lt; "Recursively walking through the B-Tree node by node..." &lt;&lt; "\n";
  PausePrg();

  BtreeWalk(btx.Root(), PrintNode, &amp;btx);

  cout &lt;&lt; "\n";
  cout &lt;&lt; "Walking through the tree in sort order" &lt;&lt; "\n";
  PausePrg();
  
  <FONT COLOR="#ff0000">// Walk through the tree starting at the first node</FONT>
  if(btx.FindFirst(key)) {
    cout &lt;&lt; key.key_name &lt;&lt; ' ';
    while(btx.FindNext(key, compare_key))
      cout &lt;&lt; key.key_name &lt;&lt; ' ';
  }
  else {
    cout &lt;&lt; "Could not find first key" &lt;&lt; "\n";
    cout &lt;&lt; btx.DatabaseExceptionMessage();
  }
  cout  &lt;&lt; "\n";
  PausePrg();

  <FONT COLOR="#ff0000">// Walk backward through the tree starting at the last node</FONT>
  if(btx.FindLast(key)) {
    cout &lt;&lt; key.key_name &lt;&lt; ' ';
    while(btx.FindPrev(key, compare_key)) {
      cout &lt;&lt; key.key_name &lt;&lt; ' ';
    }
  }
  else {
    cout &lt;&lt; "Could not find last key" &lt;&lt; "\n";
    cout &lt;&lt; btx.DatabaseExceptionMessage();
  }
  cout &lt;&lt; "\n";

  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
