<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:33:58 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>groc_cpp example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: grocery.cpp</FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 09/18/1997</FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This is a test program use to test the Persistent base class.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //   </FONT>
#include "gxdlcode.h"

#include "grocery.h"

GroceryKey::GroceryKey() : DatabaseKeyB((char *)&amp;key)
{
  for(unsigned i = 0; i &lt; MAX_NAME_LENGTH; i++) 
    key.object_name[i] = 0;
  key.object_id = (gxObjectID)0;
  key.class_id = (gxClassID)0;
}

GroceryKey::GroceryKey(const char *name, gxObjectID oid, gxClassID cid) : 
  DatabaseKeyB((char *)&amp;key)
{
  strncpy(key.object_name, name,  MAX_NAME_LENGTH);
  key.object_name[MAX_NAME_LENGTH-1] = 0; <FONT COLOR="#ff0000">// Ensure null termination</FONT>
  key.object_id = oid;
  key.class_id = cid;
}

int GroceryKey::operator==(const DatabaseKeyB&amp; k) const
{
  const GroceryKey *kptr = (const GroceryKey *)(&amp;k);
  int rv = strcmp(key.object_name, kptr-&gt;key.object_name);
  return rv == 0;
}

int GroceryKey::operator&gt;(const DatabaseKeyB&amp; k) const
{
  const GroceryKey *kptr = (const GroceryKey *)(&amp;k);
  int rv = strcmp(key.object_name, kptr-&gt;key.object_name);
  return rv &gt; 0;
}

int GroceryKey::CompareKey(const DatabaseKeyB&amp; k) const
<FONT COLOR="#ff0000">// NOTE: This comparison function is only used if the </FONT>
<FONT COLOR="#ff0000">// __USE_SINGLE_COMPARE__ preprocessor directive is </FONT>
<FONT COLOR="#ff0000">// defined when the program is compiled.</FONT>
{
  const GroceryKey *kptr = (const GroceryKey *)(&amp;k);
  int rv = strcmp(key.object_name, kptr-&gt;key.object_name);
  return rv;
}

void GroceryKey::SetObjectName(const char *s)
{
  strncpy(key.object_name, s,  MAX_NAME_LENGTH);
  key.object_name[MAX_NAME_LENGTH-1] = 0; <FONT COLOR="#ff0000">// Ensure null termination</FONT>
}

void Grocery::ClearName()
<FONT COLOR="#ff0000">// Clears the name string.</FONT>
{
  if(name) delete name; <FONT COLOR="#ff0000">// Assumes the name string was allocated dynamically </FONT>
  name = null_name;
}

__UWORD__ Grocery::ObjectLength()
{
  return sizeof(stock_number) + sizeof(price) + StringFileLength(name);
}

gxDatabaseError Grocery::Write()
{
  gxObjectHeader oh;

  <FONT COLOR="#ff0000">// Allocate a block in the data file for this object's data</FONT>
  objectaddress = pod-&gt;OpenDataFile()-&gt;Alloc(ObjectLength() +
					     sizeof(gxObjectHeader));
  
  <FONT COLOR="#ff0000">// Check for any allocation errors</FONT>
  if(objectaddress == (FAU_t)0) {
    return pod-&gt;GetDataFileError();
  }
  
  oh.ClassID = GetClassID();
  oh.ObjectID = objectaddress;

  <FONT COLOR="#ff0000">// Write the object header to the datafile</FONT>
  if(WriteObjectHeader(oh)!= gxDBASE_NO_ERROR) {
    return pod-&gt;GetDataFileError();
  }
  
  <FONT COLOR="#ff0000">// Write the item name to the data file</FONT>
  if(WriteString(name) != gxDBASE_NO_ERROR) {
    return pod-&gt;GetDataFileError();
  }
  
  <FONT COLOR="#ff0000">// Write the item's stock number to the data file</FONT>
  if(pod-&gt;OpenDataFile()-&gt;Write(&amp;stock_number, sizeof(stock_number)) !=
     gxDBASE_NO_ERROR) {
    return pod-&gt;GetDataFileError();
  }

  <FONT COLOR="#ff0000">// Write the item's price to the data file</FONT>
  if(pod-&gt;OpenDataFile()-&gt;Write(&amp;price, sizeof(price)) != gxDBASE_NO_ERROR) {
    return pod-&gt;GetDataFileError();
  }

  <FONT COLOR="#ff0000">// Write a 32-bit CRC checksum for the object</FONT>
  <FONT COLOR="#ff0000">// NOTE: This step should only be preformed if the application</FONT>
  <FONT COLOR="#ff0000">// requires the use of persistent checksum values.</FONT>
  pod-&gt;OpenDataFile()-&gt;WriteObjectChecksum(objectaddress);
  if(pod-&gt;GetDataFileError() != gxDBASE_NO_ERROR) {
    return pod-&gt;GetDataFileError();
  }

  <FONT COLOR="#ff0000">// Add the entry to the Index file</FONT>
  if(UsingIndex()) {
    GroceryKey key((const char *)name, oh.ObjectID, oh.ClassID);
    GroceryKey compare_key;
    if(!AddKey(key, compare_key)) {
      return pod-&gt;GetIndexFileError();
    }
  }

  return gxDBASE_NO_ERROR;
}

gxDatabaseError Grocery::Read(FAU object_address)
{
  gxObjectHeader oh;

  <FONT COLOR="#ff0000">// Optimize seeks during intervening reads</FONT>
  pod-&gt;OpenDataFile()-&gt;SeekTo(object_address);
  if(pod-&gt;GetDataFileError() != gxDBASE_NO_ERROR) {
    return pod-&gt;GetDataFileError();
  }
  
  if(ReadObjectHeader(oh, object_address) != gxDBASE_NO_ERROR) {
    return pod-&gt;GetDataFileError();
  }
  
  <FONT COLOR="#ff0000">// Incorrect object type</FONT>
  <FONT COLOR="#ff0000">// NOTE: This step should only be preformed if class ID values</FONT>
  <FONT COLOR="#ff0000">// are required by the application.</FONT>
  if(oh.ClassID != GetClassID()) {
    return pod-&gt;SetDataFileError(gxDBASE_BAD_CLASS_ID);
  }
  
  <FONT COLOR="#ff0000">// Read the object's name and check for errors</FONT>
  Name_t nbuf = (Name_t)ReadString();
  
  if(!nbuf) {
    return pod-&gt;GetDataFileError();
  }
  else {
    name = nbuf;
  }
  
  <FONT COLOR="#ff0000">// Read the object's stock number</FONT>
  if(pod-&gt;OpenDataFile()-&gt;Read(&amp;stock_number, sizeof(stock_number)) !=
     gxDBASE_NO_ERROR) {
    return pod-&gt;GetDataFileError();
  }  

  <FONT COLOR="#ff0000">// Read the object's price</FONT>
  if(pod-&gt;OpenDataFile()-&gt;Read(&amp;price, sizeof(price)) != gxDBASE_NO_ERROR) {
    return pod-&gt;GetDataFileError();
  }

  objectaddress = object_address;

  return gxDBASE_NO_ERROR;
}

int Grocery::Find()
{
  <FONT COLOR="#ff0000">// Search the index file for this entry</FONT>
  if(UsingIndex()) {
    GroceryKey key((const char *)this-&gt;name);
    GroceryKey compare_key;
    if(!FindKey(key, compare_key)) return 0;
    objectaddress = key.ObjectID();
    return 1; <FONT COLOR="#ff0000">// Found the index file entry</FONT>
  }

  <FONT COLOR="#ff0000">// If not using index file search the data file</FONT>
  Grocery grocery;
  FAU_t oa;          <FONT COLOR="#ff0000">// Object Address</FONT>
  gxBlockHeader gx;  <FONT COLOR="#ff0000">// Block Header</FONT>
  gxObjectHeader oh; <FONT COLOR="#ff0000">// Object Header</FONT>
  
  FAU_t gxdfileEOF = pod-&gt;OpenDataFile()-&gt;GetEOF();
  FAU_t addr = (FAU_t)0;
  addr = pod-&gt;OpenDataFile()-&gt;FindFirstBlock(addr); <FONT COLOR="#ff0000">// Search the entire file</FONT>

  if(addr == (FAU_t)0) return 0; <FONT COLOR="#ff0000">// No database blocks found in file</FONT>

  grocery.name = this-&gt;name;
  grocery.stock_number = this-&gt;stock_number;
  grocery.price = this-&gt;price;

  while(1) { 
    if(FAU_t(addr + pod-&gt;OpenDataFile()-&gt;BlockHeaderSize()) &gt;= gxdfileEOF) 
      break;
    if(pod-&gt;OpenDataFile()-&gt;Read(&amp;gx, sizeof(gxBlockHeader), addr) !=
       gxDBASE_NO_ERROR) {
      return 0;
    }
    if(gx.block_check_word == gxCheckWord) {
      if((__SBYTE__)gx.block_status == gxNormalBlock) {
	oa = addr + pod-&gt;OpenDataFile()-&gt;BlockHeaderSize();
	if(ReadObjectHeader(oh, oa) != gxDBASE_NO_ERROR) {
	  return 0;
	}
	if(oh.ClassID == GetClassID()) { 
	  if(Read(oa) != gxDBASE_NO_ERROR) {
	    return 0;
	  }
	  if(strcmp(name, grocery.name) == 0) {
	    objectaddress = oa;
	    return 1; <FONT COLOR="#ff0000">// Found unique data member</FONT>
	  }
	}
      }
      addr = addr + gx.block_length; <FONT COLOR="#ff0000">// Goto the next database block</FONT>
    }
    else {
      addr++; <FONT COLOR="#ff0000">// Keep searching until a valid database block is found</FONT>
    }
  }

  <FONT COLOR="#ff0000">// Reset the objects data</FONT>
  this-&gt;name = grocery.name;
  this-&gt;stock_number = grocery.stock_number;
  this-&gt;price = grocery.price;
    
  return 0; <FONT COLOR="#ff0000">// Could not find </FONT>
}

int Grocery::Delete()
{
  if(UsingIndex()) {
    GroceryKey key((const char *)this-&gt;name);
    GroceryKey compare_key;
    if(!FindKey(key, compare_key)) return 0; <FONT COLOR="#ff0000">// Could not find the key</FONT>
    objectaddress = key.ObjectID();
    if(!DeleteObject(objectaddress)) return 0; <FONT COLOR="#ff0000">// Could not delete the object</FONT>
    if(!DeleteKey(key, compare_key)) return 0; <FONT COLOR="#ff0000">// Could not delete the key</FONT>
    return 1; <FONT COLOR="#ff0000">// The index and data file entry was deleted</FONT>
  }

  <FONT COLOR="#ff0000">// If not using index file search the data file</FONT>
  if(!Find()) return 0; <FONT COLOR="#ff0000">// Could not find the data file entry</FONT>
  if(DeleteObject(objectaddress)) return 0; <FONT COLOR="#ff0000">// Could not delete the object</FONT>

  <FONT COLOR="#ff0000">// The object was deleted from the data file</FONT>
  return 1;
}

int Grocery::CompareIndex(unsigned index_number)
<FONT COLOR="#ff0000">// Compares the data file to the index file.</FONT>
<FONT COLOR="#ff0000">// Returns true if data and index file match.</FONT>
{
  if(!UsingIndex()) return 0;

  Grocery grocery(pod);
  GroceryKey key, compare_key;
  
  FAU_t oa;          <FONT COLOR="#ff0000">// Object Address</FONT>
  gxBlockHeader gx;  <FONT COLOR="#ff0000">// Block Header</FONT>
  gxObjectHeader oh; <FONT COLOR="#ff0000">// Object Header</FONT>
  
  int objects = 0; <FONT COLOR="#ff0000">// Keeps track of good database blocks</FONT>
  int matches = 0; <FONT COLOR="#ff0000">// Keep track of matches</FONT>
  
  FAU_t gxdfileEOF = pod-&gt;OpenDataFile()-&gt;GetEOF();
  FAU_t addr = (FAU_t)0;
  addr = pod-&gt;OpenDataFile()-&gt;FindFirstBlock(addr); <FONT COLOR="#ff0000">// Search the entire file</FONT>

  if(addr == (FAU_t)0) return 0; <FONT COLOR="#ff0000">// No database blocks found in file</FONT>

  while(1) { 
    if(FAU_t(addr + pod-&gt;OpenDataFile()-&gt;BlockHeaderSize()) &gt;= gxdfileEOF) 
      break;
    pod-&gt;OpenDataFile()-&gt;Read(&amp;gx, sizeof(gxBlockHeader), addr);
    if(gx.block_check_word == gxCheckWord) {
      if((__SBYTE__)gx.block_status == gxNormalBlock) {
	oa = addr + pod-&gt;OpenDataFile()-&gt;BlockHeaderSize();
	ReadObjectHeader(oh, oa);

	if(oh.ClassID == GetClassID()) { 
	  objects++; <FONT COLOR="#ff0000">// Increment the object count</FONT>
	  grocery.Read(oa);
	  key.SetObjectName(grocery.name);
	  key.SetObjectID(oa);
	  key.SetClassID(oh.ClassID);
	  if(FindKey(key, compare_key, index_number)) {
	    matches++; <FONT COLOR="#ff0000">// Index and data file match</FONT>
	  }
	  grocery.ClearName();
	}
      }
      addr = addr + gx.block_length; <FONT COLOR="#ff0000">// Go to the next database block</FONT>
    }
    else {
      addr++; <FONT COLOR="#ff0000">// Keep searching until a valid database block is found</FONT>
    }
  }

  return objects == matches;
}

int Grocery::RebuildIndexFile(const char *fname, unsigned index_number,
      			      int num_trees, BtreeNodeOrder_t node_order)
{
  if(!UsingIndex()) return 0;

  GroceryKey key, compare_key;
  gxBtree btx(key, node_order); 
  if(btx.Create(fname, num_trees) != gxDBASE_NO_ERROR) return 0;
  
  Grocery grocery(pod);
  
  FAU_t oa;          <FONT COLOR="#ff0000">// Object Address</FONT>
  gxBlockHeader gx;  <FONT COLOR="#ff0000">// Block Header</FONT>
  gxObjectHeader oh; <FONT COLOR="#ff0000">// Object Header</FONT>
  
  int objects = 0; <FONT COLOR="#ff0000">// Keeps track of good database blocks</FONT>
  int inserts = 0; <FONT COLOR="#ff0000">// Keep track of inserts</FONT>
  
  FAU_t gxdfileEOF = pod-&gt;OpenDataFile()-&gt;GetEOF();
  FAU_t addr = (FAU_t)0;
  addr = pod-&gt;OpenDataFile()-&gt;FindFirstBlock(addr); <FONT COLOR="#ff0000">// Search the entire file</FONT>

  if(addr == (FAU_t)0) return 0; <FONT COLOR="#ff0000">// No database blocks found in file</FONT>

  while(1) { 
    if(FAU_t(addr + pod-&gt;OpenDataFile()-&gt;BlockHeaderSize()) &gt;= gxdfileEOF) 
      break;
    pod-&gt;OpenDataFile()-&gt;Read(&amp;gx, sizeof(gxBlockHeader), addr);
    if(gx.block_check_word == gxCheckWord) {
      if((__SBYTE__)gx.block_status == gxNormalBlock) {
	oa = addr + pod-&gt;OpenDataFile()-&gt;BlockHeaderSize();
	ReadObjectHeader(oh, oa);
	if(oh.ClassID == GetClassID()) { 
	  objects++; <FONT COLOR="#ff0000">// Increment the object count</FONT>
	  grocery.Read(oa);
	  key.SetObjectName(grocery.name);
	  key.SetObjectID(oa);
	  key.SetClassID(oh.ClassID);

	  grocery.ClearName(); <FONT COLOR="#ff0000">// Prevent any memory leaks</FONT>
	   
	  <FONT COLOR="#ff0000">// Could not add the key</FONT>
	  if(!btx.Insert(key, compare_key)) return 0;
	  inserts++; <FONT COLOR="#ff0000">// Index and data file match</FONT>
	}
      }
      addr = addr + gx.block_length; <FONT COLOR="#ff0000">// Go to the next database block</FONT>
    }
    else {
      addr++; <FONT COLOR="#ff0000">// Keep searching until a valid database block is found</FONT>
    }
  }
  
  return objects == inserts;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
