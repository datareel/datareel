<!doctype html>
<!-- ******************************* -->
<!-- ******** Start of Page ******** -->
<!-- ******************************* -->
<!-- *********************************************************** -->
<!-- HTML Page -->
<!-- Designed For: FireFox, Chrome, Safari -->
<!-- Published By: DataReel Software Development -->
<!-- Content Last Modified: 01/15/2024 -->
<!-- File Creation Date: 01/15/2024 20:32:04 EST -->
<!-- *** -->
<!-- Package version: 12.3.10 -->
<!-- *** -->
<!-- Copyright (c) 1999-2024 DataReel Software Development -->
<!-- *********************************************************** -->
<!-- *********** HTML Page Description and Details ************* -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- START OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- This HTML page and its derivatives are copyright (c) 1999-2024, by -->
<!-- DataReel Software Development. This HTML page and any derivative Web -->
<!-- objects are published on the Internet for public viewing only. -->
<!-- Reproduction of any HTML page and/or Web objects published on -->
<!-- this Website is prohibited unless authorized in writing by -->
<!-- DataReel Software Development or authorized reseller. Reproduction of any -->
<!-- third party code used to produce pages on this Website is subject to -->
<!-- the third party licensing and distribution agreement. -->
<!-- *** -->
<!-- THIS SOFTWARE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND. THE -->
<!-- ENTIRE RISK OF THE QUALITY AND PERFORMANCE OF THIS SOFTWARE IS WITH -->
<!-- YOU. SHOULD ANY ELEMENT OF THIS SOFTWARE PROVE DEFECTIVE, YOU WILL -->
<!-- ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION. -->
<!-- *** -->
<!-- *********************************************************** -->
<!-- *************** THIRD PARTY ACKNOWLEDGMENT **************** -->
<!-- *********************************************************** -->
<!-- *** -->
<!-- NONE -->
<!-- *** -->
<!-- END OF LICENSING AND DISCLAIMER AGREEMENT -->
<!-- *** -->
<!-- HTML Internet page -->
<!-- *********************************************************** -->
<!-- PAGE CONTENT STARTS BELOW -->

<html lang="en" data-bs-theme="auto">
  <head>
<!--HEADSTART-->
<!--HEADEND-->
    <title>btree4 example</title>
    </head>
    <body>



<FONT FACE="Courier New" SIZE=3><PRE>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// -------- Start of File -------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// C++ Source Code File Name: testprog.cpp </FONT>
<FONT COLOR="#ff0000">// Compiler Used: MSVC, BCC32, GCC, HPUX aCC, SOLARIS CC</FONT>
<FONT COLOR="#ff0000">// Produced By: DataReel Software Development Team</FONT>
<FONT COLOR="#ff0000">// File Creation Date: 08/22/2000 </FONT>
<FONT COLOR="#ff0000">// Date Last Modified: 06/17/2016</FONT>
<FONT COLOR="#ff0000">// Copyright (c) 2001-2024 DataReel Software Development</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">// ------------- Program Description and Details ------------- // </FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
<FONT COLOR="#ff0000">/*
This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
 
This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  
USA

This test program is used to store multiple gxBtrees in a single
index file.
*/</FONT>
<FONT COLOR="#ff0000">// ----------------------------------------------------------- // </FONT>
#include "gxdlcode.h"

#if defined (__USE_ANSI_CPP__) <FONT COLOR="#ff0000">// Use the ANSI Standard C++ library</FONT>
#include &lt;iostream&gt;
using namespace std; <FONT COLOR="#ff0000">// Use unqualified names for Standard C++ library</FONT>
#else <FONT COLOR="#ff0000">// Use the old iostream library by default</FONT>
#include &lt;iostream.h&gt;
#endif <FONT COLOR="#ff0000">// __USE_ANSI_CPP__</FONT>

#include "gxdstats.h"
#include "gxbtree.h"
#include "ustring.h"

const BtreeNodeOrder_t MyKeyClassOrder = 7;
const __WORD__ MyKeyNameSize = 64;

class MyKeyClass : public DatabaseKeyB
{
public:
  MyKeyClass();
  MyKeyClass(const char *name);
  void operator=(const char *name);
  ~MyKeyClass() { }

public: <FONT COLOR="#ff0000">// Base class interface</FONT>
  size_t KeySize() { return sizeof(key_name); }
  int operator==(const DatabaseKeyB&amp; key) const;
  int operator&gt;(const DatabaseKeyB&amp; key) const;
  
  <FONT COLOR="#ff0000">// NOTE: This comparison function is only used if the </FONT>
  <FONT COLOR="#ff0000">// __USE_SINGLE_COMPARE__ preprocessor directive is </FONT>
  <FONT COLOR="#ff0000">// defined when the program is compiled.</FONT>
  int CompareKey(const DatabaseKeyB&amp; key) const;

public: <FONT COLOR="#ff0000">// Persistent data member</FONT>
  char key_name[MyKeyNameSize];
};

MyKeyClass::MyKeyClass() : DatabaseKeyB((char *)key_name)
{
  for(int i = 0; i &lt; MyKeyNameSize; i++) key_name[i] = 0;
}

MyKeyClass::MyKeyClass(const char *name) : DatabaseKeyB((char *)key_name)
{
  strncpy(key_name, name,  MyKeyNameSize);
  key_name[MyKeyNameSize-1] = 0; <FONT COLOR="#ff0000">// Ensure null termination</FONT>
}

void MyKeyClass::operator=(const char *name)
{
  strncpy(key_name, name,  MyKeyNameSize);
  key_name[MyKeyNameSize-1] = 0; <FONT COLOR="#ff0000">// Ensure null termination</FONT>
}

int MyKeyClass::operator==(const DatabaseKeyB&amp; key) const
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return (strcmp(key_name, (char *)kptr-&gt;db_key) == 0);
}

int MyKeyClass::operator&gt;(const DatabaseKeyB&amp; key) const
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return (strcmp(key_name, (char *)kptr-&gt;db_key) &gt; 0);
}

int MyKeyClass::CompareKey(const DatabaseKeyB&amp; key) const
<FONT COLOR="#ff0000">// NOTE: This comparison function is only used if the </FONT>
<FONT COLOR="#ff0000">// __USE_SINGLE_COMPARE__ preprocessor directive is </FONT>
<FONT COLOR="#ff0000">// defined when the program is compiled.</FONT>
{
  const MyKeyClass *kptr = (const MyKeyClass *)(&amp;key);
  return strcmp(key_name, (char *)kptr-&gt;db_key);
}

const int NKEYS = 26;
const char *keys1[NKEYS] = { "DOG", "CAT", "FISH", "MOUSE", "BIRD", "PIG",
			     "HORSE", "LION", "SNAKE", "COW", "ARMADILLO",
			     "GROUPER", "RAT", "MONKEY", "ZEBRA",
			     "STARFISH", "LIZARD", "CRAB", "SNAIL",
			     "GORILLA", "LOBSTER", "TURKEY", "BEETLE",
			     "SHARK", "CLAM", "OYSTER" }; 

const char *keys2[NKEYS] = { "FLEA", "BUTTERFLY", "SPARROW", "GOLDFISH",
			     "TIGER", "BEAR", "TROUTE", "MOOSE", "DEAR",
			     "SALMON", "TUNA", "GAZELLE", "SLOTH", "SPIDER",
			     "LEAPORD", "GIRAFFE", "MUSTANG", "CONDOR",
			     "KANGAROO", "SKUNK", "FOX", "PANTER",
			     "CHEETAH", "TOUCAN", "PARROT", "BUFFALO" };


const char *keys3[NKEYS] = { "KOALA", "HORSEFLY", "ANACONDA", "CROCODILE",
			     "RACCOON", "ALLIGATOR", "RABBIT", "WHALE",
			     "ANT", "CRANE", "LONGHORN", "CANARY", "WOMBAT",
			     "WOLFHOUND", "COUGAR", "BAT", "OWL", "SHRIMP",
			     "SCALLOP", "SQUID", "PYTHON", "SARDINE",
			     "TAPIR", "ELEPHANT", "EEL", "RHINOCEROS" };

const char *keys4[NKEYS] = { "LAMB", "BISON", "GRASSHOPPER", "MACKEREL",
			     "FERRET", "WASP", "CATERPILLAR", "MILLIPEDE",
			     "CENTIPEDE", "MOSQUITO", "POSSUM", "DUCK",
			     "WEASEL", "CARIBOU", "ANTELOPE", "SALAMANDER",
			     "NEWT", "CHICKEN", "BULL", "COBRA",
			     "CHIMPANZEE", "URCHIN", "CROW", "WOLF",
			     "SPONGE", "JELLYFISH" };


void PausePrg()
{
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Press enter to continue..." &lt;&lt; "\n";
  cin.get();
}

void BtreeStatus(gxBtree &amp;btx)
{
  UString intbuf;
  cout &lt;&lt; "\n";
  cout &lt;&lt; "Size of header =    " &lt;&lt; sizeof(gxBtreeHeader) &lt;&lt; "\n";
  intbuf &lt;&lt; clear &lt;&lt; (FAU_t)btx.HeaderAddress();
  cout &lt;&lt; "Header address =    " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
  intbuf &lt;&lt; clear &lt;&lt; (FAU_t)btx.Root();
  cout &lt;&lt; "Root address =      " &lt;&lt; intbuf.c_str() &lt;&lt; "\n";
  cout &lt;&lt; "Number of trees =   " &lt;&lt; btx.NumTrees() &lt;&lt; "\n";
  cout &lt;&lt; "Number of entries = " &lt;&lt; btx.NumKeys() &lt;&lt; "\n";
  cout &lt;&lt; "Number of nodes =   " &lt;&lt; btx.NumNodes() &lt;&lt; "\n";
  cout &lt;&lt; "B-tree order =      " &lt;&lt; btx.NodeOrder() &lt;&lt; "\n";
  cout &lt;&lt; "B-tree height =     " &lt;&lt; btx.BtreeHeight() &lt;&lt; "\n";
  PausePrg();
}

void BuildTree(gxBtree &amp;btx, const char *keys[NKEYS])
{
  MyKeyClass key;
  MyKeyClass compare_key;
  int i, rv;

  const int INSERTIONS = NKEYS;

  <FONT COLOR="#ff0000">// Inserting the keys</FONT>
  for(i = 0; i &lt; INSERTIONS; i++) {
    key = keys[i];  

    rv = btx.Insert(key, compare_key);
    
    if(rv != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem adding " &lt;&lt; keys[i] &lt;&lt; " - " &lt;&lt; i &lt;&lt; "\n";
      return;
    }
  }

  <FONT COLOR="#ff0000">// "Verifying the insertions</FONT>
  for(i = 0; i &lt; INSERTIONS; i++) {
    key = keys[i];      
    rv = btx.Find(key, compare_key);
    if(rv != 1) {
      cout &lt;&lt; "Error finding key " &lt;&lt; keys[i] &lt;&lt; " - " &lt;&lt; i &lt;&lt; "\n";
      return;
    }
  }

  <FONT COLOR="#ff0000">// "Deleting all the entries</FONT>
  for(i = 0; i &lt; INSERTIONS; i++) {
    key = keys[i];      

    rv = btx.Delete(key, compare_key);

    if(rv != 1) {
      cout &lt;&lt; "Error deleting key " &lt;&lt; keys[i] &lt;&lt; " - " &lt;&lt; i &lt;&lt; "\n";
      return;
    }

    <FONT COLOR="#ff0000">// Verify the remaining key locations</FONT>
    for(int j = INSERTIONS-1; j != i; j--) {
      key = keys[j];      
      rv = btx.Find(key, compare_key);
      if(rv != 1) {
	cout &lt;&lt; "Error finding key " &lt;&lt; keys[j] &lt;&lt; " - " &lt;&lt; j &lt;&lt; "\n";
	cout &lt;&lt; "After deleting key " &lt;&lt; keys[i] &lt;&lt; " - " &lt;&lt; i &lt;&lt; "\n";
	return;
      }
    }
  }

  <FONT COLOR="#ff0000">// Re-inserting all the keys</FONT>
  for(i = 0; i &lt; INSERTIONS; i++) {
    key = keys[i];  

    rv = btx.Insert(key, compare_key);

    if(rv != 1) {
      cout &lt;&lt; "\n" &lt;&lt; "Problem adding " &lt;&lt; keys[i] &lt;&lt; " - " &lt;&lt; i &lt;&lt; "\n";
      return;
    }
  }

  BtreeStatus(btx);
}

int main(int argv, char **argc)
{
  int num_trees = 4; <FONT COLOR="#ff0000">// Number of B-tree indexes this file will contain</FONT>
  const char *fname = "testfile.btx"; <FONT COLOR="#ff0000">// File name of this database</FONT>
  char rev_letter = gxDatabaseRevisionLetter; <FONT COLOR="#ff0000">// Set the default rev letter</FONT>
  if(argv == 2) { <FONT COLOR="#ff0000">// Set a specified revision letter</FONT>
    rev_letter = *argc[1];
    if(rev_letter == '0') rev_letter = '\0';
    <FONT COLOR="#ff0000">// Valid rev letters are:</FONT>
    <FONT COLOR="#ff0000">// Rev 0</FONT>
    <FONT COLOR="#ff0000">// Rev 'A' or 'a'</FONT>
    <FONT COLOR="#ff0000">// Rev 'B' or 'b'</FONT>
    <FONT COLOR="#ff0000">// Rev 'C' or 'c'</FONT>
    <FONT COLOR="#ff0000">// Rev 'D' or 'd'</FONT>
    <FONT COLOR="#ff0000">// Rev 'E' or 'e'</FONT>
    <FONT COLOR="#ff0000">// NOTE: The gxDatabase class will set invalid revision letters</FONT>
    <FONT COLOR="#ff0000">// to the version set by the gxDatabaseRevisionLetter constant.  </FONT>
  }

  MyKeyClass key, compare_key;
  gxBtree btx(key, MyKeyClassOrder);

  <FONT COLOR="#ff0000">// Create the B-tree with more than one tree</FONT>
  btx.Create(fname, num_trees, rev_letter);
  if(CheckError(btx.gxDatabasePtr()) != 0) return 1;

  cout &lt;&lt; "Building B-tree number 1..." &lt;&lt; "\n";
  <FONT COLOR="#ff0000">// The create function will always connect to B-tree number 1</FONT>
  BuildTree(btx, keys1);

  cout &lt;&lt; "Building B-tree number 2..." &lt;&lt; "\n";
  btx.ReConnect(2); <FONT COLOR="#ff0000">// Connect to B-tree number 2</FONT>
  if(CheckError(btx.gxDatabasePtr()) != 0) return 1;
  BuildTree(btx, keys2);
    
  cout &lt;&lt; "Building B-tree number 3..." &lt;&lt; "\n";
  btx.ReConnect(3); <FONT COLOR="#ff0000">// Connect to B-tree number 3</FONT>
  if(CheckError(btx.gxDatabasePtr()) != 0) return 1;
  BuildTree(btx, keys3);

  cout &lt;&lt; "Building B-tree number 4..." &lt;&lt; "\n";
  btx.ReConnect(4); <FONT COLOR="#ff0000">// Connect to B-tree number 4</FONT>
  if(CheckError(btx.gxDatabasePtr()) != 0) return 1;
  BuildTree(btx, keys4);

  int i;
  for(i = 1; i &lt; (num_trees+1); i++) {
    cout &lt;&lt; "Walking through the B-tree number " &lt;&lt; i 
	 &lt;&lt; " in sort order" &lt;&lt; "\n";
    PausePrg();
    btx.ReConnect(i);
    if(CheckError(btx.gxDatabasePtr()) != 0) return 1;
    if(btx.FindFirst(key)) {
      cout &lt;&lt; key.key_name &lt;&lt; ' ';
      while(btx.FindNext(key, compare_key))
	cout &lt;&lt; key.key_name &lt;&lt; ' ';
    }
    
    cout &lt;&lt; "\n" &lt;&lt; "\n";
  }

  cout &lt;&lt; "Closing and reopening the B-tree index file" &lt;&lt; "\n";
  btx.Open(fname);

  if(CheckError(btx.gxDatabasePtr()) != 0) return 1;
  num_trees = btx.NumTrees();

  for(i = 1; i &lt; (num_trees+1); i++) {
    cout &lt;&lt; "Walking through the B-tree number " &lt;&lt; i 
	 &lt;&lt; " in sort order" &lt;&lt; "\n";
    PausePrg();
    btx.ReConnect(i);
    if(CheckError(btx.gxDatabasePtr()) != 0) return 1;
    if(btx.FindFirst(key)) {
      cout &lt;&lt; key.key_name &lt;&lt; ' ';
      while(btx.FindNext(key, compare_key))
	cout &lt;&lt; key.key_name &lt;&lt; ' ';
    }
    
    cout &lt;&lt; "\n" &lt;&lt; "\n";
  }

  cout &lt;&lt; "Exiting..." &lt;&lt; "\n";
  return 0;
}
<FONT COLOR="#ff0000">// ----------------------------------------------------------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>
<FONT COLOR="#ff0000">// --------- End of File --------- //</FONT>
<FONT COLOR="#ff0000">// ------------------------------- //</FONT>

</PRE></FONT>


  </body>
</html>

<!-- PAGE CONTENT ENDS ABOVE -->
<!-- *********************************************************** -->
<!-- ******************************* -->
<!-- ********* End of Page ********* -->
<!-- ******************************* -->
